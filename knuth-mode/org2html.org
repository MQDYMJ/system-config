# Local Variables: #
# eval: (read-only-mode 0) #
# End: #

#+name: replace-emojis-with-local-files
#+BEGIN_SRC perl
  # class='emoji' src='/home/bhj/src/github/Wrench/release/emojis/iphone-new/RING.png'
  while (m,class='emoji' src='(.*?)',g) {
      $png_file = $1;
      ($png_file_basename = $png_file) =~ s,.*/,,;

      system("mkdir -p emojis") unless -d "emojis";
      system "cp", "$png_file", "emojis/$png_file_basename" unless -e "emojis/$png_file_basename";

      $png_file_map{$png_file} = "emojis/$png_file_basename";
  }

  s|class='emoji' src='(.*?)'|class='emoji' src='$png_file_map{$1}'|g;
  s|(<link rel="stylesheet" href=.)/css/|$1file:///css/|g;

#+END_SRC

#+name: emacs-lisp-export
#+BEGIN_SRC emacs-lisp
  (let* ((org-file "[%org_file%]")
         (my-loaded-themes custom-enabled-themes)
         (html-file "[%html_file%]")
         (org-file-already-loaded)
         (buffers (buffer-list))
         (org-buffer)
         (html-buffer (find-buffer-visiting html-file)))
    (when html-buffer
      (kill-buffer html-buffer))
    (package-initialize)
    (require 'ox-html)
    (require 'emojis)
    (while buffers
      (when (string= (buffer-file-name (car buffers)) org-file)
        (setq org-file-already-loaded t
              buffers nil))
      (setq buffers (cdr buffers)))
    (when (string-match ".org$" org-file) ; test whether fix emojis only
      (when custom-enabled-themes
        (dolist (theme custom-enabled-themes)
          (disable-theme theme)))
      (load-theme 'adwaita)
      (find-file org-file)
      (setq org-buffer (current-buffer))
      (org-html-export-to-html [%how_to_export%])
      (when my-loaded-themes
        (dolist (theme my-loaded-themes)
          (load-theme theme))))
    (when (setq html-buffer (find-buffer-visiting html-file))
      (kill-buffer html-buffer))
    (with-temp-buffer
      (insert-file html-file)
      (org2html-emojify)
      (goto-char (point-min))
      (write-file html-file)
      (unless org-file-already-loaded
        (kill-buffer org-buffer))
      (kill-buffer)))
#+END_SRC

** 最终的版本：

   #+name: the-ultimate-script
   #+BEGIN_SRC sh :tangle ~/system-config/bin/org2html :comments link :shebang "#!/bin/bash" :noweb yes
     set -e

     ## start code-generator "^\\s *#\\s *"
     # generate-getopt -P @bare @cat @fix-emojis-only
     ## end code-generator
     ## start generated code
     TEMP=$(POSIXLY_CORRECT=true getopt -o h \
                           --long bare,cat,fix-emojis-only,help,no-bare,no-cat,no-fix-emojis-only \
                           -n $(basename -- $0) -- "$@")
     declare bare=false
     declare cat=false
     declare fix_emojis_only=false
     eval set -- "$TEMP"
     while true; do
         case "$1" in

             --bare|--no-bare)
                 if test "$1" = --no-bare; then
                     bare=false
                 else
                     bare=true
                 fi
                 shift

                 ;;
             --cat|--no-cat)
                 if test "$1" = --no-cat; then
                     cat=false
                 else
                     cat=true
                 fi
                 shift

                 ;;
             --fix-emojis-only|--no-fix-emojis-only)
                 if test "$1" = --no-fix-emojis-only; then
                     fix_emojis_only=false
                 else
                     fix_emojis_only=true
                 fi
                 shift

                 ;;
             -h|--help)
                 set +x
                 echo -e
                 echo
                 echo Options and arguments:
                 printf "%06s" " "
                 printf %-24s '--[no-]bare'
                 echo
                 printf "%06s" " "
                 printf %-24s '--[no-]cat'
                 echo
                 printf "%06s" " "
                 printf %-24s '--[no-]fix-emojis-only'
                 echo
                 exit
                 shift
                 ;;
             --)
                 shift
                 break
                 ;;
             ,*)
                 die "internal error: $(. bt; echo; bt | indent-stdin)"
                 ;;
         esac
     done


     ## end generated code

     if test "$#" = 0 || test "$#" = 1 -a "$1" = -; then
         set -- ~/tmp/org2html.$$.org
         cat > ~/tmp/org2html.$$.org
         . atexit rm -f ~/tmp/org2html.$$.org
     fi

     cd "$(dirname "$1")"
     set -- "$(basename "$1")"

     if [[ $1 =~ .org$ ]]; then
         org_file=$1
         html_file=${1%.org}.html
     elif test "${fix_emojis_only}" != true; then
         die "Must specify an extra arg as a .org file"
     else
         org_file="no-such-file"
         html_file=$1
     fi

     if test "${bare}" = true; then
         how_to_export='nil nil nil t'
     else
         how_to_export=''
     fi

     emacsclient -e "$(cat <<'EOF6405e5bce1d2' | . .replace-%% --
               <<emacs-lisp-export>>
     EOF6405e5bce1d2
               )" 1>&2

     if test "${bare}" = true; then
         true
     else
         perl -npe "$(cat <<'EOFf0ea35142ce4'
                    <<replace-emojis-with-local-files>>
     EOFf0ea35142ce4
               )" -i "$html_file"


         css-inline "$html_file" > "$html_file".$$
         replace-mathjs "$html_file".$$
         mv "$html_file".$$ "$html_file"

         if [[ $org_file =~ .org$ ]]; then # else, we are called from org-export?
             of "$html_file"
         fi
     fi

     if test "${cat}" = true; then
         cat "$html_file"
         rm "$html_file"
     fi

     # Local Variables: #
     # eval: (read-only-mode 1) #
     # End: #
   #+END_SRC

   #+results: the-ultimate-script
