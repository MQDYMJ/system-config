#+title: 用 emacs 进行一些文件操作

具体的思路是这样的，我自己经常写一些比如：
#+BEGIN_SRC sh
cat f1 f2 > f3 # 也可能是 >>，append
echo x1 x2 > fx

#+END_SRC

这种操作有个问题，就是如果我的 f3、fx 当前是在 emacs 里打开着的，尤其是并且有改动的话，后续就麻烦了，搞不好改动就全丢了。所以希望改成用 emacs 自己来执行这几个操作。

以后，我希望可以这样搞：

#+BEGIN_SRC sh
emacs-file-op cat f1 f2 '>' f3
emacs-file-op echo x1 x2 '>' fx
#+END_SRC

#+name: delete-all.el
#+BEGIN_SRC elisp
  (delete-region (point-min) (point-max))
#+END_SRC
#+name: emacs-append.el
#+BEGIN_SRC elisp
  (save-excursion
    (with-current-buffer
        (find-file-noselect "$to_file")
      <%el-delete-old%>
      (goto-char (point-max))
      (insert-file "$from_file")
      (save-buffer)))
#+END_SRC
** 最终的版本：

#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

#+name: old-code
#+BEGIN_SRC sh :noweb yes

  input=~/tmp/emacs-file-op-input.$$

  . atexit rm "$input" -f
  echo -n > "$input"

  op=$1
  shift
  if test "$op" = cat; then
      while test "$1" != '>' -a "$1" != '>>'; do
          cat "$1" >> "$input"
          shift
      done
  elif test "$op" = echo; then
      while test "$1" != '>' -a "$1" != '>>'; do
          if test -s "$input"; then
              echo -n " " >> "$input"
          fi
          echo -n "$1" >> "$input"
          shift
      done
  else
      die "unknown op: $op"
  fi

  if test "$1" != '>' -a "$1" != '>>'; then
      die "Must specify how to edit '$2' with > or >>"
  fi

  if test $# != 2; then
      die "Must end the args with >(or >>) TARGET-FILE"
  fi

  from_file=$input
  to_file=$(readlink -m "$2")
  if test "$1" = '>>'; then
      el_delete_old=
  else
      el_delete_old="$(cat <<'EOF02763f20b5fb'
  <<delete-all.el>>
  EOF02763f20b5fb
  )"
  fi

  emacsclient -e "$(cat <<EOF16d93b20dc6b | . .replace-%%
  <<emacs-append.el>>
  EOF16d93b20dc6b
  )"
#+END_SRC

#+name: the-ultimate-script
#+BEGIN_SRC sh :tangle ~/system-config/bin/emacs-file-op :comments link :shebang "#!/bin/bash" :noweb yes
set -e

<<old-code>>
<<read-only>>
#+END_SRC

#+results: the-ultimate-script

