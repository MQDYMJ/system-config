#+LAST_MOBILE_CHANGE: 2015-03-08 21:47:17
#+title: Bash参数处理（使用getopt命令）

* 准备工作

  我希望使用的语法格式是这样的：

  ~gerenate-getopt oboolean-option=def-value-o?help-o a:argument?help-a=def-value-a~

  其中，第一个字母是短选项，比如上面的这段脚本，最后生成的会有 =-o= 和 =-a= 两个选项。第二个字母如果是 =:= 的话，表示这个选项是带参数的；否则它是不带参数的（真/假 / 乒乓 / 开关）选项。

  后面的 ~=.*~ 代表这个选项的初始值，等号前面可以不加空格。

  后面的 =?.*= 代表这个选项的帮助，问号前面也可以不加空格。

  如果 ~='()'~ 的话，表示这个选项带的参数是个数组（多次指定该选项会累积），否则它是个简单的字符串（多次指定该选项会覆盖，以最后指定的值为准）。

  最后输出一段脚本，可以用来进行参数处理。

   #+name: prepare
   #+BEGIN_SRC sh
     declare -A short_opts_map
     declare -A long_opts_map
     declare -A help_map
     declare -A default_val_map
     declare -A var_name_map

     ## start code-generator "^\\s *#\\s *"
     # generate-getopts p:prefix Pposixly-correct lis-local H:global-help eexport-all
     ## end code-generator
     ## start generated code

     export_all=false
     global_help=
     is_local=false
     posixly_correct=false
     prefix=
     OPTIND=1
     while getopts "eH:lPp:h" opt; do
         case "$opt" in

             e) export_all=true ;;
             H) global_help=$OPTARG ;;
             l) is_local=true ;;
             P) posixly_correct=true ;;
             p) prefix=$OPTARG ;;
             h)
                 echo
                 echo
                 printf %06s%s '-e ' 'export-all'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-H ' 'global-help'
                 printf %-24s 'GLOBAL_HELP'
                 echo ''
                 printf %06s%s '-l ' 'is-local'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-P ' 'posixly-correct'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-p ' 'prefix'
                 printf %-24s 'PREFIX'
                 echo ''
                 shift
                 exit 0
                 ;;
             ,*)
                 echo
                 echo
                 printf %06s%s '-e ' 'export-all'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-H ' 'global-help'
                 printf %-24s 'GLOBAL_HELP'
                 echo ''
                 printf %06s%s '-l ' 'is-local'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-P ' 'posixly-correct'
                 printf %-24s ''
                 echo ''
                 printf %06s%s '-p ' 'prefix'
                 printf %-24s 'PREFIX'
                 echo ''
                 exit 2
                 ;;
         esac
     done

     shift $((OPTIND - 1))

     ## end generated code


     if test "$is_local" = true; then
         is_local=local
     else
         is_local=
     fi

     if [[ $1 =~ ^\? ]]; then
         global_help=${1:1}
         shift
     fi

     while test "$1"; do
         spec=$1
         shift

         if [[ $spec =~ ^@ ]]; then
             short=
         else
             short=${spec:0:1}
         fi
         spec=${spec:1}
         if [[ $spec =~ ^: ]]; then
             short=$short:
             spec=${spec:1}
         fi

         long=$(echo "$spec"|perl -npe 's/(\?|=).*//')
         help=$(echo "$spec" | perl -ne 'print if s/.*\?(.*?)(=.*|$)/$1/')
         default=$(echo "$spec" | perl -ne 'print if s/.*=(.*?)(\?.*|$)/$1/')

         while true; do
             if test "${1:0:1}" = '?'; then
                 help=${1:1}
                 shift
             elif test "${1:0:1}" = '='; then
                 default=${1:1}
                 shift
             else
                 break
             fi
         done

         short_opts_map[$long]=$short
         long_opts_map[$long]=$long
         if [[ $short =~ : ]]; then
             long_opts_map[$long]=$long:
         fi

         if ! [[ $short =~ : ]]; then
             default_val_map[$long-off-]=false
             default_val_map[$long-on-]=true

             if [[ $default =~ \( ]]; then
                 eval bool_val=$default
                 default_val_map[$long-off-]=${bool_val[0]}
                 default_val_map[$long-on-]=${bool_val[1]}
                 if test ${#bool_val} = 3; then
                     default=${bool_val[2]}
                 else
                     default=${bool_val[0]}
                 fi
             elif test -z "$default"; then
                 default=false
             fi
         fi

         default_val_map[$long]=$default
         help_map[$long]=$help
         var_name_map[$long]=${long//-/_}
         if test "$prefix"; then
             var_name_map[$long]=${prefix}_${long//-/_}
         fi
     done

     eval "$(sort-args.reliably -t long_opts_sorted -- "${!long_opts_map[@]}")"

     output-no-long-opts() {
         output_done=false
         for long in "${long_opts_sorted[@]}"; do
             short=${short_opts_map[$long]}
             if ! [[ $short =~ : ]]; then
                 echo -n ,no-$long
             fi
         done
     }

   #+END_SRC

* 输出范本：

#+BEGIN_SRC sh

  ## start code-generator "^\\s *#\\s *"
  # generate-getopt ggnu p:phone
  ## end code-generator
  ## start generated code
  TEMP=$(getopt -o p:g --long phone:,gnu  -n $(basename -- $0) -- "$@")
  phone=
  gnu=false
  eval set -- "$TEMP"
  while true; do
      case "$1" in
          -p|--phone)
              phone=$2
              shift 2
              ;;
          -g|--gnu|--no-gnu)
              if test "$1" = --no-gnu; then
                  gnu=false
              else
                  gnu=true
              fi
              ;;
          --)
              shift
              break
              ;;
          ,*)
              die "internal error"
              ;;
      esac
  done

  ## end generated code

#+END_SRC

* 输出 ~TEMP=~

  #+name: output-temp-eq
  #+BEGIN_SRC sh
    TEMP=\$($(
                if test "$is_local" -o "$posixly_correct" = true; then
                    echo POSIXLY_CORRECT=true
                fi
            ) getopt -o $(string-join '' $(for x in "${long_opts_sorted[@]}"; do x="${short_opts_map[$x]}"; if test "$x" -a "$x" != :; then echo $x; fi; done) h) \\
     --long $(string-join , $(for x in "${long_opts_sorted[@]}"; do echo ${long_opts_map[$x]}; done) help; output-no-long-opts) \\
     -n \$(basename -- \$0) -- "\$@")
  #+END_SRC

* 输出变量初始值

  #+name: output-var-def-val
  #+BEGIN_SRC sh
    for long in "${long_opts_sorted[@]}"; do
        var=${var_name_map[$long]}
        if test "$export_all" = false; then
            echo $is_local ${var}=${default_val_map[$long]}
        else
            echo $is_local ${var}=\$\{$var:-${default_val_map[$long]}\}
        fi
    done
  #+END_SRC

* 输出范本2
  #+name: template2
  #+BEGIN_SRC sh
  eval set -- "\$TEMP"
  while true; do
    case "\$1" in

  #+END_SRC

* 输出参数处理
  #+name: arg-handle
  #+BEGIN_SRC sh
    for long in "${long_opts_sorted[@]}"; do
        s=${short_opts_map[$long]}
        is_boolean=true
        if [[ $s =~ : ]]; then
            is_boolean=false
        fi
        s=${s/:/}
        var=${var_name_map[$long]}
        cat << EOF2
            $(
                if test "$s"; then
                    echo -n "-$s|"
                fi
                echo -n "--$long";
                if test "$is_boolean" = true; then
                    echo -n "|--no-$long"
                fi
                echo ")"
            )
            $(
                if test $is_boolean = false; then
                    if test "${default_val_map[$long]}" = '()'; then
                        echo ${var}=\(\"\${${var}[@]}\" \""\$2\""\)
                        echo shift 2
                    else
                        echo ${var}=\$2
                        echo shift 2
                    fi
                else
                    cat << EOF3
                    if test "\$1" = --no-$long; then
                        ${var}=${default_val_map[$long-off-]}
                    else
                        ${var}=${default_val_map[$long-on-]}
                    fi
                    shift
    EOF3
                fi
            )
    EOF2
        echo ";;"
    done

  #+END_SRC

* 输出帮助

  #+name: output-help
  #+BEGIN_SRC sh
    $(
        echo set +x
        echo echo -e "$global_help"
        echo echo
        echo echo Options and arguments:
        for long in ${long_opts_sorted[@]}; do
            short=${short_opts_map[$long]}
            is_boolean=true
            if [[ $short =~ : ]]; then
                is_boolean=false
            fi
            short=${short/:/}
            if test "$short"; then
                echo printf "%06s" "'-$short, '"
            else
                echo 'printf "%06s" " "'
            fi
            long_output=$(
                if test "$is_boolean" = true; then
                    echo -n --[no-]$long
                else
                    uc_long=$long
                    uc_long=${uc_long^^}
                    echo -n --$long=${uc_long//-/_}
                fi
                       )
            opt_chars=$(( ${#long_output} + 6))
            echo printf "%-24s" "'$long_output'"

            if test "${help_map[$long]}"; then
                if test "$opt_chars" -gt 30; then
                    echo echo
                    echo 'printf "%30s" ""'
                fi
                echo echo "'${help_map[$long]}'"
            else
                echo echo
            fi
        done
        echo exit
    )
  #+END_SRC

* 输出范本3
  #+name: foot
 #+BEGIN_SRC sh
   -h|--help)
       <<output-help>>
       shift
       ;;
   --)
      shift
      break
      ;;
      ,*)
          die "internal error"
          ;;
      esac
   done

  #+END_SRC

* 输出全部变量

  #+name: maybe-export-all
  #+BEGIN_SRC sh
    if test "$export_all" = "true"; then
        echo
        for long in "${long_opts_sorted[@]}"; do
            echo export ${var_name_map[$long]}
        done
    fi
  #+END_SRC

* Read only
#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

* 最终脚本

#+name: the-ultimate-script
#+BEGIN_SRC sh :tangle ~/system-config/bin/generate-getopt :comments link :shebang "#!/bin/bash" :noweb yes

  # All bash scripts should start with ~set -e~ to fail early and loudly.
  set -e
  <<prepare>>
  cat <<EOF
  <<output-temp-eq>>
    $(
  <<output-var-def-val>>
    )
  <<template2>>
    $(
  <<arg-handle>>
    )
  <<foot>>
  EOF

  <<maybe-export-all>>
  <<read-only>>

#+END_SRC

#+results: the-ultimate-script

