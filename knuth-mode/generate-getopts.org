#+LAST_MOBILE_CHANGE: 2015-03-08 21:47:17
#+title: Bash参数处理（使用getopt命令）

* 准备工作

  我希望使用的语法格式是这样的：

  ~gerenate-getopts -l oboolean-option=def-value-o?help-o a:argument?help-a=def-value-a~

  最后输出一段脚本，可以用来进行参数处理。

   #+name: prepare
   #+BEGIN_SRC sh
     declare -A short_opts_map
     declare -A long_opts_map
     declare -A help_map
     declare -A default_val_map
     is_local=

     if test "$1" = -l; then
         is_local=local
         shift
     fi

     for spec in "$@"; do
         if [[ $spec =~ ^\? ]]; then
             description=${spec:1}
             continue
         fi

         if [[ $spec =~ ^@ ]]; then
             short=
         else
             short=${spec:0:1}
         fi
         spec=${spec:1}
         if [[ $spec =~ ^: ]]; then
             short=$short:
             spec=${spec:1}
         fi

         long=$(echo "$spec"|perl -npe 's/(\?|=).*//')
         help=$(echo "$spec" | perl -ne 'print if s/.*\?(.*?)(=.*|$)/$1/')
         default=$(echo "$spec" | perl -ne 'print if s/.*=(.*?)(\?.*|$)/$1/')

         short_opts_map[$long]=$short
         long_opts_map[$long]=$long
         if [[ $short =~ : ]]; then
             long_opts_map[$long]=$long:
         fi

         if test -z "$default" && ! [[ $short =~ : ]]; then
             default=false
         fi

         default_val_map[$long]=$default
         help_map[$long]=$help
     done

     eval "$(sort-args.reliably -t long_opts_sorted -- "${!long_opts_map[@]}")"

     output-no-long-opts() {
         output_done=false
         for long in "${long_opts_sorted[@]}"; do
             short=${short_opts_map[$long]}
             if ! [[ $short =~ : ]]; then
                 echo -n ,no-$long
             fi
         done
     }

   #+END_SRC

* 输出范本：

#+BEGIN_SRC sh
  ## start code-generator "^\\s *#\\s *"
  # generate-getopts -l ggnu p:phone
  ## end code-generator
  ## start generated code

  local phone=
  local gnu=false
  local OPTIND=1
  while getopts "p:gh" opt; do
      case "$opt" in

          p) phone=$OPTARG ;;
          g) gnu=true ;;
          h)
              echo
              echo
              printf %06s '-g '
              printf %-24s ''
              echo ''
              printf %06s '-p '
              printf %-24s 'PHONE'
              echo ''
              shift
              exit 0
              ;;
          ,*)
              echo
              echo
              printf %06s '-g '
              printf %-24s ''
              echo ''
              printf %06s '-p '
              printf %-24s 'PHONE'
              echo ''
              exit 2
              ;;
      esac
  done
  ## end generated code

#+END_SRC

* 输出变量初始值

  #+name: output-var-def-val
  #+BEGIN_SRC sh
    for long in "${long_opts_sorted[@]}"; do
        var=${long//-/_}
        echo $is_local ${var}=${default_val_map[$long]}
    done
    echo $is_local OPTIND=1
  #+END_SRC

* 输出范本2
  #+name: template2
  #+BEGIN_SRC sh
  while getopts "$(string-join '' $(for x in "${long_opts_sorted[@]}"; do echo "${short_opts_map[$x]}"; done) h)" opt; do
    case "\$opt" in

  #+END_SRC

* 输出参数处理
  #+name: arg-handle
  #+BEGIN_SRC sh
    for long in "${long_opts_sorted[@]}"; do
        s=${short_opts_map[$long]}
        is_boolean=true
        if [[ $s =~ : ]]; then
            is_boolean=false
        fi
        s=${s/:/}
        var=${long//-/_}
        cat << EOF2
            $(
                if test "$s"; then
                    echo -n "$s) "
                else
                    die "s not specified for $long"
                fi
                if test $is_boolean = false; then
                    echo -n ${var}=\$OPTARG \;\;
                else
                 echo -n ${var}=true \;\;
                fi
            )
    EOF2
    done

  #+END_SRC

* 输出帮助

  #+name: output-help
  #+BEGIN_SRC sh
    $(
        echo echo "$description"
        echo echo
        for long in ${long_opts_sorted[@]}; do
            short=${short_opts_map[$long]}
            is_boolean=true
            if [[ $short =~ : ]]; then
                is_boolean=false
            fi
            short=${short/:/}
            if test "$short"; then
                echo printf "%06s%s" "'-$short '" "'$long'"
            else
                echo 'printf "%06s" " "'
            fi
            long_output=$(
                if test "$is_boolean" = true; then
                    true
                else
                    uc_long=$long
                    uc_long=${uc_long^^}
                    echo -n ${uc_long//-/_}
                fi
                       )
            opt_chars=$(( ${#long_output} + 6))
            echo printf "%-24s" "'$long_output'"
            if test "$opt_chars" -gt 30; then
                echo echo
                echo 'printf "%30s" ""'
            fi
            echo echo "'${help_map[$long]}'"
        done
    )
  #+END_SRC

* 输出范本3
  #+name: foot
  #+BEGIN_SRC sh
    h)
        <<output-help>>
        shift
        exit 0
        ;;
       ,*)
           <<output-help>>
           exit 2
           ;;
       esac
    done

    shift \$((OPTIND - 1))
  #+END_SRC
* 最终脚本

#+name: the-ultimate-script
#+BEGIN_SRC sh :tangle ~/system-config/bin/generate-getopts :comments link :shebang "#!/bin/bash" :noweb yes

  # All bash scripts should start with ~set -e~ to fail early and loudly.
  set -e
  <<prepare>>
  cat <<EOF
  <<output-temp-eq>>
  $(
  <<output-var-def-val>>
  )
  <<template2>>
  $(
  <<arg-handle>>
  )
  <<foot>>
  EOF

  <<read-only>>

#+END_SRC

#+results: the-ultimate-script

* Readonly
#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC


