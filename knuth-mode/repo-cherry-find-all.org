#+name: script-to-find-patches
#+BEGIN_SRC sh
  if test "$DEBUG" = true; then
      set -x
  fi
  if test -e ~/src/github/smartcm/repo-cherry-find-all/$(ap)/.ignore; then
      exit
  fi
  TOP=$ANDROID_TOP;
  log=$TOP/out/diff/$(repo-path|perl -npe "s,/,%,g").csv
  if [[ $log =~ /\.csv$ ]]; then
      echo "Error for $(ap): can not find repo path"
      exit 1
  fi
  mkdir -p $(dirname $log);

  offer-unshallow() {
      if yes-or-no-p -n "你的当前 git 目录是一个 shallow clone，无法获取完整 git 历史，要不要自动帮你 unshallow（如确认，请输入 yes）？"; then
          sse unshallow-source-code
      else
          die "无法在 shallow clone 下执行此操作，退出"
      fi
  }


  if test -z "$to_manifest_xml"; then
      if test ! "$remote" -a $local_from = false ; then
          from=remotes/$(repo-remote)/$from
      fi
      if test ! "$remote" -a $local_to = false ; then
          to=remotes/$(repo-remote)/$to
      fi

      if test -e .git/shallow; then
          if is-jenkins; then
              export GIT_DIR=~/src/android-mirror/$(repo-project).git
              export from=${from#remotes/*/}
              export to=${to#remotes/*/}
          else
              offer-unshallow
          fi

      fi
  else
      if test -e .git/shallow; then
          if is-jenkins; then
              export GIT_DIR=~/src/android-mirror/$(repo-project).git
              export repo_is_mirror=true
          else
              offer-unshallow
          fi
      fi

      . $to_manifest_xml.env
      . $from_manifest_xml.env
      pwd=$(pwd -P)
      if [[ ${from_path_revision_map[$pwd]} =~ ^[a-f0-9]{40}$ ]]; then
          from=${from_path_revision_map[$pwd]}
      elif test "$repo_is_mirror" = true; then
          from=${from_path_revision_map[$pwd]}
      else
          from=${from_path_remote_map[$pwd]}/${from_path_revision_map[$pwd]}
      fi

      if [[ ${to_path_revision_map[$pwd]} =~ ^[a-f0-9]{40}$ ]]; then
          to=${to_path_revision_map[$pwd]}
      elif test "$repo_is_mirror" = true; then
          to=${to_path_revision_map[$pwd]}
      else
          to=${to_path_remote_map[$pwd]}/${to_path_revision_map[$pwd]}
      fi
  fi

  if test "$from" = / -o "$to" = / || test "$from" = "$to"; then
      exit
  fi


  echo git-change-id-ffable $from $to in $PWD
  if ! git-shallow-log-in-mirror -1 "$from" >/dev/null 2>&1 || ! git-shallow-log-in-mirror -1 "$to" >/dev/null 2>&1; then
      if is-jenkins && [[ $JOB_NAME =~ ^SmartRebaser ]]; then
          echo no need to fetch "$from" or "$to" in $PWD for SmartRebaser
          exit
      else
          echo need to fetch "$from" or "$to" in $PWD
          git fetch $(repo-remote) || true
      fi
  fi
  git-change-id-ffable $from $to > $log || true
  if test $(stat -c %s $log) = 0; then
      rm $log;
  fi;

  pwd


#+END_SRC
** 最终的版本：

#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

#+name: old-code
#+BEGIN_SRC sh :noweb yes
  function die() {
      echo Error: "$@"
      exit -1
  }

  git_version=$(git version | pn 3)

  if version-lower-than "$git_version" 2.0 && yes-or-no-p -y "Your git version is too low, upgrade?"; then
      upgrade-git
  fi

  if ! which xmlstarlet >/dev/null 2>&1 && yes-or-no-p -y "You need to install xmlstarlet, do it now?"; then
      sudo apt-get install xmlstarlet
  fi

  if echo $SHELLOPTS | grep -q xtrace; then
      export SHELLOPTS
  fi

  if test $# = 0 || test "$#" = 2 -a "$1" = -F -a "$2" = -T; then
      if test "$#" = 0; then
          function remove-remotes() {
              perl -npe 's!remotes/.*?/!!'
          }
      else
          function remove-remotes() {
              perl -npe 's!remotes/!!'
          }
      fi

      if test -d .repo; then
          set -- \
              --xf $(select-output-line -p "From which xml" -o 'cd .repo/manifests; find . -name "*.xml"') \
              --xt $(select-output-line -p "To which xml" -o 'cd .repo/manifests; find . -name "*.xml"')
          if (
              cd .repo/manifests
              test "$(git config repo.mirror)" = true
          ); then
              export repo_is_mirror=true
          fi

          if test -d out/diff; then
              rm out/diff -rf
          fi
          mkdir -p out/diff
      else
          set -- \
              -f $(git-choose-branch -p "From which branch in $PWD") -F \
              -t $(git-choose-branch -p "To which branch in $PWD") -T
      fi
      yes-or-no-p -y -- "You want run with $@?"
      if test -e ~/src/github/smartcm/scm-helpers/repo-cherry-find-all -a -d .repo; then
          . ~/src/github/smartcm/scm-helpers/repo-cherry-find-all "$@"
      fi
  fi


  ## start code-generator "^\\s *#\\s *"
      # generate-getopt j:jobs=5 \
          # @:xf '?从哪个 xml 文件挑 patch，自动计算 from 分支' \
          # @:xt '?往哪个 xml 文件合入 patch，自动计算 to 分支' \
          # Flocal-from '?把 from 分支当成一个本地分支，不要自动加上 remotes/$(repo-remote)/ 前缀' \
          # Tlocal-to '?把 to 分支当成一个本地分支，不要自动加上 remotes/$(repo-remote)/ 前缀' \
          # f:from '?从哪个分支挑 patch' \
          # t:to '?往哪个分支合入 patch' \
          # r:remote '?使用哪个 remote'
  ## end code-generator
  ## start generated code
  TEMP=$( getopt -o f:j:FTr:t:h \
                 --long from:,jobs:,local-from,local-to,remote:,to:,xf:,xt:,help,no-local-from,no-local-to \
                 -n $(basename -- $0) -- "$@")
  declare from=
  declare jobs=5
  declare local_from=false
  declare local_to=false
  declare remote=
  declare to=
  declare xf=
  declare xt=
  eval set -- "$TEMP"
  while true; do
      case "$1" in

          -f|--from)
              from=$2
              shift 2
              ;;
          -j|--jobs)
              jobs=$2
              shift 2
              ;;
          -F|--local-from|--no-local-from)
              if test "$1" = --no-local-from; then
                  local_from=false
              else
                  local_from=true
              fi
              shift
              ;;
          -T|--local-to|--no-local-to)
              if test "$1" = --no-local-to; then
                  local_to=false
              else
                  local_to=true
              fi
              shift
              ;;
          -r|--remote)
              remote=$2
              shift 2
              ;;
          -t|--to)
              to=$2
              shift 2
              ;;
          --xf)
              xf=$2
              shift 2
              ;;
          --xt)
              xt=$2
              shift 2
              ;;
          -h|--help)
              set +x
              echo -e
              echo
              echo Options and arguments:
              printf %06s '-f, '
              printf %-24s '--from=FROM'
              echo '从哪个分支挑 patch'
              printf %06s '-j, '
              printf %-24s '--jobs=JOBS'
              echo
              printf %06s '-F, '
              printf %-24s '--[no-]local-from'
              echo '把 from 分支当成一个本地分支，不要自动加上 remotes/$(repo-remote)/ 前缀'
              printf %06s '-T, '
              printf %-24s '--[no-]local-to'
              echo '把 to 分支当成一个本地分支，不要自动加上 remotes/$(repo-remote)/ 前缀'
              printf %06s '-r, '
              printf %-24s '--remote=REMOTE'
              echo '使用哪个 remote'
              printf %06s '-t, '
              printf %-24s '--to=TO'
              echo '往哪个分支合入 patch'
              printf "%06s" " "
              printf %-24s '--xf=XF'
              echo '从哪个 xml 文件挑 patch'
              printf "%06s" " "
              printf %-24s '--xt=XT'
              echo '往哪个 xml 文件合入 patch'
              exit
              shift
              ;;
          --)
              shift
              break
              ;;
          ,*)
              die "internal error"
              ;;
      esac
  done


  ## end generated code

  from_manifest_xml=$xf
  to_manifest_xml=$xt


  if test -z "$from_manifest_xml" -a -z "$to_manifest_xml"; then
      if test -z "$from" -o -z "$to"; then
          if test -e .git; then
              export from=$(git-choose-branch -p from)
              export to=$(git-choose-branch -p to)
              local_from=true
              local_to=true
          else
              die "Error: Usage $(basename $0) -f FROM -t TO"
          fi
      fi

      if test $local_from = false -a "$remote"; then
          from=remotes/$remote/$from
      fi

      if test $local_to = false -a "$remote"; then
          to=remotes/$remote/$to
      fi
      export from
      export to
      export remote
      export local_from
      export local_to
  else

      if test -z "$to_manifest_xml"; then
          to_manifest_xml=$(basename $(readlink -f $(lookup-file -e .repo/manifest.xml)))
      elif test -z "$from_manifest_xml"; then
          from_manifest_xml=$(basename $(readlink -f $(lookup-file -e .repo/manifest.xml)))
      fi

      mkdir -p out/diff
      cat <<EOF > out/diff/$(basename $0).info
  from_xml=$from_manifest_xml
  to_xml=$to_manifest_xml
  EOF


      if test "$local_from" = true -o "$local_to" = true -o "$from" -o "$to" -o "$remote"; then
          die "when using xml, these variables must not be set"
      fi

      if test -e $to_manifest_xml; then
          true
      elif test -e .repo/manifests/$to_manifest_xml; then
          to_manifest_xml=$(readlink -f .repo/manifests/$to_manifest_xml)
      else
          to_manifest_xml=$(lookup-file -e .repo/manifests/$(basename $to_manifest_xml))
      fi

      if test -e $from_manifest_xml; then
          true
      elif test -e .repo/manifests/$from_manifest_xml; then
          from_manifest_xml=$(readlink -f .repo/manifests/$from_manifest_xml)
      else
          from_manifest_xml=$(lookup-file -e .repo/manifests/$(basename $from_manifest_xml))
      fi

      export to_manifest_xml from_manifest_xml
      if test "$to_manifest_xml" = "$from_manifest_xml"; then
          die "Can't cherry from the same xml"
      fi
      declare -A to_path_map from_path_map

      function handle_xml_lines() {
          path=${line#*:}
          remote=${path#*:}
          revision=${remote#*:}
          path=${path%%:*}
          remote=${remote%%:*}
          name=${line%%:*}

          if test -z "$revision"; then
              revision=$default_revision
          fi

          if test -z "$remote"; then
              remote=$default_remote
          fi

          if test -z "$path"; then
              path=$name
          fi

           if test ! -d "$path/.git" -a -d "$name.git"; then
               path=$name.git
           fi
          if test ! -d "$path"; then
              continue
          fi
          path=$(cd $path; pwd -P)
      }

      (
          repo-xml-sel -t -m //default -v @remote -o ' ' -v @revision -n $to_manifest_xml
          repo-xml-sel -t -m //project -v @name -o ':' -v @path -o ':' -v @remote -o ':' -v @revision -n $to_manifest_xml
      ) | (
          read default_remote default_revision
          declare -A to_path_remote_map to_path_revision_map
          while read line; do
              handle_xml_lines
              to_path_revision_map[$path]=$revision
              to_path_remote_map[$path]=$remote
          done
          export to_path_remote_map to_path_revision_map
          export -p |grep -P -e 'declare -Ax (to_path_revision_map|to_path_remote_map)' > $to_manifest_xml.env
      )

      (
          repo-xml-sel -t -m //default -v @remote -o ' ' -v @revision -n $from_manifest_xml
          repo-xml-sel -t -m //project -v @name -o ':' -v @path -o ':' -v @remote -o ':' -v @revision -n $from_manifest_xml
      ) | (
          read default_remote default_revision
          declare -A from_path_remote_map from_path_revision_map
          while read line; do
              handle_xml_lines
              from_path_revision_map[$path]=$revision
              from_path_remote_map[$path]=$remote
          done
          export from_path_remote_map from_path_revision_map
          export -p |grep -P -e 'declare -Ax (from_path_revision_map|from_path_remote_map)' > $from_manifest_xml.env
      )
  fi
  rm -f out >/dev/null 2>&1 || true
  my-rfa -j $jobs "$(cat <<'EOFb4e84b0385f1'
  <<script-to-find-patches>>
  EOFb4e84b0385f1
  )"
#+END_SRC

#+name: the-ultimate-script
#+BEGIN_SRC sh :tangle ~/system-config/bin/repo-cherry-find-all :comments link :shebang "#!/bin/bash" :noweb yes
  set -e
  <<old-code>>
  <<read-only>>
#+END_SRC

#+results: the-ultimate-script

