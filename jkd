#!/usr/bin/env perl
# [[file:~/src/github/org-kungfu/jkd.org::the-ultimate-script][the-ultimate-script]]
use strict;
use String::ShellQuote;

## start code-generator "^\\s *#\\s *"
# generate-getopt -P -s perl -p jkd \
# '?subcmd_help()' \
# u:username='"$ENV{scm_jira_user}"' '?"Login Username"' \
# p:password='"$ENV{scm_jira_password}"' '?"Login Password"' \
# j:jiraurl='"$ENV{scm_jira_url}"' '?"Jira URL (only FQDN, no / and such)"' \
# vverbose='"$ENV{jkd_verbose}"' '?"Verbose debug output"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $jkd_jiraurl = "$ENV{scm_jira_url}";
my $jkd_password = "$ENV{scm_jira_password}";
my $jkd_username = "$ENV{scm_jira_user}";
my $jkd_verbose = "$ENV{jkd_verbose}";

my $handler_help = sub {
    print subcmd_help();
    print "\n\n选项和参数：\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--jiraurl=JIRAURL';
    if (length('--jiraurl=JIRAURL') > 24 and length("Jira URL (only FQDN, no / and such)") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Jira URL (only FQDN, no / and such)";
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--password=PASSWORD';
    if (length('--password=PASSWORD') > 24 and length("Login Password") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Login Password";
    print "\n";
    printf "%6s", '-u, ';
    printf "%-24s", '--username=USERNAME';
    if (length('--username=USERNAME') > 24 and length("Login Username") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Login Username";
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--[no]verbose';
    if (length('--[no]verbose') > 24 and length("Verbose debug output") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Verbose debug output";
    print "\n";

    exit(0);
};

GetOptions (
    'jiraurl|j=s' => \$jkd_jiraurl,
    'password|p=s' => \$jkd_password,
    'username|u=s' => \$jkd_username,
    'verbose|v!' => \$jkd_verbose,
    'help|h!' => \&$handler_help,
    );


## end generated code
use v5.10;
use String::ShellQuote;

if ($jkd_verbose) {
    say "jkd", shell_quote(@ARGV);
}

my %file_config;
use Config::Simple;

my ($config_file) = glob "~/.config/org-kungfu/config.ini";

if (-e $config_file) {
    Config::Simple->import_from($config_file, \%file_config);
}

if (not $jkd_password) {
    $jkd_password = $file_config{"jkd.password"};
}

if (not $jkd_password) {
    say "Must specify the jira password";
    &$handler_help(1)
}

if (not $jkd_username) {
    $jkd_username = $file_config{"jkd.username"};
}

if (not $jkd_username) {
    say "Must specify the jira username";
    &$handler_help(1);
}

if (not $jkd_jiraurl) {
    $jkd_jiraurl = $file_config{"jkd.jiraurl"};
}

if (not $jkd_jiraurl) {
    say "Must specify the jira url";
    &$handler_help(1);
}

my $jkd_topdir = $file_config{"jkd.topdir"};
if (not $jkd_topdir) {
    $jkd_topdir = glob("~/src/github/jkd-doujyou"); # doujyou is japanese for 道場
}

use File::Path;
make_path($jkd_topdir);
chdir($jkd_topdir)
    or die "Can't chdir: $jkd_topdir";

use JIRA::REST;

my $jira = JIRA::REST->new({
    url      => "$jkd_jiraurl",
    username => "$jkd_username",
    password => "$jkd_password"
                         });
use v5.10;
use HTTP::Request::Common;
use LWP::UserAgent;
use JSON;
use File::Path qw(make_path);
use File::Basename;
use Encode;

sub jkd_url_for_api($) {
    (my $api_path = $_[0]) =~ s,^/,,;

    my $auth_str = sprintf "%s:%s@", $jkd_username, $jkd_password;
    (my $scm_jira_site = $jkd_jiraurl) =~ s,(https?://),$1$auth_str,;
    my $url = "${scm_jira_site}${api_path}";
    if ($jkd_verbose) {
        say STDERR "api: $url";
    }

    return "$url";
}

sub get($) {
    my $ua = LWP::UserAgent->new;
    my $api = $_[0];
    my $url = jkd_url_for_api($api);

    my $response = $ua->request(GET $url);
    if ($response->code != 200) {
        die "Can't get $api: code is " . $response->code . ", url is $url";
    }


    return $response;
}

sub select_args(@) {
    if ($jkd_verbose) {
        say STDERR "select-args ", join(" ", shell_quote(@_));
    }
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P p:prompt O:order-name i:init-input
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $init_input = "";
    my $order_name = "";
    my $prompt = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--init-input=INIT-INPUT';
        if (length('--init-input=INIT-INPUT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-O, ';
        printf "%-24s", '--order-name=ORDER-NAME';
        if (length('--order-name=ORDER-NAME') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--prompt=PROMPT';
        if (length('--prompt=PROMPT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'init-input|i=s' => \$init_input,
        'order-name|O=s' => \$order_name,
        'prompt|p=s' => \$prompt,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my @command = (
        "select-args", "-p", "$prompt", "-i", "$init_input",
        "-O", "$order_name",
        @ARGV
        );

    my $command = join(" ", shell_quote(@command));
    my $res = qx($command);

    return $res;
}

sub jkd_q(@) {
    my $unset_jql = '!unset!';
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl q:jql='"$unset_jql"' pprint-all
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");



    my $jql = "$unset_jql";
    my $print_all = 0;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-q, ';
        printf "%-24s", '--jql=JQL';
        if (length('--jql=JQL') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--[no]print-all';
        if (length('--[no]print-all') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'jql|q=s' => \$jql,
        'print-all|p!' => \$print_all,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    use URI::Escape;
    if ($jql eq $unset_jql) {
        if (@ARGV) {
            $jql = uri_escape(join(" ", @ARGV));
        } else {
            die "Must specify jql"
        }
    } else {
        if (@ARGV) {
            die "Extra args: ", join(" ", @ARGV);
        } else {
            $jql = uri_escape($jql);
        }
    }

    my $jql_content = get("rest/api/2/search?jql=$jql")->content;
    if ($print_all) {
        print "${jql_content}";
        exit 0;
    }

    my $jql_ret = decode_json $jql_content;
    my @issues;
    for my $issue (@{$jql_ret->{issues}}) {
        push @issues, sprintf "%s: %s (%s)", $issue->{key}, $issue->{fields}{summary}, $issue->{fields}{status}{statusCategory}{key};
    }
    my $selected_issue = select_args("-p", "which issue do you want?", sort {$a cmp $b} @issues);
    system("putclip", $selected_issue);
}

sub jkd_select_project(@) {
    my $projects_resp = get("rest/api/2/project/");

    my %project_key_name_map;
    my $projects_object = decode_json $projects_resp->content;

    for my $project (@{$projects_object}) {
        $project_key_name_map{$project->{key}} = $project->{name};
    }

    return select_args("-p", "Which project do you want to use?",
                "-O", "select-jira-project",
                sort {$a cmp $b} map {sprintf "%s: %s", $_, $project_key_name_map{$_}} keys %project_key_name_map
        );
}

sub jkd_get_issue_types(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l p:project ttest-it
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $project = "";
    my $test_it = 0;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--project=PROJECT';
        if (length('--project=PROJECT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-t, ';
        printf "%-24s", '--[no]test-it';
        if (length('--[no]test-it') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'project|p=s' => \$project,
        'test-it|t!' => \$test_it,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my $project_meta_resp = get("rest/api/2/issue/createmeta?projectKeys=$project");
    my %jkd_project_issue_types_name_id_map;

    my $project_meta_obj = decode_json $project_meta_resp->content;
    for my $project (@{$project_meta_obj->{projects}}) {
        for my $issuetype (@{$project->{issuetypes}}) {
            my $name = $issuetype->{name};
            my $id = $issuetype->{id};
            $jkd_project_issue_types_name_id_map{$name} = $id;
            say "Got issue type: $name => $id";
        }
    }

    if ($test_it) {
        print join("\n",
                   map
                   {sprintf "%s: %s", $_, $jkd_project_issue_types_name_id_map{$_}}
                   keys %jkd_project_issue_types_name_id_map
            );
    }
    return %jkd_project_issue_types_name_id_map;
}

sub jkd_get_issue_fields(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l p:project i:issue-type
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $issue_type = "";
    my $project = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue-type=ISSUE-TYPE';
        if (length('--issue-type=ISSUE-TYPE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--project=PROJECT';
        if (length('--project=PROJECT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'issue-type|i=s' => \$issue_type,
        'project|p=s' => \$project,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if (not $issue_type) {
        $issue_type = jkd_select_issue_type("-p", "$project");
    }

    my $issue_fields_resp = get("rest/api/2/issue/createmeta?projectKeys=${project}&issuetypeIds=${issue_type}&expand=projects.issuetypes.fields");

    return decode_json $issue_fields_resp->content;
}

use File::Slurp;

sub org_markdown_convert(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l @:text @:from @:to
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $from = "";
    my $text = "";
    my $to = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '';
        printf "%-24s", '--from=FROM';
        if (length('--from=FROM') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '';
        printf "%-24s", '--text=TEXT';
        if (length('--text=TEXT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '';
        printf "%-24s", '--to=TO';
        if (length('--to=TO') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'from=s' => \$from,
        'text=s' => \$text,
        'to=s' => \$to,
        'help|h!' => \&$handler_help,
        );


    ## end generated code
    if (not $text) {
        return "";
    }

    chomp(my $tmp_file = qx(mktemp));
    write_file($tmp_file, $text);
    my $res = qx(pandoc -f $from -t $to $tmp_file);
    unlink($tmp_file);
    return $res;
}

sub org_to_markdown($) {
    return org_markdown_convert("--from", "org", "--to", "markdown", "--text", $_[0]);
}

sub markdown_to_org($) {
    return org_markdown_convert("--to", "org", "--from", "markdown", "--text", $_[0]);
}

sub work_with_all_fields($$\%;$) {
    my ($project_id, $issue_type_id, $required_fields, $edit_issue_json_obj) = @_;

    my $issue_fields_obj = jkd_get_issue_fields("-p", "$project_id", "-i", "$issue_type_id");

    for my $project (@{$issue_fields_obj->{projects}}) {
        for my $it (@{$project->{issuetypes}}) {
            if ($it->{id} != $issue_type_id) {
                next;
            }

            my @fields_to_edit;
            if ($edit_issue_json_obj) {
               my @command = (
                   "select-args-n", "-p", decode_utf8("请输入你想要编辑的域"),
                   map {
                       sprintf "%s: %s", $_, $it->{fields}{$_}{name}
                   }
                   grep {
                       $it->{fields}{$_}{required}
                   } sort keys %{$it->{fields}}
                   );
               my $command = join(" ", shell_quote(@command));
               my $values = decode_utf8 qx($command);
               $values =~ s,:.*,,mg;
               @fields_to_edit = split(" ", $values);
               say STDERR "fields_to_edit is @fields_to_edit";
            } else {
                @fields_to_edit = sort keys %{$it->{fields}};
            }

            $required_fields->{assignee} = '' if exists $it->{fields}{assignee};

            for my $field_key (@fields_to_edit) {
                if ($it->{fields}{$field_key}{required}) {
                    if ($field_key eq 'project' || $field_key eq 'issuetype') {
                        next;
                    }
                    say "fild value is ", encode_utf8($edit_issue_json_obj->{fields}{$field_key} || "");
                    if ($it->{fields}{$field_key}{schema}{type} eq 'string') {
                        my @command = (
                            "ask-for-input-with-emacs", "-p", sprintf("Please input the %s", encode_utf8($it->{fields}{$field_key}{name} or "$field_key (field has no name)")),
                            "--init-text", markdown_to_org encode_utf8($edit_issue_json_obj->{fields}{$field_key} || "")
                            );
                        my $command = join(" ", shell_quote(@command));
                        say "command is $command";
                        $required_fields->{$field_key} = decode_utf8 org_to_markdown qx($command);
                    } elsif ($it->{fields}{$field_key}{schema}{type} eq 'array' and
                             $it->{fields}{$field_key}{schema}{custom} eq "com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes") {
                        my $field_name = $it->{fields}{$field_key}{name};
                        my %allowed_values_map;
                        map { $allowed_values_map{$_->{value}} = $_->{id}} @{$it->{fields}{$field_key}{allowedValues}};
                        my @command = (
                            "select-args-n", "-p", decode_utf8("请输入你想要选择的 ") . "$field_name",
                            keys %allowed_values_map
                            );
                        my $command = join(" ", shell_quote @command);
                        my $values = decode_utf8 qx($command);
                        $required_fields->{$field_key} = [];
                        for (split " ", $values) {
                            say "Working for $field_name: $_";
                            push @{$required_fields->{$field_key}}, {id => $allowed_values_map{$_}} if ${allowed_values_map{$_}};
                        }
                    } else {
                        say $it->{fields}{$field_key}{name}, " scheme is ", $it->{fields}{$field_key}{schema}{type}, ", don't know how to deal";
                    }
                }
            }
        }
    }
}

sub jkd_e(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl i:issue-to-edit f:field-to-edit
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");



    my $field_to_edit = "";
    my $issue_to_edit = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-f, ';
        printf "%-24s", '--field-to-edit=FIELD-TO-EDIT';
        if (length('--field-to-edit=FIELD-TO-EDIT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue-to-edit=ISSUE-TO-EDIT';
        if (length('--issue-to-edit=ISSUE-TO-EDIT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'field-to-edit|f=s' => \$field_to_edit,
        'issue-to-edit|i=s' => \$issue_to_edit,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if (not $issue_to_edit) {
        die "You must specify -issue-to-edit";
    }

    my $json_issue = decode_json get("rest/api/2/issue/$issue_to_edit")->content;
    my $issue_type_id = $json_issue->{fields}{issuetype}{id};
    my $issue_project = $json_issue->{fields}{project}{key};
    my $issue_fields_obj = jkd_get_issue_fields("-p", "$issue_project", "-i", "$issue_type_id");

    my %edited_fields;

    work_with_all_fields($issue_project, $issue_type_id, %edited_fields, $json_issue);

    my $ua = LWP::UserAgent->new;

    my $request = PUT jkd_url_for_api("rest/api/2/issue/$issue_to_edit"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            fields => \%edited_fields
    };
    my $response = $ua->request($request);

    say "PUT response code:" . $response->code, "result: ", $response->content;
}

sub jkd_select_issue_type(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l p:project
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $project = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--project=PROJECT';
        if (length('--project=PROJECT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'project|p=s' => \$project,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my %jkd_project_issue_types_name_id_map = jkd_get_issue_types("-p", $project);
    my $issue_type_name = decode_utf8 select_args("-p", "Which type of issue do you want?", "-O", "select-issue-type", sort {$a cmp $b} keys %jkd_project_issue_types_name_id_map);
    my $issue_type_id = $jkd_project_issue_types_name_id_map{$issue_type_name};
    say STDERR "issue_type_id is $issue_type_id, issue_type_name is '$issue_type_name'";
    return $issue_type_id;
}

sub jkd_c(@) { # create issue

    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l p:project i:issue-type-id @assign-to-myself=1
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $assign_to_myself = 1;
    my $issue_type_id = "";
    my $project = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '';
        printf "%-24s", '--[no]assign-to-myself';
        if (length('--[no]assign-to-myself') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue-type-id=ISSUE-TYPE-ID';
        if (length('--issue-type-id=ISSUE-TYPE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--project=PROJECT';
        if (length('--project=PROJECT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'assign-to-myself!' => \$assign_to_myself,
        'issue-type-id|i=s' => \$issue_type_id,
        'project|p=s' => \$project,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if (not $project) {
        ($project = jkd_select_project()) =~ s/:.*//;
    }

    if (not $issue_type_id) {
        $issue_type_id = jkd_select_issue_type("-p", $project);
    }

    my %required_fields;
    work_with_all_fields($project, $issue_type_id, %required_fields);

    $required_fields{project} = {
        key => $project,
    };

    $required_fields{issuetype} = {
        id => $issue_type_id,
    };

    if ($assign_to_myself and exists $required_fields{assignee}) {
        $required_fields{assignee} = {
            name => $ENV{scm_jira_user}
        };
    } else {
        delete $required_fields{assignee};
    }

    my $ua = LWP::UserAgent->new;
    say "json is ", encode_json { fields => \%required_fields };

    my $request = POST jkd_url_for_api("rest/api/2/issue"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            fields => \%required_fields,
    };
    my $response = $ua->request($request);

    say "POST response code:" . $response->code, "result: ", $response->content;
}

sub jkd_comment(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -l -s perl i:issue c:comment @once
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $comment = "";
    my $issue = "";
    my $once = 0;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-c, ';
        printf "%-24s", '--comment=COMMENT';
        if (length('--comment=COMMENT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue=ISSUE';
        if (length('--issue=ISSUE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '';
        printf "%-24s", '--[no]once';
        if (length('--[no]once') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'comment|c=s' => \$comment,
        'issue|i=s' => \$issue,
        'once!' => \$once,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if ($once) {
        my $jira_issue = $jira->GET("/issue/$issue");
        for (@{$jira_issue->{fields}{comment}{comments}}) {
            if ($_->{body} eq "$comment") {
                say "$comment already exists";
                exit 0;
            }
        }
    }

    my $ua = LWP::UserAgent->new;

    my $request = PUT jkd_url_for_api("rest/api/2/issue/${issue}"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            update => {
                comment => [
                    {
                        add =>
                        {
                            body => decode_utf8 $comment
                        }
                    }
                    ]
            }
    };
    my $response = $ua->request($request);

    say "PUT response code:" . $response->code, "result: ", $response->content;

}

sub jkd_get_comment(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P i:issue n:nth-comment=-1
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $issue = "";
    my $nth_comment = -1;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue=ISSUE';
        if (length('--issue=ISSUE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-n, ';
        printf "%-24s", '--nth-comment=NTH-COMMENT';
        if (length('--nth-comment=NTH-COMMENT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'issue|i=s' => \$issue,
        'nth-comment|n=s' => \$nth_comment,
        'help|h!' => \&$handler_help,
        );


    ## end generated code
    my $jira_issue = $jira->GET("/issue/$issue");
    print $jira_issue->{fields}{comment}{comments}[-1]{body};
}

sub jkd_assign(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l i:issue-id a:assign-to
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $assign_to = "";
    my $issue_id = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-a, ';
        printf "%-24s", '--assign-to=ASSIGN-TO';
        if (length('--assign-to=ASSIGN-TO') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue-id=ISSUE-ID';
        if (length('--issue-id=ISSUE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'assign-to|a=s' => \$assign_to,
        'issue-id|i=s' => \$issue_id,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my $ua = LWP::UserAgent->new;

    my $request = PUT jkd_url_for_api("rest/api/2/issue/${issue_id}/assignee"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            name => $assign_to
    };

    my $response = $ua->request($request);

    if ($response->code < 200 || $response->code >= 300) {
        use HTTP::Status;
        say sprintf("PUT error! response code: %d (meaning: %s), content: %s", $response->code, status_message($response->code), $response->content);
    }
}

use HTTP::Request::Common;
use LWP::UserAgent;
use JSON;


sub jkd_mits(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l i:issue s:sprint b:board
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $board = "";
    my $issue = "";
    my $sprint = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-b, ';
        printf "%-24s", '--board=BOARD';
        if (length('--board=BOARD') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue=ISSUE';
        if (length('--issue=ISSUE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-s, ';
        printf "%-24s", '--sprint=SPRINT';
        if (length('--sprint=SPRINT') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'board|b=s' => \$board,
        'issue|i=s' => \$issue,
        'sprint|s=s' => \$sprint,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    use v5.10;

    if (not $sprint) {
        if (not $board) {
            my $json_boards = decode_json get("rest/agile/1.0/board/")->content;
            $board = select_args("-p", "which board do you want? (should be scrum, not kanban)", sort {$a cmp $b} map {sprintf "%s: %s", $_->{id}, encode_utf8 $_->{name}} @{$json_boards->{values}});
            $board =~ s,:.*,,;
        }
        if ($board) {
            my $json_sprints = decode_json get("rest/agile/1.0/board/$board/sprint")->content;
            $sprint = $json_sprints->{values}[-1]{id};
        } else {
            die "Must specify one of sprint or board, when using board, the last sprint will be used";
        }
    }

    my $ua = LWP::UserAgent->new;

    my $request = POST jkd_url_for_api("/rest/agile/1.0/sprint/${sprint}/issue"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            issues => [
                "$issue"
                ]
    };
    my $response = $ua->request($request);

    say "POST response code:" . $response->code, "result: ", $response->content;


}
use v5.10;

sub jkd_tri(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -l -s perl i:issue t:transition
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $issue = "";
    my $transition = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-i, ';
        printf "%-24s", '--issue=ISSUE';
        if (length('--issue=ISSUE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-t, ';
        printf "%-24s", '--transition=TRANSITION';
        if (length('--transition=TRANSITION') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'issue|i=s' => \$issue,
        'transition|t=s' => \$transition,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if (not $issue) {
        say "must specify the issue";
        &$handler_help();
    }

    unless ($transition =~ m/^\d+$/) {
        my $response = get("rest/api/2/issue/${issue}/transitions?expand=transitions.fields");
        my $json_obj = decode_json $response->content;
        $transition = select_args("-p", "如何变更当前 issue：${issue}", "-i", "$transition", map {sprintf "id=%s: name=%s", $_->{id}, $_->{name}} @{$json_obj->{transitions}});
        say "transition is $transition";
        $transition =~ s,^id=(\d+):.*,$1, or
            die "Invalid transision $transition";
    }

    my $ua = LWP::UserAgent->new;

    my $request = POST jkd_url_for_api("rest/api/2/issue/${issue}/transitions"),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => encode_json {
            transition => {
                id => $transition
            }
    };
    say "my request's content: ", $request->content;
    my $response = $ua->request($request);

    say "PUT response code:" . $response->code, "result: ", $response->content;

}
sub subcmd_help() {
    my $top_help_str = <<~'EOF';
        Usage: jkd [GLOBAL_OPTIONS]... SUB_COMMAND SUBCMD_ARGS...
        Here's the list of sub-commands:
        EOF

    my @subcmd_help_strs;
    my %subcmd_helpstr_map = (
        e => "Edit jira issue in emacs org-mode",
        tri => "Transition of an issue",
        );

    my %help_printed_map;

    for my $subcmd ((sort {$a cmp $b} grep {m/^jkd_/} keys %::), (sort {$a cmp $b} keys %subcmd_helpstr_map)) {
        (my $raw_subcmd = $subcmd) =~ s,^jkd_,,;
        $subcmd = "jkd_$raw_subcmd";
        if ($help_printed_map{$raw_subcmd}) {
            next;
        } else {
            $help_printed_map{$raw_subcmd} = 1;
        }

        my $subcmd_help_str = $subcmd_helpstr_map{$raw_subcmd} ||
            "NO DESCRIPTION.";

        if (not defined &$subcmd) {
            $subcmd_help_str .= " (NO DEFINITION)"
        }

        push @subcmd_help_strs, sprintf("    %s\n\t%s", $raw_subcmd, $subcmd_help_str);
    }

    return join "\n", $top_help_str, @subcmd_help_strs;
}
(my $sub_command = "jkd_" . shift) =~ s,-,_,g;


if (not defined &$sub_command) {
    say "Can't find sub-command: $sub_command";
    &$handler_help();
}

$sub_command = \&{$sub_command};
&$sub_command(@ARGV);

# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
# the-ultimate-script ends here
