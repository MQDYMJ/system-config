###
### Welcome to Beagrep's configure.in.  We hope you enjoy your stay.
###

AC_INIT(beagrepd/BeagrepDaemon.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(beagrep, 0.3.9)

########################################################################

###
### Some dependencies
###

MONO_REQUIRED=1.2.4
MONODOC_REQUIRED=1.2.4
NDESK_DBUS_REQUIRED=0.5.2
NDESK_DBUS_GLIB_REQUIRED=0.3.0
GTK_SHARP_REQUIRED=2.10.0
GMIME_SHARP_REQUIRED=2.2.0
EVOLUTION_SHARP_REQUIRED=0.13.3
GTK_REQUIRED=2.10.0

########################################################################

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_PROG_INSTALL
AM_PROG_LIBTOOL
AC_PROG_CXX

VERSION=${VERSION}
AC_SUBST(VERSION)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

AC_PATH_PROG(BASH, bash)
AC_SUBST(BASH)

AC_PATH_PROG(MONO, mono, no)
if test "x$MONO" = "xno"; then
        AC_MSG_ERROR([You need to install the Mono runtime])
fi

AC_PATH_PROG(MCS, mcs, no)
if test "x$MCS" = "xno"; then
        AC_MSG_ERROR([You need to install the Mono mcs compiler])
fi

AC_MSG_CHECKING([for mono.pc])
if test -z `$PKG_CONFIG --variable=prefix mono`; then
  AC_MSG_ERROR([missing the mono.pc file, usually found in the mono-devel package])
else
  AC_MSG_RESULT([found])
fi

BEAGREP_DEFINES=""

# check that we have the require version of mono

# Temporary: check for mono-1.9
PKG_CHECK_MODULES(MONO, mono-2 >= 1.9, mono_1_9=yes, mono_1_9=no)
if test "x$mono_1_9" = "xno"; then
        AC_MSG_RESULT([missing mono >= 1.9. Searching for mono >= 1.2.4])
        PKG_CHECK_MODULES(MONO, mono >= $MONO_REQUIRED)
else
        AC_MSG_RESULT([found mono >= 1.9])
        BEAGREP_DEFINES="$BEAGREP_DEFINES -define:MONO_1_9"
fi

# check for various mono DLLs that we need.
needed_dlls="Mono.Data.Sqlite Mono.Posix System.Data System.Web ICSharpCode.SharpZipLib"
for i in $needed_dlls; do
  AC_MSG_CHECKING([for $i.dll])
  if test ! -e `$PKG_CONFIG --variable=prefix mono`/lib/mono/2.0/$i.dll &&
     test ! -e `$PKG_CONFIG --variable=prefix mono`/lib/mono/4.5/$i.dll; then
    AC_MSG_ERROR([missing required mono DLL: $i.dll])
  else
    AC_MSG_RESULT([found])
  fi
done

# SharpZipLib was broken previously, and all our Makefile.am's depend on this
# define.
SHARPZIPLIB_LIBS="-r:ICSharpCode.SharpZipLib"
AC_SUBST(SHARPZIPLIB_LIBS)

# check for OS
case "$target" in
  *-*-linux*)
    os=linux
    ;;
  *-*-freebsd*)
    os=freebsd
    ;;
  *)
    AC_MSG_ERROR([Unrecognised target OS: $target])
    ;;
esac
AM_CONDITIONAL(OS_LINUX, test "x$os" = "xlinux")
AM_CONDITIONAL(OS_FREEBSD, test "x$os" = "xfreebsd")

# xdgmime really wants to have HAVE_MMAP defined
AC_FUNC_MMAP()

# check for desktop-launch
AC_PATH_PROG(DESKTOP_LAUNCH, desktop-launch, no)
AM_CONDITIONAL(ENABLE_DESKTOP_LAUNCH, test "x$DESKTOP_LAUNCH" != "xno")

# check for xdg-open
AC_PATH_PROG(XDG_OPEN, xdg-open, no)
AM_CONDITIONAL(ENABLE_XDG_OPEN, test "x$XDG_OPEN" != "xno")

#
# I18N
#

# Many distros don't have a dependency on sqlite for their
# mono-data-sqlite packages, and the mono build process itself
# doesn't require it.  But we do, so check for it here.

# We really need sqlite 3.3.1+; the earlier pkgconfig based
# test was also flawed. Hence check for the sqlite3_prepare_v2
# API which was added in 3.3.9. 3.3.9 was released in Jan 07,
# so we can assume everyone has a much much newer sqlite3
AC_MSG_CHECKING([for sqlite3 >= 3.3.9])
AC_CHECK_LIB(sqlite3, sqlite3_prepare_v2)

dnl ----------------------------------------------

dnl inotify

AC_ARG_ENABLE([inotify],
         AC_HELP_STRING([--disable-inotify], [Disable inotify filesystem monitoring support (default auto)]),
         enable_inotify=$enableval,
         enable_inotify=auto)

AC_CHECK_HEADERS(sys/inotify.h)

if test "x$ac_cv_header_sys_inotify_h" = "xno"; then

        dnl error out if user has explicitly requested inotify
        if test "x$enable_inotify" = "xyes"; then
                AC_MSG_ERROR([inotify is unavailable on your system architecture])
        fi

        enable_inotify="no (unavailable)"

else

        if test "x$enable_inotify" != "xno"; then
                enable_inotify="yes"
        else
                enable_inotify="no (disabled)"
        fi

fi

AM_CONDITIONAL(ENABLE_INOTIFY, test "x$enable_inotify" = "xyes")

dnl ----------------------------------------------

dnl gsf-sharp


dnl ----------------------------------------------

dnl ----------------------------------------------

dnl taglib-sharp: Needed for indexing audio formats
PKG_CHECK_MODULES([GLIB], glib-2.0 >= 2.2.0)

dnl ----------------------------------------------
PKG_CHECK_MODULES(BEAGREPD,
[
        shared-mime-info
        gmime-sharp-2.6 >= $GMIME_SHARP_REQUIRED
        glib-sharp-2.0 >= $GTK_SHARP_REQUIRED
])
BEAGREPD_LIBS="$BEAGREPD_LIBS"
AC_SUBST(BEAGREPD_LIBS)

GMIME_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix gmime-sharp-2.4`

dnl ----------------------------------------------

GTK_BINARY_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
AC_SUBST(GTK_BINARY_VERSION)

dnl ----------------------------------------------

dnl Prefixes for helper scripts
GAC_PREFIX="$EVO_SHARP_PREFIX:$GMIME_SHARP_PREFIX"
dnl Remove duplicate prefixes
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|:|\n|g' | sort | uniq | tr '\n' ':'`"
dnl Remove stray :s
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|::\+|:|g' -e 's|^:\+||' -e 's|:\+$||'`"
AC_SUBST(GAC_PREFIX)


dnl ----------------------------------------------

dnl Monodoc

AC_ARG_ENABLE(docs,
        AC_HELP_STRING([--disable-docs],
        [Do not build documentation (default yes)]),
        with_docs=$enableval,
        with_docs=yes)

if test "x$with_docs" = "xyes"; then
        AC_PATH_PROG(MONODOCER, monodocer, no)
        if test "x$MONODOCER" = "xno"; then
                AC_MSG_ERROR([You need to install monodoc, or pass --disable-docs to configure to skip documentation installation])
        fi

        AC_PATH_PROG(MDASSEMBLER, mdassembler, no)
        if test "x$MDASSEMBLER" = "xno"; then
                AC_MSG_ERROR([You need to install mdassembler, or pass --disable-docs to configure to skip documentation installation])
        fi

        AM_CONDITIONAL(BUILD_DOCS, true)
else
        AC_MSG_NOTICE([not building Beagrep csharp API documentation])
        AM_CONDITIONAL(BUILD_DOCS, false)
fi

dnl ----------------------------------------------

dnl Conditional for debugging XML messages.

AC_ARG_ENABLE([xml-dump],
        AC_HELP_STRING([--enable-xml-dump], [Enables printing of the XML messages sent between components (default no)]),
        enable_xml_dump=$enableval,
        enable_xml_dump=no)

if test "x$enable_xml_dump" = "xyes"; then
        AC_DEFINE_UNQUOTED(ENABLE_XML_DUMP, 1, [Dump XML messages for debugging])
        BEAGREP_DEFINES="$BEAGREP_DEFINES -define:ENABLE_XML_DUMP"
fi

AC_SUBST(BEAGREP_DEFINES)

dnl ----------------------------------------------

AC_OUTPUT([
Makefile
Util/Makefile
glue/Makefile
BeagrepClient/Makefile
beagrepd/Makefile
Filters/Makefile
tools/Makefile
doc/Makefile
doc/api/Makefile
conf-data/Makefile
beagrep-0.0.pc
beagrep-daemon.pc
beagrep-ui-0.0.pc
beagrep.spec
])

echo "
        Beagrep version:           ${VERSION}
        Target OS:                ${os}
        Inotify:                  ${enable_inotify}

        Prefix:                   ${prefix}

        Build RDF Adapter         ${enable_rdf_adapter} (purely experimental)
        Build docs?               ${with_docs}
"
