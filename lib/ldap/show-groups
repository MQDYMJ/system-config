#!/bin/bash

# 显示用户的 ldap 组名及其描述

## start code-generator "^\\s *#\\s *"
# generate-getopt -P u:user g:group-regexp mmost-relevant-group=true aall-groups
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o ag:mu:h \
                      --long all-groups,group-regexp:,most-relevant-group,user:,help,no-all-groups,no-most-relevant-group \
                      -n $(basename -- $0) -- "$@")
declare all_groups=false
declare group_regexp=
declare most_relevant_group=true
declare user=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--all-groups|--no-all-groups)
            if test "$1" = --no-all-groups; then
                all_groups=false
            else
                all_groups=true
            fi
            shift

            ;;
        -g|--group-regexp)
            group_regexp=$2
            shift 2

            ;;
        -m|--most-relevant-group|--no-most-relevant-group)
            if test "$1" = --no-most-relevant-group; then
                most_relevant_group=false
            else
                most_relevant_group=true
            fi
            shift

            ;;
        -u|--user)
            user=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-a, '
            printf %-24s '--[no-]all-groups'
            echo
            printf %06s '-g, '
            printf %-24s '--group-regexp=GROUP_REGEXP'
            echo
            printf %06s '-m, '
            printf %-24s '--[no-]most-relevant-group'
            echo
            printf %06s '-u, '
            printf %-24s '--user=USER'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "${user}"; then
    die "You must specify the user!"
fi

if test "${all_groups}" = true; then
    most_relevant_group=false
fi

groups=$(
    comp-mail -g "" -d $user -m memberOf | pn 2 | pn 1 , | sort -u
      )

for g in ${groups}; do
    if [[ $g =~ $group_regexp ]]; then
        echo $g
        comp-mail -d $g -m descr
    fi
done |
    if test "${most_relevant_group}" = true; then
        perl -ne "$(
cat <<'EOF47b005703faf'
# {%perl-mode%}
use v5.10;
if (m,CN=(.*),) {
    $last_group = $1;
} elsif (m,description:+\s+(.*),) {
    $last_description = $1;
    $group_desc_map{$last_group} = $last_description;
}

END {
    @staff_groups = grep {m,Department.*-staff,} keys %group_desc_map;
    @staff_groups = sort {
        length($group_desc_map{$a}) <=> length($group_desc_map{$b})
    } @staff_groups;

    ($most_specific_group = $staff_groups[-1]) =~ s,-staff,,;
    printf "%s : %s\n", $most_specific_group, $group_desc_map{$most_specific_group};
}
# {%/perl-mode%}
EOF47b005703faf

)"
    else
        perl -pe 's,CN=(\S*)\s*,$1 ,g';
    fi
