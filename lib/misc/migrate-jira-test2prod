#!/usr/bin/env bash

set -e

cat <<'EOFcc6741846980'
# {%org-mode%}
1. 先 deploy 到 jira-sync 上
2. 再 deploy 到 jira-prod 上

* DONE "把所有 field 字段列出来，在目标上改名（通过 field 名字）、创建，应该有一个脚本，migrate-fields"
  CLOSED: [2019-12-23 月 10:27]
  :LOGBOOK:
  - State "DONE"       from "DONE"       [2019-12-23 月 10:27]
  - State "DONE"       from              [2019-12-23 月 10:27]
  :END:

* DONE yes-or-no-p "把所有 screen 列出来，在目标上改名（通过 screen id 对比）、创建"
  CLOSED: [2019-12-23 月 10:27]
  :LOGBOOK:
  - State "DONE"       from              [2019-12-23 月 10:27]
  :END:

* DONE yes-or-no-p "修改 issuetype 的 screen 关联"
  CLOSED: [2019-12-23 月 15:41]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2019-12-23 月 15:41]
  :END:

* DONE yes-or-no-p "把 workflow export 出来，在目标上 import"
  CLOSED: [2019-12-23 月 14:39]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2019-12-23 月 14:39]
  :END:

* DONE yes-or-no-p "把 issuetype 关联到新的 workflow"
  CLOSED: [2019-12-23 月 15:36]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2019-12-23 月 15:36]
  :END:
* DONE yes-or-no-p "把所有 dynamic export 出来，在目标上 import"
  CLOSED: [2019-12-23 月 15:36]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2019-12-23 月 15:36]
  :END:
# {%/org-mode%}
EOFcc6741846980

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

PATH=${abs0%/*}:$PATH

## start code-generator "^\\s *#\\s *"
# generate-getopt -e -P '?"${comment_doc}"' \
    # p:prod-jira-url='${scm_jira_staging_url}' \
    # t:test-jira-url='${scm_jira_url}' \
    # s:screens-regexp \
    # w:workflow-regexp \
    # @:issuetype-regexp \
    # @:project-key
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o p:s:t:w:h \
                      --long issuetype-regexp:,prod-jira-url:,project-key:,screens-regexp:,test-jira-url:,workflow-regexp:,help \
                      -n $(basename -- $0) -- "$@")
declare -x issuetype_regexp=${issuetype_regexp:-}
declare -x prod_jira_url=${prod_jira_url:-${scm_jira_staging_url}}
declare -x project_key=${project_key:-}
declare -x screens_regexp=${screens_regexp:-}
declare -x test_jira_url=${test_jira_url:-${scm_jira_url}}
declare -x workflow_regexp=${workflow_regexp:-}
eval set -- "$TEMP"
while true; do
    case "$1" in

        --issuetype-regexp)
            issuetype_regexp=$2
            shift 2

            ;;
        -p|--prod-jira-url)
            prod_jira_url=$2
            shift 2

            ;;
        --project-key)
            project_key=$2
            shift 2

            ;;
        -s|--screens-regexp)
            screens_regexp=$2
            shift 2

            ;;
        -t|--test-jira-url)
            test_jira_url=$2
            shift 2

            ;;
        -w|--workflow-regexp)
            workflow_regexp=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--issuetype-regexp=ISSUETYPE_REGEXP'
            echo
            printf %06s '-p, '
            printf %-24s '--prod-jira-url=PROD_JIRA_URL'
            echo
            printf "%06s" " "
            printf %-24s '--project-key=PROJECT_KEY'
            echo
            printf %06s '-s, '
            printf %-24s '--screens-regexp=SCREENS_REGEXP'
            echo
            printf %06s '-t, '
            printf %-24s '--test-jira-url=TEST_JIRA_URL'
            echo
            printf %06s '-w, '
            printf %-24s '--workflow-regexp=WORKFLOW_REGEXP'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "${screens_regexp}"; then
    screens_regexp=$(
        select-args --ask-for-input -1 --select-from-history-too -o -p "what is your screen regexp for migration?"
                  )
    yes-or-no-p -y "确认 $screens_regexp 匹配到的上面的选项没有问题？$(jkd sel-name -a screens -i "${screens_regexp}")"
fi

if test -z "${workflow_regexp}"; then
    workflow_regexp=$(
        select-args --ask-for-input -1 --select-from-history-too -o -p "Please input workflow regexp"
                   )
    yes-or-no-p -y "确认 $workflow_regexp 匹配到的上面的选项没有问题？$(jkd sel-name -a workflow -i "${workflow_regexp}")"
fi

if test -z "${project_key}"; then
    project_key=$(
        jkd sel-key -a project
               )
fi

if test -z "${issuetype_regexp}"; then
    issuetype_regexp=$(
        jkd sel-name -a issuetype
                    )
fi

IFS=$'\n'

cd ~/src/jenkins-tasks/jira

export prod_dir=$PWD/${prod_jira_url}
export test_dir=$PWD/${test_jira_url}

mkdir -p -v {"${prod_dir}","${test_dir}"}/{screens,workflows}

git.commit.pwd -m "Before migrate"

. atexit bash -c "cd $PWD; git.commit.pwd -m 'After migrate'"

if yes-or-no-p "migrate screens and fields?"; then
    if ! yes-or-no-p "已经备份生产服务器上的 screens？"; then
        (
            cd "${prod_dir}"
            screens=$(jkd -j "${prod_jira_url}" rest screens |jq '.[]|.name' -r | grep -P "$screens_regexp" || true)
            if test -z "${screens}"; then
                hint "No screens found on prod system for regexp ${screens_regexp}"
                exit 0
            fi
            for screen in ${screens}; do
                log "Working with $screen from $screens_regexp"
                jkd -j "${prod_jira_url}" dump-screen -s "${screen}" > screens/${screen}.json
            done
        )
    fi

    migrate-fields -p "${prod_jira_url}" -s "${screens_regexp}"
fi

export scm_jira_url=${test_jira_url}

matched_issue_type=(
    $(
        jkd rest issuetype | jq '.[]|.name' -r | grep -P "${issuetype_regexp}"
    )
)

export issuetype_name=$(
    select-args -p "Which issue type to migrate?" "${matched_issue_type[@]}"
              )

if yes-or-no-p "Migrate issuetype?"; then
    migrate-issuetype -u "${prod_jira_url}" -p "${project_key}" -i "${issuetype_name}"
fi

export workflow_name=$(
    jkd sel-name -a workflow "${workflow_regexp}"
       )

if yes-or-no-p "Migrate workflow?"; then
    migrate-workflow
fi

yes-or-no-p "把所有 dynamic export 出来，在目标上 import"
