#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# j:job-name p:param-name v:value
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $job_name = "";
my $param_name = "";
my $value = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--job-name=JOB-NAME';
    if (length('--job-name=JOB-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--param-name=PARAM-NAME';
    if (length('--param-name=PARAM-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--value=VALUE';
    if (length('--value=VALUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'job-name|j=s' => \$job_name,
    'param-name|p=s' => \$param_name,
    'value|v=s' => \$value,
    'help|h!' => \&$handler_help,
);


## end generated code

my $job_xml =
    decode_utf8(scalar capturex("jc", "get-job", "$job_name" ));

use Mojo::DOM;
my $dom = Mojo::DOM->new->parse($job_xml);

$dom->find('hudson\.model\.ChoiceParameterDefinition')->each(
    sub {
        if ($_->at('name')->text eq "${param_name}") {
            my $choice_1 = $_->at('choices a string');

            if ($choice_1->text eq $value) {
                say STDERR "$value already in ${job_name}";
                exit
            };

            $choice_1->prepend("<string>$value</string>\n");
        }
    });

use String::ShellQuote;
my $str = shell_quote($dom->to_string);
run("echo $str | jc create-job $job_name");
