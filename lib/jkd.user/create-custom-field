#!/usr/bin/env perl
use strict;
use v5.10; # for say

use Encode;
use JSON;


my $type_map = {
    'string' => 'com.atlassian.jira.plugin.system.customfieldtypes:textfield',
    'textarea' => 'com.atlassian.jira.plugin.system.customfieldtypes:textarea',
    'dyn-radio' => 'com.intenso.jira.plugin.dynamic-forms:dynamic-radiobutton-customfield',
    'multi-check' => 'com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes',
    'Radio Buttons' => 'com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons',
};

$type_map->{'Text Field (single line)'} = $type_map->{string};
$type_map->{'Text Field (multi-line)'} = $type_map->{textarea};

sub get_types() {
    return join(" ", keys %$type_map);
}


## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P n:name d:description t:type '?"one of " . get_types()'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $description = "";
my $name = "";
my $type = "";

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--description=DESCRIPTION';
    if (length('--description=DESCRIPTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--name=NAME';
    if (length('--name=NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--type=TYPE';
    if (length('--type=TYPE') > 24 and length("one of " . get_types()) > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "one of " . get_types();
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'description|d=s' => \$description,
    'name|n=s' => \$name,
    'type|t=s' => \$type,
    'help|h!' => \&$handler_help,
);


## end generated code

if (not $type_map->{$type}) {
    die sprintf "Your type (%s) is not supported: (%s)", $type_map->{$type}, join(" ", keys %$type_map);
}

my $fields_json = decode_json(qx(jkd rest field));

sub nospace_strcmp($$) {
    my @args = @_;
    map {
        s, | ,,g;
    } @args;
    return $args[0] eq $args[1];
}

for (@$fields_json) {
    if (nospace_strcmp encode_utf8($_->{name}), $name) {
        say STDERR "$name already exists: ", encode_utf8($_->{name});
        exit;
    }
}

my $json_obj = {
    name => decode_utf8($name),
    description => decode_utf8($description),
    "type" => decode_utf8($type_map->{$type}),
};

use autodie qw(:all);

system("jkd", "post", "-a", "rest/api/2/field", "--json", encode_json($json_obj));
