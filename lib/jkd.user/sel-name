#!/bin/bash
set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # a:api j:json \
    # @:jkd '?"运行此 jkd 命令，得到一个 json 数据"' \
    # i:init-input
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o a:i:j:h \
                      --long api:,init-input:,jkd:,json:,help \
                      -n $(basename -- $0) -- "$@")
declare api=
declare init_input=
declare jkd=
declare json=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--api)
            api=$2
            shift 2

            ;;
        -i|--init-input)
            init_input=$2
            shift 2

            ;;
        --jkd)
            jkd=$2
            shift 2

            ;;
        -j|--json)
            json=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %06s '-a, '
            printf %-24s '--api=API'
            echo
            printf %06s '-i, '
            printf %-24s '--init-input=INIT_INPUT'
            echo
            printf "%06s" " "
            printf %-24s '--jkd=JKD'
            echo "运行此 jkd 命令，得到一个 json 数据"
            printf %06s '-j, '
            printf %-24s '--json=JSON'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

n=0
if test "${api}"; then
    ((n++)) || true
fi

if test "${json}"; then
    ((n++)) || true
fi

if test "${jkd}"; then
    ((n++)) || true
fi

if test $n != 1; then
    die "Can specify 1 and only 1 of api($api), json($json), jdk($jkd)"
fi

if test -z "${json}"; then
    if test "${api}"; then
        json=$(
            jkd rest "$api"
            )
    else
        json=$(
            jkd $jkd
            )
    fi
fi

sel-name() {
    IFS=$'\n'
    names=$(
        echo "${json}" | jq '.[]|.name' -r
         )
    select-args -i "${init_input}" $names
}

name2id() {
    name=$1
    id=$(
        echo "${json}" | jq '.[]|if .name == "'"$name"'" then .id else null end|values' -r
      )
    if test -z "${id}"; then
        die "Can't find the id for $name"
    fi
    echo -n $id
}

id2name() {
    id=$1
    name=$(
        echo "${json}" | jq '.[]|if (.id|tostring) == "'"$id"'" then .name else null end|values' -r
        )
    echo -n "$name"
}

if test "$#" = 0 -a "${init_input}"; then
    set -- "${init_input}"
fi

if test "${b0}" = sel-name; then
    sel-name
elif test "${b0}" = name2id; then
    name2id "$@"
elif test "${b0}" = sel-id; then
    name=$(
        sel-name
        )
    id=$(
        name2id "$name"
      )
    echo $id
elif test "${b0}" = id2name; then
    id2name "$@"
else
    die "can't work with $b0"
fi
