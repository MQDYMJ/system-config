#!/usr/bin/env bash
set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # a:api j:json \
    # @:jkd '?"运行此 jkd 命令，得到一个 json 数据"' \
    # i:init-input
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o a:i:j:h \
                      --long api:,init-input:,jkd:,json:,help \
                      -n $(basename -- $0) -- "$@")
declare api=
declare init_input=
declare jkd=
declare json=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--api)
            api=$2
            shift 2

            ;;
        -i|--init-input)
            init_input=$2
            shift 2

            ;;
        --jkd)
            jkd=$2
            shift 2

            ;;
        -j|--json)
            json=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-a, '
            printf %-24s '--api=API'
            echo
            printf %6s '-i, '
            printf %-24s '--init-input=INIT_INPUT'
            echo
            printf "%6s" " "
            printf %-24s '--jkd=JKD'
            echo "运行此 jkd 命令，得到一个 json 数据"
            printf %6s '-j, '
            printf %-24s '--json=JSON'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

n=0
if test "${api}"; then
    ((n++)) || true
fi

if test "${json}"; then
    ((n++)) || true
fi

if test "${jkd}"; then
    ((n++)) || true
fi

if test $n != 1; then
    die "Can specify 1 and only 1 of api($api), json($json), jdk($jkd)"
fi

if test -z "${json}"; then
    if test "${api}"; then
        json=$(
            cached-run -e scm_jira_url jkd rest "$api"
            )
    else
        json=$(
            cached-run -e scm_jira_url jkd $jkd
            )
    fi
fi

sel-x() {
    IFS=$'\n'
    lines=(
        $(
            echo "${json}" | jq '.[]|"\(.name) :: \(.key) :: \(.id)"' -r
        )
    )

    declare -A type_to_group_n=(
        [name]=1
        [key]=2
        [id]=3
    )
    select-args -p "Please input your selection for api 「${api}」" -i "${init_input}" "${lines[@]}" |
                perl -pe 's,(.*) :: (.*) :: (.*),$'${type_to_group_n[$sel_type]}','
}

exists-x() {
    IFS=$'\n'
    lines=(
        $(
            echo "${json}" | jq ".[]|.${exists_type}" -r
        )
    )
    for l in "${lines[@]}"; do
        if test "$l" = "$1"; then
            return 0
        fi
    done
    return 1
}

x2y() {
    declare comment_doc=$(
        cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
            )

    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -P '?"${comment_doc}"' \
        # f:from t:to
    ## end code-generator
    ## start generated code
    TEMP=$(POSIXLY_CORRECT=true getopt -o f:t:h \
                          --long from:,to:,help \
                          -n $(basename -- $0) -- "$@")
    declare from=
    declare to=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -f|--from)
                from=$2
                shift 2

                ;;
            -t|--to)
                to=$2
                shift 2

                ;;
            -h|--help)
                set +x
                echo -e "${comment_doc}"
                echo
                echo Options and arguments:
                printf %6s '-f, '
                printf %-24s '--from=FROM'
                echo
                printf %6s '-t, '
                printf %-24s '--to=TO'
                echo
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


    ## end generated code

    arg=$1
    value=$(
            echo "${json}" | jq '.[]|if .'${from}' == "'"$arg"'" then .'${to}' else null end|values' -r
          )
        if test -z "${value}"; then
            die "Can't find the ${to} for ${from}"
        fi
        echo -n $value
}

if test "$#" = 0 -a "${init_input}"; then
    set -- "${init_input}"
elif test -z "${init_input}"; then
    init_input="$*"
fi

if [[ $b0 =~ ^sel-(name|id|key)$ ]]; then
    sel_type=${b0#*-} sel-x
elif [[ $b0 =~ ^exists-(name|id|key)$ ]]; then
    exists_type=${b0#*-} exists-x "$1"
elif [[ $b0 =~ ^(name|id|key)2(name|id|key)$ ]]; then
    x2y -f ${b0%2*} -t ${b0#*2} "$@"
else
    die "can't work with $b0"
fi
