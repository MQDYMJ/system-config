#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;


use Mojo::DOM;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# f:html-file i:screenscheme-id
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $html_file = "";
my $screenscheme_id = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--html-file=HTML-FILE';
    if (length('--html-file=HTML-FILE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--screenscheme-id=SCREENSCHEME-ID';
    if (length('--screenscheme-id=SCREENSCHEME-ID') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'html-file|f=s' => \$html_file,
    'screenscheme-id|i=s' => \$screenscheme_id,
    'help|h!' => \&$handler_help,
);


## end generated code
use File::Slurp;

my $html_text;

if ($html_file) {
    $html_text = decode_utf8 read_file($html_file);
} else {
    if (not $screenscheme_id) {
        die "Must specify the screenscheme id";
    }
    $html_text = decode_utf8 capturex("jkd", "webget", "$ENV{scm_jira_url}secure/admin/ConfigureIssueTypeScreenScheme.jspa?id=${screenscheme_id}");
}


my $dom = Mojo::DOM->new->parse($html_text);

if ($ENV{jkd_verbose}) {
    say STDERR $html_text;
}
my %issuetype_screenscheme;

$dom->find('strong[data-scheme-field="issue-type"]')->each
    (
        sub {
            my $issuetype_name = $_->text;

            my $screen_scheme_elem = $_->parent->parent->at('td a[data-scheme-field="screen-scheme"]');
            (my $screen_scheme_id = $screen_scheme_elem->attr('href')) =~ s,.*id=(\d+),$1,;
            (my $screen_scheme_name) = $screen_scheme_elem->text;

            $issuetype_screenscheme{$issuetype_name} = {
                name => $screen_scheme_name,
                id => $screen_scheme_id,
            };
        }
    );

print decode_utf8($json->encode(\%issuetype_screenscheme));
