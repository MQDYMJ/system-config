#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# p:project '?"想看哪个项目的 meta 数据，也可不指定，通过 issue 计算"' \
# i:issuetype-or-issue '?"指定某 project 的 issuetype，或某 issue -- 自动计算 project 和 issuetype"' \


## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $issuetype_or_issue = "";
my $project = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetype-or-issue=ISSUETYPE-OR-ISSUE';
    if (length('--issuetype-or-issue=ISSUETYPE-OR-ISSUE') > 24 and length("指定某 project 的 issuetype，或某 issue -- 自动计算 project 和 issuetype") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "指定某 project 的 issuetype，或某 issue -- 自动计算 project 和 issuetype";
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--project=PROJECT';
    if (length('--project=PROJECT') > 24 and length("想看哪个项目的 meta 数据，也可不指定，通过 issue 计算") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "想看哪个项目的 meta 数据，也可不指定，通过 issue 计算";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'issuetype-or-issue|i=s' => \$issuetype_or_issue,
    'project|p=s' => \$project,
    'help|h!' => \&$handler_help,
);


## end generated code

my $issuetype = $issuetype_or_issue;
if (not $project) {
    die "Must speicfy issue" unless $issuetype_or_issue;

    my $issue_json = $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "print-issue", "-i", "$issuetype_or_issue", ));
    $project = $issue_json->{Project}{key};
    $issuetype = $issue_json->{"Issue Type"}{name};
}

my $meta_json =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "rest", "issue/createmeta?projectKeys=${project}&expand=projects.issuetypes.fields"));

my $issuetype_json;

map {
    if ($_->{name} eq $issuetype) {
        $issuetype_json = $_;
    }
} @{$meta_json->{projects}[0]{issuetypes}};

my %fields;

map {
    $fields{$_} = $issuetype_json->{fields}{$_} if
        $issuetype_json->{fields}{$_}{required}
    } keys %{$issuetype_json->{fields}};

print decode_utf8($json->encode(\%fields));
