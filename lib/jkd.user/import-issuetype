#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);

use Encode;
use JSON;

my $json = JSON->new->utf8(0);

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# f:from-jira-url i:issuetype-name j:from-jira-json
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $from_jira_json = "";
my $from_jira_url = "";
my $issuetype_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--from-jira-json=FROM-JIRA-JSON';
    if (length('--from-jira-json=FROM-JIRA-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--from-jira-url=FROM-JIRA-URL';
    if (length('--from-jira-url=FROM-JIRA-URL') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'from-jira-json|j=s' => \$from_jira_json,
    'from-jira-url|f=s' => \$from_jira_url,
    'issuetype-name|i=s' => \$issuetype_name,
    'help|h!' => \&$handler_help,
);


## end generated code

if ($from_jira_url) {
    die "Can't specify both from_jira_url and from_jira_json" if $from_jira_json;
    $from_jira_json =
        scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$from_jira_url", "dump-issuetype", "-i", "$issuetype_name");
}

$from_jira_json = $json->decode($from_jira_json);

my $to_jira_json =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-i", "$issuetype_name"));

# my $issuetype_complete_data = {
#     issuetype => $issuetype_name,
#     issuetypescheme => $issuetypescheme_name,
#     issuetypeschemes => $issuetypescreenschemes_json,
#     project => $project_name,
#     fieldconfigscheme_name => $fieldconfigscheme_name,
#     fieldconfig => $fieldconfig_name,
#     fieldconfig_json => $fieldconfig_json,
#     screenscheme => $screenscheme_name,
#     screenscheme_json => $screenscheme_json,
#     workflowscheme => $workflowscheme_name,
#     workflow => $workflow_xml,
#     screens => \%screens,
#     fields => \%wanted_fields,
# }

my $issuetypes_json =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetype"));

my $from_issuetype = $from_jira_json->{issuetype};
if (not grep {$from_issuetype eq $_->{name}} @$issuetypes_json) {
    say STDERR "need create issuetype: $from_issuetype";
}

my $from_issuetypescheme = $from_jira_json->{issuetypescheme};
if (not $to_jira_json->{issuetypescheme}) {
    # maybe need create the scheme
    if (not $to_jira_json->{issuetypeschemes}{$from_issuetypescheme}) {
        say STDERR "Need create issuetypescheme: $from_issuetypescheme";
    }
} elsif ($to_jira_json->{issuetypescheme} ne $from_issuetypescheme) {
    die sprintf( "Can't work with different issuetype scheme: %s v.s. %s", $to_jira_json->{issuetypescheme}, $from_issuetypescheme);
}

my $from_project = $from_jira_json->{project};
if (not $to_jira_json->{project}) {
    say STDERR "Need to associate project";
} elsif ($to_jira_json->{project} ne $from_project) {
    die sprintf("Can't work with different project: %s v.s. %s", $to_jira_json->{project}, $from_project);
}

my $from_fieldconfigscheme = $from_jira_json->{fieldconfigscheme};
if (not $to_jira_json->{fieldconfigscheme}) {
    if (not $to_jira_json->{fieldconfigschemes}{$from_fieldconfigscheme}) {
        say STDERR "Need to create fieldconfigscheme: $from_fieldconfigscheme";
    }
} elsif ($to_jira_json->{fieldconfigscheme} ne $from_fieldconfigscheme) {
    die sprintf("can't work with different fieldconfigscheme: %s v.s. %s", $to_jira_json->{fieldconfigscheme}, $from_fieldconfigscheme);
}

my $from_frieldconfig = $from_jira_json->{fieldconfig};
my $fieldconfigs =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-fieldconfigs"));
if (not grep {$from_frieldconfig eq $_->{name}} @$fieldconfigs) {
    say STDERR "Field config $from_frieldconfig not exist, create it!";
}

my $screens =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest screens"));

my %from_screens = keys %{$from_jira_json->{screens}};
