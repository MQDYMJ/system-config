#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use File::Slurp;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
1. 将当前 workflow 备份，并将备份版本设置为 active workflow
2. 删除原 workflow，因此当前未被使用，因此可以删除
3. 将新的 xml 导入至原 workflow
4. 激活原 workflow，从而完成在线更新

* 参数说明：

- issuetype :: 在给哪个 issuetype 升级 workflow（必须指定）
- workflow_name :: 在用的是哪个 workflow（如不指定，则使用 issuetype 自动计算）
- workflow_scheme :: 在哪个 workflow_scheme 中配置（如不指定，则使用 issuetype 自动计算）
- workflow_xml_file :: workflow xml 保存的位置（也可以使用下面的 xml-str 参数，直接传入 xml 文本数据）
- xml-str :: workflow xml 数据
- xml-using-names :: xml 中在使用的是各个字段、状态的名字，而不是数字 id。


# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# w:workflow-name f:workflow-xml-file x:xml-str i:issuetype-name s:workflow-scheme @xml-using-names=1
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $issuetype_name = "";
my $workflow_name = "";
my $workflow_scheme = "";
my $workflow_xml_file = "";
my $xml_str = "";
my $xml_using_names = 1;

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-w, ';
    printf "%-24s", '--workflow-name=WORKFLOW-NAME';
    if (length('--workflow-name=WORKFLOW-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-s, ';
    printf "%-24s", '--workflow-scheme=WORKFLOW-SCHEME';
    if (length('--workflow-scheme=WORKFLOW-SCHEME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--workflow-xml-file=WORKFLOW-XML-FILE';
    if (length('--workflow-xml-file=WORKFLOW-XML-FILE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-x, ';
    printf "%-24s", '--xml-str=XML-STR';
    if (length('--xml-str=XML-STR') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]xml-using-names';
    if (length('--[no]xml-using-names') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'issuetype-name|i=s' => \$issuetype_name,
    'workflow-name|w=s' => \$workflow_name,
    'workflow-scheme|s=s' => \$workflow_scheme,
    'workflow-xml-file|f=s' => \$workflow_xml_file,
    'xml-str|x=s' => \$xml_str,
    'xml-using-names!' => \$xml_using_names,
    'help|h!' => \&$handler_help,
);


## end generated code

if (not $workflow_name) {
    my $workflow_scheme_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-workflowschemes"));

    map {
        my $wf = $_->{issuetypes_workflow}{$issuetype_name};
        if ($wf) {
            $workflow_name = $wf;
            $workflow_scheme = $_->{name};
        }
    } @$workflow_scheme_json;
}

my $workflow_exists = (runx(EXIT_ANY, "jkd", "exists-name", "-a", "workflow", "$workflow_name") == 0);

my $backup_xml = "$ENV{HOME}/src/jenkins-tasks/jira/$ENV{scm_jira_url}/workflows/${workflow_name}.bak.xml";
my $temp_workflow = "$workflow_name.$$";

my $done_switch;
use feature 'signatures';
sub switch_workflow($old_workflow, $new_workflow) {
    # step 1: workflow 当前在用的话，要将它卸载
    my $wf_schemes =
        $json->decode(scalar capturex("jkd", "export-workflowschemes"));

    for my $scheme (@$wf_schemes) {
        my %it_wf_map = %{$scheme->{issuetypes_workflow}};
        my %wf_it_map = map {$it_wf_map{$_}, $_} %it_wf_map;

        if ($wf_it_map{$old_workflow}) {
            say STDERR "switch workflow ${old_workflow} for " . $scheme->{name};
            $done_switch = 1;
            runx("jkd", "wfs-switch-wf", "--scheme-id", $scheme->{id},
                 ( $scheme->{active} ? "--scheme-active" : "--noscheme-active" ),
                 "--wf-name", "$old_workflow", "--new-wf-name", "$new_workflow");
            next;
        }
    }
}

if ($workflow_exists) {
    runx("jkd", "export-workflow-as-xml", "-w", "${workflow_name}", "-f", $backup_xml);
    runx("jkd", "import-workflow-from-xml", "-w", "$temp_workflow", "-f", "$backup_xml");

    switch_workflow($workflow_name, $temp_workflow);
    runx("jkd", "wf-delete", "-w", "$workflow_name");
}

if (not $xml_str) {
    $xml_str = read_file($workflow_xml_file);
}

if ($xml_using_names) {
    $xml_str = decode_utf8 capturex (
        "jkd", "workflow", "-a", "name2id", "-x", "$xml_str"
    );
}

runx("jkd", "import-workflow-from-xml", "-w", "$workflow_name", "-x", "$xml_str");

if ($workflow_exists) {
    if ($done_switch) {
        switch_workflow($temp_workflow, $workflow_name);
    }

    runx("jkd", "wf-delete", "-w", "$temp_workflow");
}

sub attach_workflow() {
    if ($workflow_scheme and $issuetype_name) {
        # step 1: workflow 当前在用的话，要将它卸载
        my $wf_schemes =
            $json->decode(scalar capturex("jkd", "export-workflowschemes"));

        for my $scheme (@$wf_schemes) {
            if ($scheme->{name} eq $workflow_scheme) {
                runx("jkd", "wfs-switch-wf", "--scheme-id", $scheme->{id},
                     ( $scheme->{active} ? "--scheme-active" : "--noscheme-active" ),
                     "--issuetype-name", $issuetype_name, "--new-wf-name", "$workflow_name");
                next;
            }
        }
    }
}

attach_workflow();
