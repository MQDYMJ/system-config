#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
* action = create
- create an issuetype
* action = update
- update an issuetype
* action = print
- print an issuetype (i.e., the json)

* action = create-scheme
- create an issuetype scheme
* action = update-scheme
* action = list-schemes
* action = get-scheme
- print the scheme that the issuetype belongs to
* action = add-to-scheme
- add the issue to the scheme
* action = edit-fieldconfig
* action = get-workflow
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# a:action \
 # n:issuetype-name \
# d:issuetype-description='""' \
# t:issuetype-type='"standard"' '?"one of standard, subtask"' \
 # s:issuetypescheme-name \
# p:associated-projects \
# @:field-name  \
# @:field-json
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $associated_projects = "";
my $field_json = "";
my $field_name = "";
my $issuetype_description = "";
my $issuetype_name = "";
my $issuetype_type = "standard";
my $issuetypescheme_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-a, ';
    printf "%-24s", '--action=ACTION';
    if (length('--action=ACTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--associated-projects=ASSOCIATED-PROJECTS';
    if (length('--associated-projects=ASSOCIATED-PROJECTS') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--field-json=FIELD-JSON';
    if (length('--field-json=FIELD-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--field-name=FIELD-NAME';
    if (length('--field-name=FIELD-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--issuetype-description=ISSUETYPE-DESCRIPTION';
    if (length('--issuetype-description=ISSUETYPE-DESCRIPTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--issuetype-type=ISSUETYPE-TYPE';
    if (length('--issuetype-type=ISSUETYPE-TYPE') > 24 and length("one of standard, subtask") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "one of standard, subtask";
    print "\n";
    printf "%6s", '-s, ';
    printf "%-24s", '--issuetypescheme-name=ISSUETYPESCHEME-NAME';
    if (length('--issuetypescheme-name=ISSUETYPESCHEME-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'action|a=s' => \$action,
    'associated-projects|p=s' => \$associated_projects,
    'field-json=s' => \$field_json,
    'field-name=s' => \$field_name,
    'issuetype-description|d=s' => \$issuetype_description,
    'issuetype-name|n=s' => \$issuetype_name,
    'issuetype-type|t=s' => \$issuetype_type,
    'issuetypescheme-name|s=s' => \$issuetypescheme_name,
    'help|h!' => \&$handler_help,
);


## end generated code
if (not $action) {
    $action = shift @ARGV;
}

my $issuetypes_json =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetype"));
my $issuetype_id;
grep {
    $issuetype_id = $_->{id} if $issuetype_name eq $_->{name}
} @$issuetypes_json;

if ($action eq "print") {
    map {
        if ($_->{name} eq $issuetype_name) {
            print decode_utf8($json->encode($_));
            exit
        }
    } @$issuetypes_json;
} elsif ($action eq "create") {

    my %issuetype = (
        name => $issuetype_name,
        description => $issuetype_description,
        type => $issuetype_type,
    );

    runx("jkd", "rest", "issuetype", "--", "-X", "POST", "-H", 'Content-Type: application/json', "--data", decode_utf8($json->encode(\%issuetype)));
} elsif ($action eq "get-scheme") {

} elsif ($action eq "add-to-scheme") {
    my $issuetypescheme_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-issuetypescheme", "-n", "$issuetypescheme_name"));

    my @selectedOptions = map {
        $_->{id}
    } @{$issuetypescheme_json->{issuetypes}};

    unless (grep {$issuetype_id eq $_} @selectedOptions) {
        say STDERR "Add issuetype_id: $issuetype_id";
        push @selectedOptions, $issuetype_id;
    }

    my $selectedOptions = join('&', map {"selectedOptions=$_"} @selectedOptions);
    my $issuetypescheme_id = $issuetypescheme_json->{id};
    my $issuetypescheme_description = $issuetypescheme_json->{description};
    my $issuetypescheme_default = $issuetypescheme_json->{default};

    my @params_values = (
        "schemeId=${issuetypescheme_id}",
        "fieldId=issuetype",
            "projectId=",
            "name=${issuetypescheme_name}",
            "description=${issuetype_description}",
            "defaultOption=${issuetypescheme_default}",
            "save=Save",
    );


    runx("debug-run",
        "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/ConfigureOptionSchemes.jspa?$selectedOptions", "-X", "POST",
        map { ('--data-urlencode', $_) } @params_values);
} elsif ($action eq "get-workflow") {
    my $workflow_schemes_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-workflowschemes"));

    my @workflows;

    map {
        my $workflow = $_->{issuetypes_workflow}{$issuetype_name};
        push @workflows, "$workflow" if $workflow;
    } @$workflow_schemes_json;

    die ("Not exactly 1 workflow for issuetype: $issuetype_name " . join(" ", @workflows)) unless @workflows == 1;

    print $workflows[0];
} elsif ($action eq "get-project") {
    my $isss_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-issuetypeschemes"));
    my @projects;

    map {
        my $iss = $isss_json->{$_};
        if (grep {$issuetype_name eq $_} @{$iss->{issuetypes}}) {
            push @projects, map {$_->{key}} @{$iss->{projects}};
        }
    } keys %$isss_json;

    die ("Not exactly 1 project in $ENV{scm_jira_url} for $issuetype_name: " . join(" ", @projects)) unless @projects == 1;
    print $projects[0];
} elsif ($action eq "get-fieldconfig" || $action eq "get-fieldconfig-id") {
    my $project =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-project", "-n", "$issuetype_name"));

    my $fcss_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-fieldconfigschemes"));
    my $fcs_id;
    map {
        my $fcs = $fcss_json->{$_};
        if (grep {$_->{key} eq $project} @{$fcs->{projects}}) {
            $fcs_id = $fcs->{id};
        }
    } keys %$fcss_json;

    die "Can't find fieldconfig scheme for $project" unless $fcs_id;

    my $fcs_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfigscheme", "-i", "${fcs_id}"));

    my $fc = $fcs_json->{$issuetype_name}{name};
    my $fc_id = $fcs_json->{$issuetype_name}{id};
    die "can't find fieldconfig for $issuetype_name" unless $fc;
    if ($action eq "get-fieldconfig") {
        print $fc;
    } else {
        print $fc_id;
    }
} elsif ($action eq "update-field") {
    my $fc =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig", "-n", "$issuetype_name"));
    my $fc_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfig", "-n", "$fc"));

    $field_json = $json->decode(encode_utf8 $field_json);
    my $field_dump =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-field", "-f", $field_name));

    (my $field_json_description = $field_json->{description}) =~ s,\r\n,,g;
    (my $field_dump_description = $field_dump->{description}) =~ s,\r\n,,g;
    (my $fc_field_description = $fc_json->{$field_name}{description}) =~ s,\r\n,,g;

    if ($field_dump_description ne $field_json_description) {
        say STDERR "Need update field itself: " .  decode_utf8($json->encode($field_dump_description));
        runx("jkd", "field", "-a", "update", "-j", decode_utf8($json->encode($field_json)));
    }

    my $fc_id =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig-id", "-n", "$issuetype_name"));

    if ($fc_field_description ne $field_json_description and $fc_field_description) {
        say STDERR "Need update field in fieldconfig: " . decode_utf8($json->encode($fc_field_description));
        my @params_values = (
            "description=",
            "position=" . $fc_json->{$field_name}{position},
            "id=${fc_id}",
            "Update=Update",
        );

        runx(
            "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/EditFieldLayoutItem.jspa", "-X", "POST",
            map { ('--data-urlencode', $_) } @params_values
        );
    }
} elsif ($action eq "edit-workflow") {
    my $workflow =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-workflow", "-n", "$issuetype_name"));
    runx("jkd", "go", "workflows", "-e", "$workflow");
} else {
    die "Can't work with action: $action, don't know how";
}
