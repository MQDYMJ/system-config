#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);

use Encode;
use JSON;

my $json = JSON->new->utf8(0);

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# j:json-data f:json-file
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $json_data = "";
my $json_file = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--json-data=JSON-DATA';
    if (length('--json-data=JSON-DATA') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--json-file=JSON-FILE';
    if (length('--json-file=JSON-FILE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'json-data|j=s' => \$json_data,
    'json-file|f=s' => \$json_file,
    'help|h!' => \&$handler_help,
);


## end generated code

use File::Slurp;

if ($json_file) {
    if ($json_data) {
        die "Can't specify both json file and data";
    } else {
        $json_data = read_file($json_file);
    }
}

my $field_json = $json->decode($json_data);

my $fields_json = $json->decode(scalar capturex("jkd", "rest", "field"));
my $field_name = $field_json->{name};

if (grep {$_->{name} eq $field_name} @$fields_json) {
    # field already exist
    say STDERR "field $field_name already exist";
} else {
    # field not exist
    say STDERR "field $field_name not exist yet";
    my %new_field_data = (
        name => $field_name,
        description => $field_json->{description},
        type => $field_json->{schema}{custom},
        searcherKey => $field_json->{search_template},
    );

    my $new_field_json = JSON->new->utf8(0)->pretty(1)->encode(\%new_field_data);
    runx("jkd", "post", "-a", "field", "--json", decode_utf8($new_field_json))
}
