#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# j:json-data @:j2 '?"from jira url"' \
# f:field-name '?"field name, used together with J2, to calculate JSON-DATA"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $field_name = "";
my $j2 = "";
my $json_data = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--field-name=FIELD-NAME';
    if (length('--field-name=FIELD-NAME') > 24 and length("field name, used together with J2, to calculate JSON-DATA") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "field name, used together with J2, to calculate JSON-DATA";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--j2=J2';
    if (length('--j2=J2') > 24 and length("from jira url") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "from jira url";
    print "\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--json-data=JSON-DATA';
    if (length('--json-data=JSON-DATA') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'field-name|f=s' => \$field_name,
    'j2=s' => \$j2,
    'json-data|j=s' => \$json_data,
    'help|h!' => \&$handler_help,
);


## end generated code

use File::Slurp;

if (not $json_data) {
    if (not $j2 or not $field_name) {
        die "Must specify either json-data or j2 and field-name";
    } else {
        $json_data = capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$j2", "dump-field", "-f", $field_name);
    }
} else {
    $json_data = encode_utf8 $json_data;
}

my $field_json = $json->decode($json_data);

my $fields_json = $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "rest", "field"));
$field_name = $field_json->{name};

if (grep {$_->{name} eq $field_name} @$fields_json) {
    # field already exist
    say STDERR "field $field_name already exist";
} else {
    # field not exist
    say STDERR "field $field_name not exist yet";
    my %new_field_data = (
        name => $field_name,
        description => $field_json->{description},
        type => $field_json->{schema}{custom},
        searcherKey => $field_json->{search_template},
    );

    my $new_field_json = decode_utf8($json->encode(\%new_field_data));
    runx("jkd", "post", "-a", "field", "--json", $new_field_json);
    capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-field", "-f", $field_name);
}
