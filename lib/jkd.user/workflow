#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(system systemx run runx capture capturex);

use JSON;

my $json = JSON->new;
use Encode;

use XML::Quote qw(:all);

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
* action = id2name

将 workflow.xml 文件中的 ids（custom field、screen 等）改成对应的 names。

* action = name2id
将 workflow.xml 文件中的 names（custom field、screen 等）改成对应的 ids。

* action = export
export the specified workflow as xml

* action = import
import the specified workflow from xml file
* action = create
create an empty workflow with the specified name and description
* hint

To assign workflow to issuetype: admin -> project -> workflows -> ...
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# a:action f:workflow-xml kkeep-running n:workflow-name d:workflow-description
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $keep_running = 0;
my $workflow_description = "";
my $workflow_name = "";
my $workflow_xml = "";

my $handler_help = sub {
    print "$comment_doc";
print "\n\n选项和参数：\n";
printf "%6s", '-a, ';
printf "%-24s", '--action=ACTION';
if (length('--action=ACTION') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-k, ';
printf "%-24s", '--[no]keep-running';
if (length('--[no]keep-running') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-d, ';
printf "%-24s", '--workflow-description=WORKFLOW-DESCRIPTION';
if (length('--workflow-description=WORKFLOW-DESCRIPTION') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-n, ';
printf "%-24s", '--workflow-name=WORKFLOW-NAME';
if (length('--workflow-name=WORKFLOW-NAME') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-f, ';
printf "%-24s", '--workflow-xml=WORKFLOW-XML';
if (length('--workflow-xml=WORKFLOW-XML') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
       $exit_value = shift @_;
       print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
'action|a=s' => \$action,
'keep-running|k!' => \$keep_running,
'workflow-description|d=s' => \$workflow_description,
'workflow-name|n=s' => \$workflow_name,
'workflow-xml|f=s' => \$workflow_xml,
'help|h!' => \&$handler_help,
    );


## end generated code
if (not $action) {
    $action = shift @ARGV;
}

if ($action eq "list") {
    run("jkd rest workflow|jq '.[]|.name' -r ");
    exit(0);
} elsif ($action eq "export") {
    runx("jkd", "export-workflow-as-xml", @ARGV);
    exit;
} elsif ($action eq "import") {
    runx("jkd", "import-workflow-from-xml", @ARGV);
    exit;
} elsif ($action eq "create") {
    my @params_values = (
        "inline=true",
        "decorator=dialog",
        "newWorkflowName=" . decode_utf8($workflow_name),
        "description=" . decode_utf8($workflow_description),
    );
    runx(
        "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/workflows/AddWorkflow.jspa", "-X", "POST",
        map { ('--data-urlencode', $_) } @params_values);
    exit;
}

use Mojo::DOM;
use File::Slurp;

my $xml_str = read_file($workflow_xml);
my $dom = Mojo::DOM->new->parse($xml_str);

my $fields_json = $json->decode(scalar capturex("jkd", "rest", "field"));
my $screens_json = $json->decode(scalar capturex("jkd", "rest", "screens"));
my $status_json = $json->decode(scalar capturex("jkd", "status", "list"));

my %datatype_json_map = (
    field => $fields_json,
    screens => $screens_json,
    status => $status_json,
);

sub id2name($$) {
    my ($id, $datatype) = @_;

    my $names_ids_json = $datatype_json_map{$datatype};

    my @matched_names;
    for (@{$names_ids_json}) {
        if ($_->{id} eq $id or $_->{id} eq "customfield_$id") {
            push @matched_names, $_->{name};
        }
    }
    if (@matched_names != 1) {
        my $extra_msg;
        if (@matched_names == 0) {
            $extra_msg = "Please create it!";
            if ($datatype eq 'status') {
                $extra_msg .= "\n\n (you need assign it to an issuetype in issuetype workflow scheme, for it to work) \n\n";
            }
        } else {
            $extra_msg = "Please remove extra ones!"
        }
        die "Can't find exactly 1 ${datatype} name for $id: '@matched_names' ($extra_msg)" unless $keep_running;
    }

    return $matched_names[0];
}

sub name2id($$) {
    my ($name, $datatype) = @_;
    my $names_ids_json = $datatype_json_map{$datatype};

    if (not $name) {
        die "You should not pass empty name!";
    }
    my @matched_ids = map {
        $_->{id}
    } grep {
        $name eq $_->{name}
    } @$names_ids_json;

    if (@matched_ids != 1) {
        my $extra_msg;
        if (@matched_ids == 0) {
            $extra_msg = "Please create it! check workflow file: ${workflow_xml} \@ $ENV{PWD}";
            if ($datatype eq "status") {
                system("jkd", "go", "workflow");
            }
        } else {
            $extra_msg = "Please remove extra ones!"
        }
        die "Can't find exactly 1 id for ${datatype} name $name: '@matched_ids' ($extra_msg)" unless $keep_running;
    }

    return $matched_ids[0];
}

sub fields_name2id_number_only($) {
    (my $id = name2id($_[0], 'field')) =~ s,customfield_,,;
    return $id
}

my %meta_field_name_json_map = (
    'jira.fieldscreen.id' => 'screens',
    'jira.status.id' => 'status',
);


# 4 matches for "14509"
#     145:            <arg name="fieldsList">customfield_14509</arg>
#     529:                  <arg name="selectedTargetGeneralizedField">14509</arg>
#     671:              <arg name="selectedCustomField">14509</arg>
#     676:              <arg name="selectedFields">field::14509;condition::changedInTransition...</arg>

if ($action eq "id2name") {
    $dom->find('arg')->each
        (
            sub {
                if ($_->{name} =~ m,^(hidFieldsList|selectedTargetGeneralizedField|fieldsList)$,) {
                    my @field_ids = grep {m/./} split('@@', $_->text);
                    my @field_names;
                    push @field_names, map {
                        id2name($_, 'field');
                    } @field_ids;

                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote join('@@', @field_names)));
                } elsif ($_->{name} eq "selectedFields") {
                    my $text = $_->text;

                    die "Can't handle this text: $text" unless $text =~ m,^field::(\d+);,;
                    my $name = id2name($1, 'field');
                    die "bad name $name: it matches ;!" if $name =~ m/;/;

                    $text =~ s,^field::(\d+);,field::${name};,;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                }
            }
        );

    $dom->find('meta')->each
        (
            sub {
                for my $meta_name (keys %meta_field_name_json_map) {
                    if ($_->{name} eq $meta_name and $_->text) {
                        my $name = id2name($_->text, $meta_field_name_json_map{$meta_name});
                        $_->replace(sprintf('<meta name="%s">%s</arg>', $_->{name}, xml_quote $name));
                    }
                }
            }
        );
} elsif ($action eq "name2id") {
    $dom->find('arg')->each
        (
            sub {
                if ($_->{name} =~ m,^(hidFieldsList|selectedTargetGeneralizedField|fieldsList)$,) {
                    my @field_names = grep {m/./} split('@@', $_->text);
                    my @field_ids;
                    my $arg_name = $_->{name};

                    @field_ids = map {
                        if ($arg_name !~ m,fieldslist,i) {
                            $_ = fields_name2id_number_only $_;
                        } else {
                            $_ = name2id($_, 'field') if $_;
                        }
                    } @field_names;

                    if (@field_ids != @field_names) {
                        die "#field ids != #field names: @field_ids, @field_names" unless $keep_running;
                    }
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote join('@@', @field_ids)));
                } elsif ($_->{name} eq "selectedFields") {
                    my $text = $_->text;

                    die "Can't handle this text: $text" unless $text =~ m,^field::(.*?);,;
                    my $id = fields_name2id_number_only $1;

                    $text =~ s,^field::(.*?);,field::${id};,;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                }
            }
        );

    $dom->find('meta')->each
        (
            sub {
                for my $meta_name (keys %meta_field_name_json_map) {
                    if ($_->{name} eq $meta_name and $_->text) {
                        my $id = name2id($_->text, $meta_field_name_json_map{$meta_name});
                        $_->replace(sprintf('<meta name="%s">%s</arg>', $_->{name}, xml_quote $id));
                    }
                }
            }
        );
} else {
    die "Can't handle your action: '$action'";
}

print $dom;
