#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);

use Encode;
use JSON;

my $json = JSON->new->utf8(0);

use Mojo::DOM;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# f:html-file i:issuetypescheme-id n:issuetypescheme-name '?"specify one and only one of id/name"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $html_file = "";
my $issuetypescheme_id = "";
my $issuetypescheme_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--html-file=HTML-FILE';
    if (length('--html-file=HTML-FILE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetypescheme-id=ISSUETYPESCHEME-ID';
    if (length('--issuetypescheme-id=ISSUETYPESCHEME-ID') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--issuetypescheme-name=ISSUETYPESCHEME-NAME';
    if (length('--issuetypescheme-name=ISSUETYPESCHEME-NAME') > 24 and length("specify one and only one of id/name") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "specify one and only one of id/name";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'html-file|f=s' => \$html_file,
    'issuetypescheme-id|i=s' => \$issuetypescheme_id,
    'issuetypescheme-name|n=s' => \$issuetypescheme_name,
    'help|h!' => \&$handler_help,
);


## end generated code
use File::Slurp;

if (not $issuetypescheme_id) {
    if (not $issuetypescheme_name) {
        die "Must specify one of name and id";
    }
    my $issuetypeschemes_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetypescheme"));
    grep {
        $issuetypescheme_id = $_->{id} if $issuetypescheme_name eq $_->{name}
    } @{$issuetypeschemes_json->{schemes}};
    if (not $issuetypescheme_id) {
        die "Can't find issuetypescheme_name: $issuetypescheme_name";
    }
}

my $html_text;

if ($html_file) {
    $html_text = decode_utf8 read_file($html_file);
} else {
    $html_text = decode_utf8 capturex("jkd", "webget", "$ENV{scm_jira_url}secure/admin/ConfigureOptionSchemes!default.jspa?fieldId=&schemeId=${issuetypescheme_id}");
}


my $dom = Mojo::DOM->new->parse($html_text);

if ($ENV{jkd_verbose}) {
    say STDERR encode_utf8 $html_text;
}
my @issuetypes;

$dom->find('ul[id="selectedOptions"] span[class="issue-type-name"]')->each
    (
        sub {
            my $issuetype_name = encode_utf8 $_->text;
            (my $issuetype_id = $_->parent->attr('id')) =~ s,.*_,,;
            push @issuetypes, {
                name => $issuetype_name,
                id => $issuetype_id,
            }
        }
    );

my $default = "";
if (my $default_elem = $dom->at('select[id="default-issue-type-select"] option[selected="selected"]')) {
    $default = $default_elem->attr('value');
}
my $issuetypescheme_description = encode_utf8 $dom->at('input[id="issue-type-scheme-description"]')->attr('value') || "";
my $issuetypescheme = {
    name => $issuetypescheme_name,
    description => $issuetypescheme_description,
    issuetypes => \@issuetypes,
    id => $issuetypescheme_id,
    default => $default,
};

print JSON->new->utf8(0)->pretty(1)->encode($issuetypescheme);
