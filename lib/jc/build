#!/usr/bin/env perl

use strict;
use utf8;
use String::ShellQuote;

use autodie qw(:all);

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P p:params='()' '?"可以指定多个，格式为 name=value，目前不支持文件格式参数"' \
# j:job-or-url '?"如果是 job，则应使用 job 名字，如果是 url，则格式为正则：\${scm_jenkins_url}job/JOB_NAME/"' \
# @:extra-environ-params '?"额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值"' \
# @:extra-environ-params-regexp '?"参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入"' \
# @print-params-only '?"仅打印启动任务时的参数列表，之后就退出，不真正启动编译"' \
# @:extra-params-from-build-url '?"从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）"' \
# vverbose '?"输出更多 log"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $extra_environ_params = "";
my $extra_environ_params_regexp = "";
my $extra_params_from_build_url = "";
my $job_or_url = "";
my @params = ();
my $print_params_only = 0;
my $verbose = 0;

my $handler_help = sub {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '';
  printf "%-24s", '--extra-environ-params=EXTRA-ENVIRON-PARAMS';
  if (length('--extra-environ-params=EXTRA-ENVIRON-PARAMS') > 24 and length("额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--extra-environ-params-regexp=EXTRA-ENVIRON-PARAMS-REGEXP';
  if (length('--extra-environ-params-regexp=EXTRA-ENVIRON-PARAMS-REGEXP') > 24 and length("参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--extra-params-from-build-url=EXTRA-PARAMS-FROM-BUILD-URL';
  if (length('--extra-params-from-build-url=EXTRA-PARAMS-FROM-BUILD-URL') > 24 and length("从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）";
  print "\n";
  printf "%6s", '-j, ';
  printf "%-24s", '--job-or-url=JOB-OR-URL';
  if (length('--job-or-url=JOB-OR-URL') > 24 and length("如果是 job，则应使用 job 名字，如果是 url，则格式为正则：\${scm_jenkins_url}job/JOB_NAME/") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "如果是 job，则应使用 job 名字，如果是 url，则格式为正则：\${scm_jenkins_url}job/JOB_NAME/";
  print "\n";
  printf "%6s", '-p, ';
  printf "%-24s", '--params=PARAMS';
  if (length('--params=PARAMS') > 24 and length("可以指定多个，格式为 name=value，目前不支持文件格式参数") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "可以指定多个，格式为 name=value，目前不支持文件格式参数";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--[no]print-params-only';
  if (length('--[no]print-params-only') > 24 and length("仅打印启动任务时的参数列表，之后就退出，不真正启动编译") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "仅打印启动任务时的参数列表，之后就退出，不真正启动编译";
  print "\n";
  printf "%6s", '-v, ';
  printf "%-24s", '--[no]verbose';
  if (length('--[no]verbose') > 24 and length("输出更多 log") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "输出更多 log";
  print "\n";

  exit(0);
};

GetOptions (
            'extra-environ-params=s' => \$extra_environ_params,
            'extra-environ-params-regexp=s' => \$extra_environ_params_regexp,
            'extra-params-from-build-url=s' => \$extra_params_from_build_url,
            'job-or-url|j=s' => \$job_or_url,
            'params|p=s' => \@params,
            'print-params-only!' => \$print_params_only,
            'verbose|v!' => \$verbose,
            'help|h!' => \&$handler_help,
           );


## end generated code

use JSON;
use Encode;

# curl -X POST JENKINS_URL/job/JOB_NAME/build \
#   --user USER:TOKEN \
#   --data-urlencode json='{"parameter": [{"name":"id", "value":"123"}, {"name":"verbosity", "value":"high"}]}'

my %params_map;

my %default_params_map;

if ($job_or_url !~ m,://.*/job/, ) {
  $job_or_url = "$ENV{scm_jenkins_url}job/$job_or_url"
}

(my $job_api_url = $job_or_url) =~ s,/*$,/api/json,;
$job_api_url = shell_quote $job_api_url;

my $job_api_str = qx(jc curl $job_api_url);
print ("jc curl $job_api_url", $job_api_str) if $verbose;
my $job_api_json_obj  = decode_json $job_api_str;

for (@{$job_api_json_obj->{property}}) {
  if ($_->{_class} eq "hudson.model.ParametersDefinitionProperty") {
    for (@{$_->{parameterDefinitions}}) {
      my $name = $_->{defaultParameterValue}{name};
      my $value = $_->{defaultParameterValue}{value};
      $default_params_map{$name} = $value unless defined $params_map{$name};
    }
  }
}

for (keys %default_params_map) {
  $params_map{$_} = $default_params_map{$_};
}

$extra_params_from_build_url =~ s,/*$,/,;

my $json_str = qx(jc curl ${extra_params_from_build_url}api/json);
my $json_obj = decode_json $json_str;

for (@{$json_obj->{actions}}) {
  if ($_->{_class} eq "hudson.model.ParametersAction") {
    for (@{$_->{parameters}}) {
      $params_map{$_->{name}} = $_->{value};
    }
  }
}

map {
  my ($name, $value) = split "=", $_;
  $params_map{$name} = $value;
} @params;

if ($extra_environ_params) {
  map {
    my ($name, $value) = ($_, $ENV{$_});
    $params_map{$name} = $value;
  } split(" ", $extra_environ_params);
}

if ($extra_environ_params_regexp) {
  $extra_environ_params_regexp = qr($extra_environ_params_regexp);
  map {
    my ($name, $value) = ($_, $ENV{$_});
    $params_map{$name} = $value;
  } grep { m/$extra_environ_params_regexp/ } keys %ENV;
}

if ($job_or_url !~ m,/,) {
  $job_or_url = "$ENV{scm_jenkins_url}job/${job_or_url}/";
}

@params = map {
  {
    name => $_, value => $params_map{$_}
  }
} keys %params_map;

if ($print_params_only) {
  for (@params) {
    my $name = $_->{name};
    my $value = $_->{value};
    if ($name =~ m/^\w+$/) {
      printf "export %s=%s\n", $name, shell_quote($value);
    }
  }
  exit;
}


my $json_arg = decode_utf8 encode_json {
  parameter => \@params
};

$job_or_url =~ s,/*$,/build/,;

my $ret = system("jc", "curl", "$job_or_url", "-X", "POST", "--data-urlencode", "json=" . $json_arg);

if ($ret != 0) {
  die sprintf "Failed to run jc build? system ret is 0x%04x", $ret;
}
