#!/bin/bash

set -e
## start code-generator "^\\s *#\\s *"
# generate-getopt -P t:task o:output-file @:extra-save
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o o:t:h \
                      --long extra-save:,output-file:,task:,help \
                      -n $(basename -- $0) -- "$@")
declare extra_save=
declare output_file=
declare task=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --extra-save)
            extra_save=$2
            shift 2

            ;;
        -o|--output-file)
            output_file=$2
            shift 2

            ;;
        -t|--task)
            task=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--extra-save=EXTRA_SAVE'
            echo
            printf %06s '-o, '
            printf %-24s '--output-file=OUTPUT_FILE'
            echo
            printf %06s '-t, '
            printf %-24s '--task=TASK'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "${output_file}"; then
    output_file=$task.xml
fi

jc get-job "$task" > "${task}.from-jc.xml"
cp "${task}.from-jc.xml" "$task-$$.xml"
. atexit rm -f $task-$$.xml

if xml_command=$(xmlstarlet sel -T -t -m //command  -c //command "${task}.from-jc.xml" 2>/dev/null); then
    jc htmlify-xml-tag -t command -f $task-$$.xml --to-mode bash
fi

if xmlstarlet sel -T -t -m '//definition[@class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition"]/script' -c . "${task}.from-jc.xml" &>/dev/null; then
    jc htmlify-xml-tag -t script -f $task-$$.xml --to-mode groovy
fi

jc htmlify-xml-tag -t description -f $task-$$.xml

if test "${extra_save}"; then
    cp $task-$$.xml "${extra_save}"
fi

if ! diff -w -B "${output_file}" $task-$$.xml > ${output_file}.diff; then
    if test -e "${output_file}" -a -s ${output_file}.diff; then
        EMACS=t hint "$task has difference between local ($output_file) and remote ($task-$$.xml)"
        meld $output_file $task-$$.xml
    fi
    emacs-file-op cat $task-$$.xml '>' "${output_file}"
fi
