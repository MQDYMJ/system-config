#!/bin/bash

set -e
## start code-generator "^\\s *#\\s *"
    # generate-getopt -P j:job-name n:build-number \
        # b:build-url '?"什么也不指定的话，就使用当前的 BUILD_URL"' \
        # rrebuild @all-builds-and-queues \
        # @debug \
        # @delete
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o n:b:j:rh \
                      --long all-builds-and-queues,build-number:,build-url:,debug,delete,job-name:,rebuild,help,no-all-builds-and-queues,no-debug,no-delete,no-rebuild \
                      -n $(basename -- $0) -- "$@")
declare all_builds_and_queues=false
declare build_number=
declare build_url=
declare debug=false
declare delete=false
declare job_name=
declare rebuild=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --all-builds-and-queues|--no-all-builds-and-queues)
            if test "$1" = --no-all-builds-and-queues; then
                all_builds_and_queues=false
            else
                all_builds_and_queues=true
            fi
            shift

            ;;
        -n|--build-number)
            build_number=$2
            shift 2

            ;;
        -b|--build-url)
            build_url=$2
            shift 2

            ;;
        --debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift

            ;;
        --delete|--no-delete)
            if test "$1" = --no-delete; then
                delete=false
            else
                delete=true
            fi
            shift

            ;;
        -j|--job-name)
            job_name=$2
            shift 2

            ;;
        -r|--rebuild|--no-rebuild)
            if test "$1" = --no-rebuild; then
                rebuild=false
            else
                rebuild=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]all-builds-and-queues'
            echo
            printf %06s '-n, '
            printf %-24s '--build-number=BUILD_NUMBER'
            echo
            printf %06s '-b, '
            printf %-24s '--build-url=BUILD_URL'
            echo "什么也不指定的话，就使用当前的 BUILD_URL"
            printf "%06s" " "
            printf %-24s '--[no-]debug'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]delete'
            echo
            printf %06s '-j, '
            printf %-24s '--job-name=JOB_NAME'
            echo
            printf %06s '-r, '
            printf %-24s '--[no-]rebuild'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "${all_builds_and_queues}" = true; then
    if test -z "${job_name}"; then
        die "Must specify job name"
    fi

    jc kill-queue -j "${job_name}"

    running_build_urls=$(
            jc curl job/${job_name}/api/json?depth=1|jq '.builds|.[]|if .result == null then .url else empty end' -r
                      )
    (
        for build_url in $running_build_urls; do
            jc stop-build -b "$build_url"
        done
    )

    exit
fi

if test "${job_name}" -a "${build_number}"; then
    if test "${build_url}"; then
        die "Can't specify both BUILD_URL and JOB_NAME/BUILD_NUMBER"
    else
        build_url=${scm_jenkins_url}job/${job_name}/${build_number}/
    fi
elif test "${job_name}" -o "${build_number}"; then
    die "Must specify both job_name and build_number"
elif test -z "${build_url}"; then
    if test "${BUILD_URL}"; then
        build_url=${BUILD_URL} # from jenkins env, current build.
    else
        die "Can't decide the build url"
    fi
fi

if test "${debug}" = true; then
    log "Stopping build @${build_url}"
fi

if test "${delete}" = true; then
    command=$(cat <<EOF
if test "${debug}" = true; then
    set -x
    exec >& ~/tmp/stop-build.log
fi
jc curl "${build_url}stop" -X POST
jc delete-build "${build_url}"
EOF
           )
    smartcm-daemonize bash -c "$command"
fi

jc curl "${build_url}stop" -X POST

if test "${build_url}" = "${BUILD_URL}"; then
    sleep 10 # wait for my self to get killed
fi

if test "${rebuild}" = true; then
    if ! jc rebuild -u "${build_url}"; then
        log should use trigger?
        jc curl ${build_url}gerrit-trigger-retrigger-this -v
        jc curl ${build_url}gerrit-trigger-retrigger-this/ -v
    fi
fi
