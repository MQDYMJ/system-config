#!/usr/bin/env perl
use strict;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl t:tag-name='"description"' f:xml-file @:to-mode='"html"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $tag_name = "description";
my $to_mode = "html";
my $xml_file = "";

my $handler_help = sub {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-t, ';
  printf "%-24s", '--tag-name=TAG-NAME';
  if (length('--tag-name=TAG-NAME') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--to-mode=TO-MODE';
  if (length('--to-mode=TO-MODE') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-f, ';
  printf "%-24s", '--xml-file=XML-FILE';
  if (length('--xml-file=XML-FILE') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
};

GetOptions (
            'tag-name|t=s' => \$tag_name,
            'to-mode=s' => \$to_mode,
            'xml-file|f=s' => \$xml_file,
            'help|h!' => \&$handler_help,
           );


## end generated code

use File::Slurp;
use Mojo::DOM;
use String::ShellQuote;

my $xml_str = read_file($xml_file);
my $dom = Mojo::DOM->new->parse($xml_str);
$dom->find($tag_name)->
  each(
       sub {
         my $text = $_->text;
         my @command = shell_quote("emacs-fix-fence", "--text", $text, "-f", "nxml", "-t", "$to_mode", "-p", "cat");
         my $command = join(" ", @command);
         my $fenced_text = qx($command);

         $_->content(Mojo::DOM->new->parse($fenced_text));
       });

write_file("$xml_file", $dom);
