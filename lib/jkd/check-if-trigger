#!/usr/bin/env perl
use strict;
use v5.10; # for say
use autodie qw(:all);
use JSON;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P i:issue f:field-name='"status"' v:field-value @debug \
# m:match-jsonpath-value='()' '?"比如，$.fields.issuetype.name=hello-world，参考 JSON::Path"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $debug = 0;
my $field_name = "status";
my $field_value = "";
my $issue = "";
my @match_jsonpath_value = ();

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '';
    printf "%-24s", '--[no]debug';
    if (length('--[no]debug') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--field-name=FIELD-NAME';
    if (length('--field-name=FIELD-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--field-value=FIELD-VALUE';
    if (length('--field-value=FIELD-VALUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issue=ISSUE';
    if (length('--issue=ISSUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-m, ';
    printf "%-24s", '--match-jsonpath-value=MATCH-JSONPATH-VALUE';
    if (length('--match-jsonpath-value=MATCH-JSONPATH-VALUE') > 24 and length("比如，$.fields.issuetype.name=hello-world，参考 JSON::Path") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "比如，$.fields.issuetype.name=hello-world，参考 JSON::Path";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'debug!' => \$debug,
    'field-name|f=s' => \$field_name,
    'field-value|v=s' => \$field_value,
    'issue|i=s' => \$issue,
    'match-jsonpath-value|m=s' => \@match_jsonpath_value,
    'help|h!' => \&$handler_help,
);


## end generated code

use Encode;

if (not $field_name) {
    die "You must specify the field name!"
}

$field_name = decode_utf8($field_name);
$field_value = decode_utf8($field_value);

my $json_issue = decode_json(qx(jkd get 'rest/api/2/issue/${issue}/?expand=changelog'));

sub no_spaces_equal($$) {
    my @pair = @_;
    map {s, | ,,g} @pair;
    return $pair[0] eq $pair[1];
}

if (@match_jsonpath_value) {
    for (@match_jsonpath_value) {
        die "invalid format for --match_jsonpath_value" unless m/(.*?)=(.*)/;
        my ($key, $value) = ($1, $2);
        use JSON::Path 'jpath_map';

        # All books in the store
        my $jpath   = JSON::Path->new($key);


        unless (no_spaces_equal(encode_utf8 $jpath->value($json_issue), $value)) {
            say STDERR sprintf("{%s: %s} not equal to %s", $key, encode_utf8($jpath->value($json_issue)), $value) ;
            exit 42;
        }
    }
}

my $changelog_time;

check_changes:
for my $changelog (reverse @{$json_issue->{changelog}{histories}}) {
    for my $item (@{$changelog->{items}}) {
        if ($item->{field} eq ${field_name} && (
            $item->{toString} eq ${field_value} ||
                not ${field_value})
        ) {
            $field_value = $item->{toString};
            $changelog_time = $changelog->{created};
            last check_changes;
        }
    }
}

my $build_msg_prefix = "$ENV{JOB_NAME} building for change: $field_name = $field_value \@${changelog_time}";

my $comments_pattern = qr(\Q${build_msg_prefix}\E);

for my $comment (@{$json_issue->{fields}{comment}{comments}}) {
    my $msg = $comment->{body};
    if ($msg =~ m,$comments_pattern,) {
        say STDERR encode_utf8 "There is already a build building it: $msg, we are $ENV{BUILD_URL}";
        exit 42;
    }
}

my $build_msg = "${build_msg_prefix}: $ENV{BUILD_URL} \@$ENV{NODE_NAME}";

say STDERR "add comment: $build_msg";
system("jkd", "comment", "-i", "$issue", "-c", "${build_msg}");

my $new_changelog = qx(jkd get 'rest/api/2/issue/${issue}/?expand=changelog');
if (not $new_changelog) {
    die "Can't get change log!";
}

$json_issue = decode_json($new_changelog);

say STDERR JSON->new->allow_nonref->utf8->pretty->encode($json_issue) if $debug;

for my $comment (@{$json_issue->{fields}{comment}{comments}}) {
    my $msg = $comment->{body};
    say STDERR encode_utf8 "checking $msg against $comments_pattern" if $debug;

    if ($msg =~ m,$comments_pattern,) {
        if ($msg eq $build_msg) {
            say STDERR "Yes! We are the first one to add comment, we win!";
            exit 0
        } else {
            say STDERR "There is already a build building it: $msg";
            exit 42
        }
    }
}

say STDERR "This should not happen, please check the log! changelog is ${new_changelog}";

exit 1;
