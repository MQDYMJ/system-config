#!/usr/bin/env perl
use strict;
use v5.10.1;                    # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(system systemx capture capturex);

use Encode;
use JSON;

my $j = JSON->new->utf8(0);

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:issue f:fields-to-print='()' @json
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my @fields_to_print = ();
my $issue = "";
my $json = 0;

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--fields-to-print=FIELDS-TO-PRINT';
    if (length('--fields-to-print=FIELDS-TO-PRINT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issue=ISSUE';
    if (length('--issue=ISSUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]json';
    if (length('--[no]json') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'fields-to-print|f=s' => \@fields_to_print,
    'issue|i=s' => \$issue,
    'json!' => \$json,
    'help|h!' => \&$handler_help,
);


## end generated code

my $jkd_verbose = $ENV{jkd_verbose};

my $json_issue = $j->decode(scalar capturex("jkd", "rest", "issue/$issue?expand=names"));

my %fields_with_names;
for (keys %{$json_issue->{fields}}) {
    if ($json_issue->{fields}{$_}) {
        my $name = $json_issue->{names}{$_};
        if ($name) {
            $fields_with_names{$name} = $json_issue->{fields}{$_};
        } else {
            $fields_with_names{$_} = $json_issue->{fields}{$_};
        }
    }
}

if (not @fields_to_print) {
    print $j->utf8(0)->pretty(1)->encode(\%fields_with_names);
    exit;
}

sub no_spaces_equal($$) {
    my @pair = @_;
    map {s, | ,,g} @pair;
    return $pair[0] eq $pair[1];
}

sub no_spaces_convert($) {
    map {s, | ,,g} @_;
    return $_[0];
}

sub no_spaces_hash_convert(\%) {
    my $hash = $_[0];
    map {
        (my $key = $_) =~ s, | ,,g;
        $hash->{$key} = $hash->{$_}
    } keys %$hash;
}

sub no_spaces_hashget(\%$) {
    my ($hash, $key) = @_;

    if ($hash->{$key}) {
        return $hash->{$key};
    }

    if ($hash->{no_spaces_hash_convert_done} != 'true') {
        no_spaces_hash_convert %$hash;
        $hash->{no_spaces_hash_convert_done} = 'true';
    }

    $hash->{$key} = $hash->{no_spaces_convert $key};
    return $hash->{$key};
}

my %fields_results;

for (@fields_to_print) {
    my $value = no_spaces_hashget(%fields_with_names, $_) ||
        no_spaces_hashget(%{$json_issue->{fields}}, $_);
    if (defined $value) {
        $fields_results{$_} = $value;
    }
}

if (%fields_results) {
    print $j->pretty->encode (\%fields_results);
}
