#!/usr/bin/env perl
use strict;
use v5.10.1;                    # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(system systemx capture capturex);

use Encode;
use JSON;

my $j = JSON->new;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:issue f:fields-to-print='()' @json
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my @fields_to_print = ();
my $issue = "";
my $json = 0;

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--fields-to-print=FIELDS-TO-PRINT';
    if (length('--fields-to-print=FIELDS-TO-PRINT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issue=ISSUE';
    if (length('--issue=ISSUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]json';
    if (length('--[no]json') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'fields-to-print|f=s' => \@fields_to_print,
    'issue|i=s' => \$issue,
    'json!' => \$json,
    'help|h!' => \&$handler_help,
);


## end generated code

my $jkd_verbose = $ENV{jkd_verbose};

my $json_issue = $j->decode(scalar capturex("jkd", "rest", "issue/$issue?expand=names"));

if (not @fields_to_print) {
    my %fields;
    for (keys %{$json_issue->{fields}}) {
        if ($json_issue->{fields}{$_}) {
            my $name = $json_issue->{names}{$_};
            if ($name and $name ne $_) {
                $fields{$name} = $json_issue->{fields}{$_};
            } else {
                $fields{$_} = $json_issue->{fields}{$_};
            }

        }
    }
    print $j->utf8(0)->pretty(1)->encode(\%fields);
    exit;
}

my $issue_type_id = $json_issue->{fields}{issuetype}{id};
my $issue_project = $json_issue->{fields}{project}{key};

my @all_fields = sort keys %{$json_issue->{fields}};

my %fields_to_print;

my %fields_to_print_normalized;
my %fields_results;

sub no_spaces_equal($$) {
    my @pair = @_;
    map {s, | ,,g} @pair;
    return $pair[0] eq $pair[1];
}

sub no_spaces_convert($) {
    map {s, | ,,g} @_;
    return $_[0];
}

for (@fields_to_print) {
    $fields_to_print{$_} = 1;
    $fields_to_print_normalized{no_spaces_convert $_} = $_;
}

for (@all_fields) {
    my $field_name = no_spaces_convert $json_issue->{names}{$_};
    say STDERR "working with $field_name" if $jkd_verbose;

    next unless $json_issue->{fields}{$_};
    if ($fields_to_print{$_} or $fields_to_print_normalized{$field_name} or not @fields_to_print) {
        if (@fields_to_print == 1 and not $json) {
            use Data::Types qw(:string);
            my $value = $json_issue->{fields}{$_};
            if (is_string $value) {
                say $value;
            } else {
                say $j->pretty->encode($value);
            }
        } else {
            if ($fields_to_print{$_}) {
                $fields_results{$_} = $json_issue->{fields}{$_}
            } elsif ($fields_to_print_normalized{$field_name}) {
                $fields_results{$fields_to_print_normalized{$field_name}} = $json_issue->{fields}{$_}
            }
        }
    }
}

if (%fields_results) {
    print $j->pretty->encode (\%fields_results);
}
