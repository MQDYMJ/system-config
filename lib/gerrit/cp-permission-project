#!/usr/bin/env bash

set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

set -e
## start code-generator "^\\s *#\\s *"
# generate-getopt -P f:from t:to rreplace-first
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o f:rt:h \
                      --long from:,replace-first,to:,help,no-replace-first \
                      -n $(basename -- $0) -- "$@")
declare from=
declare replace_first=false
declare to=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -f|--from)
            from=$2
            shift 2

            ;;
        -r|--replace-first|--no-replace-first)
            if test "$1" = --no-replace-first; then
                replace_first=false
            else
                replace_first=true
            fi
            shift

            ;;
        -t|--to)
            to=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-f, '
            printf %-24s '--from=FROM'
            echo
            printf %06s '-r, '
            printf %-24s '--[no-]replace-first'
            echo
            printf %06s '-t, '
            printf %-24s '--to=TO'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "${ORIGINAL_FROM}"; then
    export ORIGINAL_FROM=$from
    export ORIGINAL_TO=$to
fi

if test "${replace_first}" = true; then
    for new_from in $(
                         ssh-gerrit ls-projects| grep "all-.*${from}" -i
                     ); do
        new_to=${new_from/$from/$to}
        if yes-or-no-p "work with $new_from: $new_to"; then
            $me -f $new_from -t $new_to
        fi
    done
    exit
fi

. atexit rm -rf ~/tmp/cp-permission-project/
mkdir ~/tmp/cp-permission-project/$to -p

cd ~/tmp/cp-permission-project/$to
git init .
git fetch s:$from refs/meta/*:refs/meta/*

git reset --hard refs/meta/config

. atexit start_recursive_shell xx
ssh-gerrit create-project $to -p $from --permissions-only || true
rename-refactory -f project.config "$ORIGINAL_FROM" "$ORIGINAL_TO"
gerrit-meta-fix-groups

git fetch s:$to refs/meta/config
git reset --soft FETCH_HEAD
git add .
git commit -s -m "Copy from $from"
git push s:$to HEAD:refs/meta/config
