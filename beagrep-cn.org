#+title: beagrep，两秒钟grep两个G的代码
* 简介

多年前还在上大学的时候，读到LDD（Linux Device Driver）第一版的前言，作
者说这本书是他花了很多小时，仔细grep内核源代码才写出来的。所以后来我也
试着坚持用grep这样的工具阅读源代码。很长一段时间内grep都是足够用了的，
即使像Linux内核这样的几百兆的代码，grep起来也不会太慢。

直到有一天grep了一下Android的代码，花了我半个小时，终于觉得太慢了，受不
了了。

后来发现Linux下开源的桌面索引、搜索软件[[http://en.wikipedia.org/wiki/Beagle_(software)][beagle]]，灵机一动，先用beagle粗略
地搜一遍可能匹配的文件，然后再单在这些文件内grep，不就可以大大节省时间
吗？

非常热血地向你推荐beagrep（beagle + grep），grep两个G的Android代码，只
需要两秒钟！

更加热血的是，beagrep在Windows下也能用！

* 安装
** Linux下安装

*** 下载代码
#+begin_example
git clone git://github.com/baohaojun/beagrep.git -b Linux
#+end_example

*** 编译安装

以debian为例，你可能需要先装一些build需要用到的deb包（TODO 搞清楚
beagrep的build到底需要哪些包）：

#+begin_example
apt-get install mono-devel
#+end_example

然后到之前git clone出来的beagrep下进行编译安装：

#+begin_example
cd beagrep
autoreconf -i
make
sudo make install
#+end_example





** Windows下安装

*** 安装依赖软件
需要安装cygwin和mono的Windows版。Cygwin建议完全安装，Mono建议安装到默认
目录下。

*** 下载代码
#+begin_example
git clone git://github.com/baohaojun/beagrep.git -b Windows
#+end_example

*** 编译安装

#+begin_example
cd beagrep
bash build-win.sh
#+end_example

* 使用

** 创建索引

到想阅读的源代码目录下，以android为例

#+begin_example
cd ~/src/android
mkbeagrepidx
#+end_example

这一步第一次花费的时间较长，在Linux下android代码索引大概需要半个小时（跟以前单独用一次grep的时间差不多）。

但是如果以前已经生成过index，则再做一次花的时间应该可以大为缩短（几分钟），因为那
些没有更新过的文件（按照文件时间戳和index数据库里记录的时间戳对比）不需要重新生成
index。

另外，已经生成过index的情形下，如果你只想重新index某个子目录，则可在该子目录下调
用 ~mkbeagrepidx~ ，程序会问你是否想更新上级已有的index库，如果选是，则取决于该子
目录的大小，可能更新index的时间只需要几秒钟。

** 用beagrep搜索

在想阅读的代码目录下：
#+begin_example
cd ~/src/android
beagrep -e "readlink"
#+end_example

* 原理

beagrep是一个非常实用主义的软件，它之所以有用，是基于以下几条观察：

** grep pattern ，通常是很简单的

或者说，可以分解为几个很简单的子pattern：整字（whole words）。

比如在android代码库里grep这样一个看起来很复杂的pattern：

#+begin_example
"JsonToValue(\"\\\\\"hello world\\\\\"\","
#+end_example

实际上，它包含了几个简单的子pattern，也就是那三个完整的英文单词： ~JsonToValue~
~hello~ ~world~ 。要匹配这个复杂的pattern，一个必要而非充分条件是需要能匹配所有的
这三个子pattern。但这三个子pattern已经不需要正则表达式这么强大的工具去匹配了，我
们把它交给beagle，一个桌面搜索引擎工具。它可以飞快查出在android代码里，哪些文件能
匹配所有这三个子pattern（也即包含所有这三个英文单词）。

事实上，只有一个文件满足这个要求：

#+begin_example
$beagrep-files 'JsonToValue hello world '
Beagrep index found at /home/bhj/tmp/for-code-reading//home/bhj/src/gingerbread-tegra/.beagrep
/home/bhj/src/gingerbread-tegra/external/chromium/base/json/json_reader_unittest.cc
/dev/null
#+end_example

所以，可以想象在这个文件集上grep之前那个复杂的pattern能有多快得到结果。

#+begin_example
beagrep -e "JsonToValue(\"\\\\\"hello world\\\\\"\","
pat is: 'JsonToValue("\\"hello world\\"",'.
beagrep query argument `JsonToValue hello world '
Beagrep index found at /home/bhj/tmp/for-code-reading//home/bhj/src/gingerbread-tegra/.beagrep
/home/bhj/src/gingerbread-tegra/external/chromium/base/json/json_reader_unittest.cc:168:  root.reset(JSONReader().JsonToValue("\"hello world\"", false, false));
Unmatched ( in regex; marked by <-- HERE in m/JsonToValue( <-- HERE ""hello world"",/ at /home/bhj/bin/beagrep line 98.
#+end_example

总之，完整的英文单词是beagle处理起来最得心应手的，而巧得很的是，我们几乎从来都只
用完整的英文单词，而不是半个单词去grep代码。

*** 题外话，用emacs自动创建pattern

从上面可以看出，在文本中出现的match的字符串是：

#+begin_example
JsonToValue("\"hello world\"",
#+end_example

因为正则表达式的元字符、shell的转义字符、引号的关系，我传给beagrep的pattern是复杂得多的：

#+begin_example
"JsonToValue(\"\\\\\"hello world\\\\\"\","
#+end_example

如果这些反斜杠要自已用手指头数着挨个数进去的话，就悲剧了。所以当然不是这样的。当
你在Emacs里选定一段文本，按下C-u M-x grep之后，Emacs会自动帮你计算出需要如何添加
反斜杠，以把这个“纯”字符串变成一个可以跟它匹配的正则表达式（其实也是字符串，只是
加了一些奇怪字符，有特殊意义的字符串）。（但是其实现有点bug，我的 [[https://github.com/baohaojun/windows-config/raw/master/.emacs][.emacs]] 里有对
~grep-default-command~ 和 ~grep-shell-quote-argument~ 的修正）。

** grep 关键字，通常是有趣的

beagrep之所以能大大加快grep的速度，是因为它能大大缩小grep需要处理的文件集。

注意，是大大地缩小，而不是小小的缩小一点点。这有一个要求，就是你给beagrep（也就是
最终的beagle）的英文单词，必须是有趣的。至少要有一个以上是有趣的。有趣的越多，加
速的越大，像上面那个例子，只有三个有趣的英文单词，就把文件集缩小到只剩一个。

试想一下，如果你想grep ~is~ 这个最常见的英文单词在android里出现的位置，几乎所有的
文件都包含了这个单词，不管是文档还是代码（代码的注释里极可能出现 ~is~）。所以即便
用beagle，得到的文件集和整个android代码是相当的，没有加速的空间。因为 ~is~ 实在是
太不有趣了，所以你通常不会单独去grep它。

所以：

- 不要单独grep include，因为它不有趣，几乎所有C/C++源文件、头文件都会包含这个单词。

- 不要单独grep import，因为它也不有趣，几乎所有java文件都会包含它。

等等等等。

