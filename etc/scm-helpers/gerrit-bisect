#!/bin/bash
set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt p:patches-csv '?"patches.csv 文件，可以通过我的 repo-cherry-find-all 命令生成"' \
    # m:manifest-xml '?"仓目对应的 repo manifest.xml，可能需要从中获取仓库、分支对应关系等信息"' \
    # H:gerrit-host '?"Gerrit 服务器主机名，应允许通过 ssh HOST gerrit query 命令查询 patch 信息"'
## end code-generator
## start generated code
TEMP=$( getopt -o H:m:p:h \
               --long gerrit-host:,manifest-xml:,patches-csv:,help \
               -n $(basename -- $0) -- "$@")
declare gerrit_host=
declare manifest_xml=
declare patches_csv=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -H|--gerrit-host)
            gerrit_host=$2
            shift 2

            ;;
        -m|--manifest-xml)
            manifest_xml=$2
            shift 2

            ;;
        -p|--patches-csv)
            patches_csv=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-H, '
            printf %-24s '--gerrit-host=GERRIT_HOST'
            echo
            printf "%30s" ""
            echo "Gerrit 服务器主机名，应允许通过 ssh HOST gerrit query 命令查询 patch 信息"
            printf %06s '-m, '
            printf %-24s '--manifest-xml=MANIFEST_XML'
            echo
            printf "%30s" ""
            echo "仓目对应的 repo manifest.xml，可能需要从中获取仓库、分支对应关系等信息"
            printf %06s '-p, '
            printf %-24s '--patches-csv=PATCHES_CSV'
            echo
            printf "%30s" ""
            echo "patches.csv 文件，可以通过我的 repo-cherry-find-all 命令生成"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

. ~/system-config/etc/scm-helpers/repo-info-from-manifest -m "${manifest_xml}"
import_gerrit_json_funcs_only=true . ~/system-config/bin/.gerrit-query-helper

csv-to-bash < ${patches_csv} |
    while read -r line; do
        if test "$line" != eor; then
            eval "$line"
            continue
        fi

        git_commit_id=$Git_Commit
        subject=$Subject
        change_id=$Change_ID
        author=$Author
        atime=$Author_Date
        committer=$Committer
        ctime=$Commit_Date
        path=${Project_Path}

        project=${repo_xml_project_info_map[@project-$path]}
        branch=${repo_xml_project_info_map[@branch-$path]}

        gerrit_query_result=$(
            gerrit -h ${gerrit_host} query --format json ${git_commit_id} branch:${branch}
                   )


        ret=0

    done
