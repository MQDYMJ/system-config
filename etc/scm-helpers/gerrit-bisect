#!/bin/bash
set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt p:patches-csv '?"patches.csv 文件，可以通过我的 repo-cherry-find-all 命令生成"' \
    # m:manifest-xml '?"仓目对应的 repo manifest.xml，可能需要从中获取仓库、分支对应关系等信息"' \
    # H:gerrit-host '?"Gerrit 服务器主机名，应允许通过 ssh HOST gerrit query 命令查询 patch 信息"' \
    # o:output-csv=/dev/stdout '?"指定输出到某个 csv 文件，默认打印到终端上"'
## end code-generator
## start generated code
TEMP=$( getopt -o H:m:o:p:h \
               --long gerrit-host:,manifest-xml:,output-csv:,patches-csv:,help \
               -n $(basename -- $0) -- "$@")
declare gerrit_host=
declare manifest_xml=
declare output_csv=/dev/stdout
declare patches_csv=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -H|--gerrit-host)
            gerrit_host=$2
            shift 2

            ;;
        -m|--manifest-xml)
            manifest_xml=$2
            shift 2

            ;;
        -o|--output-csv)
            output_csv=$2
            shift 2

            ;;
        -p|--patches-csv)
            patches_csv=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-H, '
            printf %-24s '--gerrit-host=GERRIT_HOST'
            echo
            printf "%30s" ""
            echo "Gerrit 服务器主机名，应允许通过 ssh HOST gerrit query 命令查询 patch 信息"
            printf %06s '-m, '
            printf %-24s '--manifest-xml=MANIFEST_XML'
            echo
            printf "%30s" ""
            echo "仓目对应的 repo manifest.xml，可能需要从中获取仓库、分支对应关系等信息"
            printf %06s '-o, '
            printf %-24s '--output-csv=OUTPUT_CSV'
            echo "指定输出到某个 csv 文件，默认打印到终端上"
            printf %06s '-p, '
            printf %-24s '--patches-csv=PATCHES_CSV'
            echo
            printf "%30s" ""
            echo "patches.csv 文件，可以通过我的 repo-cherry-find-all 命令生成"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

import_gerrit_json_funcs_only=true . ~/system-config/bin/.gerrit-query-helper

tmp_csv=/tmp/gerrit-bisect-$$.csv

csv-to-bash < ${patches_csv} |
    (
        echo "Git Commit,Submit Date,Url"
        while read -r line; do
            if test "$line" != eor; then
                eval "$line"
                continue
            fi

            git_commit_id=$Git_Commit
            subject=$Subject
            change_id=$Change_ID
            author=$Author
            atime=$Author_Date
            committer=$Committer
            ctime=$Commit_Date
            path=${Project_Path}

            gerrit_query_result=$(
                gerrit -h ${gerrit_host} query --format json commit:${git_commit_id}
                               )

            submit_date=$(
                echo "${gerrit_query_result}" | jq -r '..|select(.type? == "SUBM")|.grantedOn?'
                       )

            url=$(
                echo "${gerrit_query_result}" | jq -r '.url?'|grep -v '^null$'
               )

            if [[ $submit_date =~ ^[0-9]{10}$ ]]; then
                submit_date=$(date --date="@${submit_date}")
            else
                submit_date=unknown
            fi

            echo "${git_commit_id},${submit_date},${url}"
        done
    ) > "${tmp_csv}"

csv-merge -c "Git Commit" "${patches_csv}" "${tmp_csv}" > "${output_csv}"
