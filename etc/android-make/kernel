#!/bin/bash

## 修改 kernel 代码后快速编译、更新 boot.img
(
    . buildspec.sc

    if test -z "$PRODUCT_OUT"; then
        PRODUCT_OUT=${ANDROID_PRODUCT_OUT#$ANDROID_BUILD_TOP/}
    fi

    if test ! -e "$PRODUCT_OUT/boot.img"; then
        hint "你之前还没有编译过 boot.img，现在先编一下，用的命令是 android-make bootimage"
        make bootimage
        exit
    fi

    if test -e "$out/combined-$TARGET_PRODUCT.ninja"; then
        android-ninja -j $jobs bootimage
        echo "请注意上面的编译是直接调用了 ninja，快是快了，但正确性一定要你自己确认"
        exit
    fi

    function warn() {
        local ret=$?
        echo "注意：你在用 mm 的方法编译 kernel（这种方法只能在安卓老版本的产品上使用，出错的话请直接编译 bootimage）"
        return $ret
    }

    warn
    . atexit warn

    mkdir -p $OUT_DIR/
    dt_img=$(
        if test -e ${PRODUCT_OUT}/dt.img; then echo ${PRODUCT_OUT}/dt.img; fi
          )
cat <<'EOFb8dbed335f48' | . .replace-%% -- > $OUT_DIR/Android.mk.$$
# {%make-mode%}
bootimage-nodeps: ${PRODUCT_OUT}/kernel <%dt_img%>

BUILD_PREBUILT_BAK := $(BUILD_PREBUILT)
BUILD_PREBUILT := $(CLEAR_VARS)

ifeq ($(filter $(TARGET_DEVICE_DIR)/AndroidBoard.mk, $(MAKEFILE_LIST)),)
$(info need to include the AndroidBoard.mk)
-include $(TARGET_DEVICE_DIR)/AndroidBoard.mk
else
$(info no need to include the AndroidBoard.mk)
endif

BUILD_PREBUILT := $(BUILD_PREBUILT_BAK)

LOCAL_PATH:= out
include $(CLEAR_VARS)
LOCAL_MODULE := fake_kernel
LOCAL_SRC_FILES := Android.mk
LOCAL_MODULE_CLASS := EXECUTABLES
LOCAL_IS_HOST_MODULE := true
LOCAL_MODULE_TAGS := optional
LOCAL_REQUIRED_MODULES := \
    bootimage-nodeps

include $(BUILD_PREBUILT)
# {%/make-mode%}
EOFb8dbed335f48

        cd $OUT_DIR/
        if ! diff Android.mk.$$ Android.mk; then
            mv Android.mk.$$ Android.mk
        fi
        $do_nice mm --only-module bootimage-nodeps -j$jobs $verbose $(if test "${quick}" = true; then echo -q; fi)
)
