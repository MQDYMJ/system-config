#+title: A script to use org-mode for editing confluence pages

The browser editing features are so bad, I can't stand using it for editing confluence pages, even though it is WYSIWYG.

I must use org-mode, it sounds crazy, I know.

There are already many confluence CLI tools, such as [[https://github.com/RaymiiOrg/confluence-python-cli][this one]] (search for [[https://github.com/search?q=confluence+cli][confluence in github]], and you will find a lot of projects).

My script will make it easy for using org-mode to edit confluence pages.

This script is work in progress, I will be constantly updating it. Patches are welcome!

Henceforth, the word wiki will be used as a synonym of confluence pages.

* Usage

The most useful (currently also the only useful) way of using org-kungfu is:

=org-kungfu -w WIKIURL -u USERNAME -p PASSWORD e -p PAGE_ID=

Here,

- =-w WIKIURL=, =-u USERNAME=, =-p PASSWORD= are global options (that affect every sub-command -- see below).

  You can use =org-kungfu --help= to see what global options it takes.

- =e= is a sub-command.

  You can use =org-kungfu --help= to see what sub-commands it supports.

- =-p PAGE_ID= is =e='s local options.

  You can use =org-kungfu e --help= to see what local options =e= takes.

If you can save some configuration in your =~/.config/org-kungfu/config.ini=, then you can further simplify the above usage:

=org-kungfu e -p PAGE_ID=

Here's how to config your settings (supposing you have installed =git=):
#+BEGIN_SRC sh
mkdir -p ~/.config/org-kungfu
git config -f ~/.config/org-kungfu/config.ini ok.wikiurl YOUR_WIKI_URL
git config -f ~/.config/org-kungfu/config.ini ok.username YOUR_WIKI_USERNAME
git config -f ~/.config/org-kungfu/config.ini ok.username YOUR_WIKI_PASSWORD
#+END_SRC

** Sub Commands

I decide to mimic the CLI interface of [[https://github.com/RaymiiOrg/confluence-python-cli][confluence-python-cli]], i.e., provide many sub-commands that do different basic things, and also some higher-level sub-commands that do more advanced things, such as “editing a page with org-mode”.

The most needed sub-commands are these, I think:

- Download a page as html
- Convert a html page to org-mode (using pandoc)
- Edit the page in org-mode
- Convert the org-mode page back to html
- Upload the html to update the page
- Handle images in the page (automatically download/upload them as attachments)

I will be using confluence's REST api to do the job.

I am using Perl to write the script, and all sub commands are each implemented as a Perl subroutine, whose name is derived by prefixing =ok_= to the sub-command name (sub-command =e= <=> subroutine =ok_e=).

* Download a Page

This script will download a page, including it's content（using the confluence =body.editor=, as I find it to be closest to real html and thus the simplest to deal with), and all attachment.

It will download the page into a directory that is arranged according to it's “Ancestors”, i.e., its path in the wiki spaces.

For e.g., if there's a wiki space named Hello, and there's a page named World under space Hello, then World will be downloaded into ${KUNGFU_TOPDIR}/Hello/World/content.html.

First, some helper functions.

#+name: download-a-page
#+BEGIN_SRC perl
  use v5.10;
  use HTTP::Request::Common;
  use LWP::UserAgent;
  use JSON;
  use File::Path qw(make_path);
  use File::Basename;
  use Encode;

  sub kungfu_url_for_api($) {
      (my $api_path = $_[0]) =~ s,^/,,;

      my $auth_str = sprintf "%s:%s@", $ok_username, $ok_password;
      (my $scm_confluence_site = $ok_wikiurl) =~ s,(https?://),$1$auth_str,;
      return "${scm_confluence_site}/${api_path}";
  }

  sub get($) {
      my $ua = LWP::UserAgent->new;
      my $api = $_[0];
      my $url = kungfu_url_for_api($api);
      my $response = $ua->request(GET $url);
      if ($response->code != 200) {
          die "Can't get $api: code is " . $response->code;
      }

      return $response;
  }

  sub save_to_file($$) {
      my ($file, $content) = @_;
      open(my $f, ">$file")
          or die "Can't open $file for write";
      print $f $content;
      close($f);
  }

#+END_SRC

And this is the real get1page subroutine.

#+name: download-a-page
#+BEGIN_SRC perl
  sub ok_get1page(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l -P p:page-id
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("posix_default");

      local @ARGV = @_;

      my $page_id = "";

      GetOptions (
          'page-id|p=s' => \$page_id,
          'help|h!' => \&handler_help,
          );

      sub handler_help {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-p, ';
          printf "%-24s", '--page-id=PAGE-ID';
          if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";

          exit(0);
      }

      ## end generated code

      my $page_api = "rest/api/content/${page_id}?expand=body.editor,version,ancestors";

      my $response = get($page_api);
      my $page_object = decode_json $response->content;

      my @dirs = (".");
      my $path = "";
      for my $ancestor (@{$page_object->{ancestors}}) {
          (my $dir = $ancestor->{title}) =~ s,/,%,g;
          push @dirs, $dir;
      }

      (my $title = $page_object->{title}) =~ s,/,%,g;
      push @dirs, ${title};
      $path = join('/', @dirs);

      make_path($path);
      chdir($path)
          or die "Can't chdir $path";

      system("git add .; git commit -m 'save to git before download from confluence'");

      save_to_file("content.html", $page_object->{body}{editor}{value});
      save_to_file("version.txt", $page_object->{version}{number});
      save_to_file("page-id.txt", $page_id);
      download_all_attachments($page_id);
      rewrite_html_after_download();
      system("git add .; git commit -m 'save to git after rewrite'");
  }

  sub download_1_file($) {
      my ($download_path) = @_;

      (my $filename = $download_path) =~ s/\?.*//;
      $filename = "./$filename";
      make_path("./" . dirname($filename));
      if (-e $filename) {
          return;
      }
      my $response = get($download_path);
      save_to_file("$filename", $response->content);
  }

  sub download_all_attachments($) {
      my ($page_id) = @_;
      my ($api_path) = "rest/api/content/${page_id}/child/attachment";
      my $response = get($api_path);
      my $object = decode_json $response->content;

      for my $attachment (@{$object->{results}}) {
          my $download_path = $attachment->{_links}{download};
          download_1_file($download_path);
      }
  }

  use Mojo::DOM;
  sub rewrite_html_after_download() {
      open(my $html, "<content.html")
          or die "Can't open content.html for read";

      my $html_str = join "", <$html>;
      $html_str = decode_utf8 $html_str;
      close($html);

      save_to_file("content-after-download.html", $html_str);

      my $dom = Mojo::DOM->new($html_str);
      $dom->find('img')->each(
          sub {
              my $src = $_->{src};
              if ($src =~ m,^/download/,) {
                  $src =~ s,\?.*,,;
                  if (not -e ".$src") {
                      download_1_file($src);
                  }
                  $src = ".$src";
                  $_->{src} = $src;
              }
          });
      save_to_file("content.html", encode_utf8 $dom);
  }

  sub rewrite_html_for_update() {
      open(my $html, "<content.html")
          or die "Can't open content.html for read";
      my $html_str = join "", <$html>;
      close($html);

      $html_str = decode_utf8 $html_str;
      my $dom = Mojo::DOM->new->xml(1)->parse($html_str);
      $dom->find('img')->each(
          sub {
              my $src = $_->{src};
              if ($src =~ m,^\./download/,) {
                  $src =~ s/^\.//;
              }
              $_->{src} = $src;
          }
          );
      save_to_file("content.html", encode_utf8 $dom);
      if ($ENV{SYSTEM_CONFIG_INITED} eq 'true') {
          System("css-inline content.html | tee-with-tmp content.html");
      }
  }

  sub read_file($) {
      my $file = $_[0];
      open(my $f, "<$file")
          or die "Can't open $file for reading";

      my $str = join "", <$f>;
      close($f);
      return $str;
  }

  sub ok_update1page(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l -P p:page-id f:html-file=content.html
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("posix_default");

      local @ARGV = @_;

      my $html_file = "content.html";
      my $page_id = "";

      my $handler_help = sub {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-f, ';
          printf "%-24s", '--html-file=HTML-FILE';
          if (length('--html-file=HTML-FILE') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";
          printf "%6s", '-p, ';
          printf "%-24s", '--page-id=PAGE-ID';
          if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";

          exit(0);
      };

      GetOptions (
          'html-file|f=s' => \$html_file,
          'page-id|p=s' => \$page_id,
          'help|h!' => \&$handler_help,
          );


      ## end generated code

      my $page_api = "rest/api/content/${page_id}?expand=body.editor,version,title";

      my $response = get($page_api);
      my $page_object = decode_json $response->content;

      $page_object->{body}{editor}{value} = decode_utf8 read_file("content.html");
      $page_object->{version}{number}++;
      $page_object->{version}{message} = "Edit with org-mode";

      my $ua = LWP::UserAgent->new;
      my $request = PUT kungfu_url_for_api("rest/api/content/${page_id}"),
          'Content-Type' => 'application/json',
          "charset" => "utf-8",
          Content => encode_json $page_object;

      my $response = $ua->request($request);
      say "PUT response code:" . $response->code;
      System("of ${ok_wikiurl}/pages/viewpage.action?pageId=${page_id}");
      system("git add .; git commit -m 'save to git after upload to confluence'");
  }
#+END_SRC

* Upload page attachments

Here's the script to upload page attachment. Only allow to upload 1 file at a time, and will exit if you upload the same file a second time (confluence will refuse to accept the file).

  #+name: upload-page-attachment
  #+BEGIN_SRC perl
      sub ok_upload1attachment(@) {
          ## start code-generator "^\\s *#\\s *"
          # generate-getopt -s perl -l -P p:page-id f:filename
          ## end code-generator
          ## start generated code
          use Getopt::Long;

          Getopt::Long::Configure("posix_default");

          local @ARGV = @_;

          my $filename = "";
          my $page_id = "";

          my $handler_help = sub {
              print ;
              print "\n\n选项和参数：\n";
              printf "%6s", '-f, ';
              printf "%-24s", '--filename=FILENAME';
              if (length('--filename=FILENAME') > 24 and length() > 0) {
                  print "\n";
                  printf "%30s", "";
              }
              printf "%s", ;
              print "\n";
              printf "%6s", '-p, ';
              printf "%-24s", '--page-id=PAGE-ID';
              if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
                  print "\n";
                  printf "%30s", "";
              }
              printf "%s", ;
              print "\n";

              exit(0);
          };

          GetOptions (
              'filename|f=s' => \$filename,
              'page-id|p=s' => \$page_id,
              'help|h!' => \&$handler_help,
              );


          ## end generated code

          my $ua = LWP::UserAgent->new;
          my $api = sprintf "rest/api/content/%d/child/attachment", $page_id;

          my $request = POST kungfu_url_for_api($api),
              "X-Atlassian-Token" => "nocheck",
              Content_Type => 'form-data',
              Content => [
                  file => ["$filename"],
              ];

          my $response = $ua->request($request);
          say "POST response code:" . $response->code;
          if ($response->code != 200) {
              die "Can't get $api: code is " . $response->code . ", content is:\n\n" . $response->content . "\n"
          }

          return $response;
      }

  #+END_SRC

* e

This script will download a page, convert it to org-mode, edit it in
org-mode, export it to html, and then update the original page (with
the newly exported html).

There, we will need a emacs-lisp script to convert an .org file to .html file, but with the html body only (i.e., without =<html>= and =<head>=).

Now, this emacs-lisp script first.

#+name: emacs-kungfu-export
#+BEGIN_SRC emacs-lisp
  (defun org-kungfu--orgtext-to-html (orgtext)
    (with-temp-buffer
      (insert orgtext)
      (let ((org-export-show-temporary-export-buffer t))
        (org-html-export-as-html nil nil nil t)
        (prog1
            (buffer-substring-no-properties (point-min) (point-max))
          (kill-buffer)))))

  (defun org-kungfu--export-to-html (file)
    (with-temp-buffer
      (insert-file file)
      (org-mode)
      (let ((html_str (org-kungfu--orgtext-to-html (buffer-substring-no-properties (point-min) (point-max))))
            (html_file (replace-regexp-in-string "\\.org" ".html" file)))
        (delete-region (point-min) (point-max))
        (fundamental-mode)
        (insert html_str)
        (write-file html_file))))

  (defun org-kungfu--export-to-buffer (file buffer)
    (with-temp-buffer
      (insert-file file)
      (org-mode)
      (let ((html_str (org-kungfu--orgtext-to-html (buffer-substring-no-properties (point-min) (point-max)))))
        (with-current-buffer buffer
          (delete-region (point-min) (point-max))
          (insert html_str)))))
#+END_SRC

#+name: e
#+BEGIN_SRC perl :noweb yes
  sub ok_ehwo() { # edit html as org-mode, requires system-config
      ok_edit_html_with_org("-e");
  }

  sub ok_erwo(@) { # edit region (comments) with org-mode, requires system-config
      chdir "$ENV{HOME}/tmp"
          or die "Can't chdir to ~/tmp";

      my $selected_text = qx(emacs-current-selection -b buffer-erwo-$$);
      my @selected_lines = split("\n", $selected_text);
      my $first_prefix;
      for (@selected_lines) {
          if (m/^(\s*\S+\s*)/) {
              $first_prefix = $1;
              last;
          }
      }

      my $first_prefix_re = qr(\Q${first_prefix}\E);
      $selected_text =~ s,^$first_prefix_re,,gm;
      save_to_file("erwo-$$.org", $selected_text);
      System("emacsclient erwo-$$.org");
      my $edited_text = read_file("erwo-$$.org");
      $edited_text =~ s,^,$first_prefix,gm;
      save_to_file("erwo-$$.org", $edited_text);

      my $emacs_script = <<~'EOF20924b0d836e';
      ; {%emacs-lisp-mode%}
      (progn
        (switch-to-buffer buffer-erwo-<%pid%>)
        (delete-region (point) (mark))
        (insert-file "<%pwd%>/erwo-<%pid%>.org"))
      ; {%/emacs-lisp-mode%}
      EOF20924b0d836e

      use Cwd;
      my $cwd = getcwd();
      $emacs_script =~ s,<%pid%>,$$,g;
      $emacs_script =~ s,<%pwd%>,$cwd,g;

      System("emacsclient", "-e", $emacs_script);
  }

  sub ok_edit_html_with_org(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l -P ecalled-for-emacs '?"Get the html from current emacs buffer, SC ONLY"'
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("posix_default");

      local @ARGV = @_;

      my $called_for_emacs = 0;

      my $handler_help = sub {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-e, ';
          printf "%-24s", '--[no]called-for-emacs';
          if (length('--[no]called-for-emacs') > 24 and length("Get the html from current emacs buffer, SC ONLY") > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", "Get the html from current emacs buffer, SC ONLY";
          print "\n";

          exit(0);
      };

      GetOptions (
          'called-for-emacs|e!' => \$called_for_emacs,
          'help|h!' => \&$handler_help,
          );


      ## end generated code

      if ($called_for_emacs) {
          chdir("$ENV{HOME}/tmp");
          System("emacs-current-text -b buffer-ehwo-$$ > content.html");
      }

      System("(echo '#+OPTIONS: toc:nil num:nil'; pandoc --wrap=none -f html -t org content.html | perl -pe 's,\\\\_,_,g') > content.org");
      System("emacsclient content.org");

      my $emacs_script = <<~'EOF64f308bc1e9a';
            ; {%emacs-lisp-mode%}
      (progn
       <<emacs-kungfu-export>>
       <%how-to-export%>)
                  ; {%/emacs-lisp-mode%}

      EOF64f308bc1e9a

      if ($called_for_emacs) {
          $emacs_script =~ s,<%how-to-export%>,
              (org-kungfu--export-to-buffer "content.org" buffer-ehwo-$$)
              (switch-to-buffer 'buffer-ehwo-$$)
              (unintern 'buffer-ehwo-$$),x;
      } else {
          $emacs_script =~ s,<%how-to-export%>,(org-kungfu--export-to-html "content.org"),;
      }

      System("emacsclient", "-e", $emacs_script);

  }

  sub get_page_id_maybe_from_url($$) {
      my ($page_id, $url) = @_;
      if ($url =~ m/pageid=(\d+)/i) {
          if (not $page_id) {
              $page_id = $1;
          } else {
              die "Please specify only 1 of --url and --page-id";
          }
      }

      if (not $page_id) {
          die "Must specify the page_id"
      }
      return $page_id;
  }

  sub ok_e(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l -P u:url '?"copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only"' \
      # p:page-id
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("posix_default");

      local @ARGV = @_;

      my $page_id = "";
      my $url = "";

      my $handler_help = sub {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-p, ';
          printf "%-24s", '--page-id=PAGE-ID';
          if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";
          printf "%6s", '-u, ';
          printf "%-24s", '--url=URL';
          if (length('--url=URL') > 24 and length("copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only") > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", "copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only";
          print "\n";

          exit(0);
      };

      GetOptions (
          'page-id|p=s' => \$page_id,
          'url|u=s' => \$url,
          'help|h!' => \&$handler_help,
          );


      ## end generated code

      $page_id = get_page_id_maybe_from_url($page_id, $url);

      ok_get1page("-p", $page_id);
      ok_edit_html_with_org();
      rewrite_html_for_update();
      ok_update1page("-p", $page_id);
  }
#+END_SRC

#+name: perl-lib-funcs
#+BEGIN_SRC perl
  sub System(@) {
      my $ret = system(@_);
      if ($ret != 0) {
          die "Failed to run: @_";
      }
  }

#+END_SRC

* Which sub command to call?

This is simple using Perl's “reflection”.
  #+name: which-to-call
  #+BEGIN_SRC perl
    my $sub_command = "ok_" . shift;

    if (not defined &$sub_command) {
        say "Can't find sub-command: $sub_command";
        &$handler_help();
    }

    $sub_command = \&{$sub_command};
    &$sub_command(@ARGV);

  #+END_SRC
** help for sub commands
   #+name: subcmd-helps
   #+BEGIN_SRC perl
     sub subcmd_help() {
         my $top_help_str = <<~'EOF';
             Usage: org-kungfu [GLOBAL_OPTIONS]... SUB_COMMAND SUBCMD_ARGS...
             Here's the list of sub-commands:
             EOF

         my @subcmd_help_strs;
         my %subcmd_helpstr_map = (
             update1page => "Update 1 page (html text and all images -- automatically upload as page attachments)",
             get1page => "Get 1 page (html text and all image attachments)",
             e => "Edit 1 page in emacs org-mode, download/edit/upload",
             );

         my %help_printed_map;

         for my $subcmd ((sort {$a cmp $b} grep {m/^ok_/} keys %::), (sort {$a cmp $b} keys %subcmd_helpstr_map)) {
             (my $raw_subcmd = $subcmd) =~ s,^ok_,,;
             $subcmd = "ok_$raw_subcmd";
             if ($help_printed_map{$raw_subcmd}) {
                 next;
             } else {
                 $help_printed_map{$raw_subcmd} = 1;
             }

             my $subcmd_help_str = $subcmd_helpstr_map{$raw_subcmd} ||
                 "NO DESCRIPTION.";

             if (not defined &$subcmd) {
                 $subcmd_help_str .= " (NO DEFINITION)"
             }

             push @subcmd_help_strs, sprintf("    %s\n\t%s", $raw_subcmd, $subcmd_help_str);
         }

         return join "\n", $top_help_str, @subcmd_help_strs;
     }
   #+END_SRC
** The final script

#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

#+name: old-code
#+BEGIN_SRC sh
  #!/bin/bash

  # Given a page, I will edit this
#+END_SRC

#+name: global-args
#+BEGIN_SRC perl
  use strict;

  ## start code-generator "^\\s *#\\s *"
  # generate-getopt -P -s perl -p ok \
  # '?subcmd_help()' \
  # u:username '?"Login Username"' \
  # p:password '?"Login Password"' \
  # w:wikiurl '?"Wiki URL (only FQDN, no / and such)"' \
  # vverbose '?"Verbose debug output"'
  ## end code-generator
  ## start generated code
  use Getopt::Long;

  Getopt::Long::Configure("posix_default");



  my $ok_password = "";
  my $ok_username = "";
  my $ok_verbose = 0;
  my $ok_wikiurl = "";

  my $handler_help = sub {
      print subcmd_help();
      print "\n\n选项和参数：\n";
      printf "%6s", '-p, ';
      printf "%-24s", '--password=PASSWORD';
      if (length('--password=PASSWORD') > 24 and length("Login Password") > 0) {
          print "\n";
          printf "%30s", "";
      }
      printf "%s", "Login Password";
      print "\n";
      printf "%6s", '-u, ';
      printf "%-24s", '--username=USERNAME';
      if (length('--username=USERNAME') > 24 and length("Login Username") > 0) {
          print "\n";
          printf "%30s", "";
      }
      printf "%s", "Login Username";
      print "\n";
      printf "%6s", '-v, ';
      printf "%-24s", '--[no]verbose';
      if (length('--[no]verbose') > 24 and length("Verbose debug output") > 0) {
          print "\n";
          printf "%30s", "";
      }
      printf "%s", "Verbose debug output";
      print "\n";
      printf "%6s", '-w, ';
      printf "%-24s", '--wikiurl=WIKIURL';
      if (length('--wikiurl=WIKIURL') > 24 and length("Wiki URL (only FQDN, no / and such)") > 0) {
          print "\n";
          printf "%30s", "";
      }
      printf "%s", "Wiki URL (only FQDN, no / and such)";
      print "\n";

      exit(0);
  };

  GetOptions (
      'password|p=s' => \$ok_password,
      'username|u=s' => \$ok_username,
      'verbose|v!' => \$ok_verbose,
      'wikiurl|w=s' => \$ok_wikiurl,
      'help|h!' => \&$handler_help,
      );


  ## end generated code
  use v5.10;

  my %file_config;
  use Config::Simple;

  my ($config_file) = glob "~/.config/org-kungfu/config.ini";

  if (-e $config_file) {
      Config::Simple->import_from($config_file, \%file_config);
  }

  if (not $ok_password) {
      $ok_password = $file_config{"ok.password"};
  }

  if (not $ok_password) {
      say "Must specify the wiki password";
      &$handler_help(1)
  }

  if (not $ok_username) {
      $ok_username = $file_config{"ok.username"};
  }

  if (not $ok_username) {
      say "Must specify the wiki username";
      &$handler_help(1);
  }

  if (not $ok_wikiurl) {
      $ok_wikiurl = $file_config{"ok.wikiurl"};
  }

  if (not $ok_wikiurl) {
      say "Must specify the wiki url";
      &$handler_help(1);
  }

  my $ok_topdir = $file_config{"ok.topdir"};
  if (not $ok_topdir) {
      $ok_topdir = glob("~/src/github/kungfu-edit");
  }

  use File::Path;
  make_path($ok_topdir);
  chdir($ok_topdir)
      or die "Can't chdir: $ok_topdir";

#+END_SRC

#+name: the-ultimate-script
#+BEGIN_SRC perl :tangle ./org-kungfu :comments link :shebang "#!/usr/bin/perl" :noweb yes
  <<global-args>>
  <<perl-lib-funcs>>
  <<download-a-page>>
  <<upload-page-attachment>>
  <<e>>
  <<new-page>>
  <<subcmd-helps>>
  <<which-to-call>>
  <<read-only>>
#+END_SRC

#+results: the-ultimate-script


* GTD

In this part, I will use GTD method to get things done.

** TODO [#C] when downloading an attachment, should pay respect to the modificationDate.
   :PROPERTIES:
   :ID:       c8d58d67-b9bf-4aae-b064-675c155bf2c4
   :END:
Currently, I will not download an attachment file again if it already exist. Later, we should re-download it if it has been updated on the server side.

** TODO [#B] When updating a page, I should also upload all images as attachments
   :PROPERTIES:
   :ID:       55470d14-4c42-436f-b77f-2bf3c3902277
   :END:
** TODO [#B] When updating a page, I should be able to upload the emojis, and make emojis look the same size with the text
   :PROPERTIES:
   :ID:       73dc3d06-2f21-41a7-926c-5fc84100f750
   :END:
** TODO [#B] It should be easy to copy a page to another place.
   :PROPERTIES:
   :ID:       86e67d79-654f-4d79-9e6e-7d5e82176b8c
   :END:
** TODO [#B] It should be easy to create a page.
   :PROPERTIES:
   :ID:       1816ca54-3f7e-42a3-a7de-5c947354c1e2
   :END:

When I want to create a page, I would like to create it at the following locations:

- As a sibling of a recent page that I contributed
- As the child of a recent page that I contributed

When I want to create a page, I will be asked the title of the page.

It should be easy for me to find that Recently contributed Page, using query, or allow me to just input a wiki page's Url.

*** TODO Should be easy to query the pages that I contributed recently.

1. Use cql to query the pages
2. Check if query allows sorting (by date, so that most recently contributed got to the first)

Here, I should be learning a little bit of cql, than, I should find out how to write cql as Shell argument (quoting ' ' as %20, stuff like that)? No, that is unnecessary, because I won't be using too much Curl + Shell, I'm using Perl.

Still, it will be great if I can test using Curl, and it would be great if I can write pure cql and don't need to worry about Shell Quoting.

Here's how to use the following tool: =./cql 'title ~ "集成" and type = page'=.

Please note the double quotes around ~集成~, they are required, there will be an error if the string =集成= is unquoted.

#+name: cql
#+BEGIN_SRC sh :tangle ./cql :comments link :shebang "#!/bin/bash" :noweb yes
  set -e
  get-config() {
      git config -f ~/.config/org-kungfu/config.ini "$@"
  }

  user=$(get-config ok.username)
  pass=$(get-config ok.password)
  wikiurl=$(get-config ok.wikiurl)


  ## start code-generator "^\\s *#\\s *"
  # generate-getopt q:cql-str e:extra-args
  ## end code-generator
  ## start generated code
  TEMP=$( getopt -o q:e:h \
                 --long cql-str:,extra-args:,help \
                 -n $(basename -- $0) -- "$@")
  declare cql_str=
  declare extra_args=
  eval set -- "$TEMP"
  while true; do
      case "$1" in

          -q|--cql-str)
              cql_str=$2
              shift 2

              ;;
          -e|--extra-args)
              extra_args=$2
              shift 2

              ;;
          -h|--help)
              set +x
              echo -e
              echo
              echo Options and arguments:
              printf %06s '-q, '
              printf %-24s '--cql-str=CQL_STR'
              echo
              printf %06s '-e, '
              printf %-24s '--extra-args=EXTRA_ARGS'
              echo
              exit
              shift
              ;;
          --)
              shift
              break
              ;;
          ,*)
              die "internal error: $(. bt; echo; bt | indent-stdin)"
              ;;
      esac
  done


  ## end generated code

  if test -z "${cql_str}"; then
      cql_str="$*"
  fi

  cql_str=$(
      urlify "$cql_str"
         )

  curl -u "${user}:${pass}" "${wikiurl}/rest/api/search?cql=$cql_str${extra_args}"
#+END_SRC

*** TODO BTW, I also want a simple script for working with jira

#+name: jql
#+BEGIN_SRC sh :tangle ./jql :comments link :shebang "#!/bin/bash" :noweb yes
  set -e
  get-config() {
      git config -f ~/.config/org-kungfu/config.ini "$@"
  }

  user=$(get-config ok.username)
  pass=$(get-config ok.password)
  jiraurl=$(get-config ok.jiraurl)

  jql_str=$(
      urlify "$@"
         )

  curl -s -u "${user}:${pass}" "${jiraurl}/rest/api/2/search?jql=$jql_str"
#+END_SRC


*** TODO How to ask for input

When I want to create a page, I need to ask the user, where do you want to create the page? With the following 3 questions:

1. Use cql to find a page
2. Input the page url (maybe with a copy&paste from the browser)
3. List a list of the recent pages that you contributed, and allow you to select one

The specified page will be used as the container of the new page.

Here, I will be using system-config's select-args to ask for input, because it provides a very easy to use interface.

#+name: new-page
#+BEGIN_SRC perl
  use String::ShellQuote;
  use URI::Encode qw(uri_encode uri_decode);
  sub ok_np(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l -P p:page-id u:url
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("posix_default");

      local @ARGV = @_;

      my $page_id = "";
      my $url = "";

      my $handler_help = sub {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-p, ';
          printf "%-24s", '--page-id=PAGE-ID';
          if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";
          printf "%6s", '-u, ';
          printf "%-24s", '--url=URL';
          if (length('--url=URL') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";

          exit(0);
      };

      GetOptions (
          'page-id|p=s' => \$page_id,
          'url|u=s' => \$url,
          'help|h!' => \&$handler_help,
          );


      ## end generated code

      if (not $page_id and not $url) {
          my @command = (
              "select-args", "-p", "Which recent page do you want to create a new page under?",
              );

          my $cql_str = uri_encode("contributor in ($ok_username) and type = page");
          my $page_api = "rest/api/search?cql=$cql_str&expand=content.ancestors";

          my $response = get($page_api);

          my $cql_object = decode_json $response->content;

          my %id_path_map;
          my %path_id_map;
          for my $result (@{$cql_object->{results}}) {
              # my @dirs = (".");
              # my $path = "";
              # for my $ancestor (@{$page_object->{ancestors}}) {
              #     (my $dir = $ancestor->{title}) =~ s,/,%,g;
              #     push @dirs, $dir;
              # }

              # (my $title = $page_object->{title}) =~ s,/,%,g;
              # push @dirs, ${title};
              # $path = join('/', @dirs);

              my $path = encode_utf8
                  join("/",
                       map {
                           s,/,%,g; $_;
                       }
                       (
                        map {
                            $_->{title}
                        } @{$result->{content}{ancestors}}
                       ),
                       $result->{title}
                  );
              $id_path_map{$result->{content}{id}} = $path;
              $path_id_map{$path} = $result->{content}{id};
          }

          my @select_command = (
              "select-args", "-p", "Please select which page you want to edit",
              "-O", "ok-select-page",
              sort keys %path_id_map
              );

          my $select_command = join " ", map {$_ = shell_quote($_)} @select_command;
          my $path_sel = qx($select_command);

          my %actions_desc_name_map = (
              "edit it" => "edit-me",
              "create a child page" => "edit-baby",
              "create a sibling page" => "edit-bro"
              );

          @select_command = (
              "select-args", "-p", "Please select what do you want do with this page",
              keys %actions_desc_name_map
              );

          $select_command = join " ", map {$_ = shell_quote($_)} @select_command;
          my $action_desc = qx($select_command);

          if ($actions_desc_name_map{$action_desc} eq "edit-me") {
              ok_e("-p", $path_id_map{$path_sel});
          } else {
              say "your action is $action_desc";
          }
      } else {
          $page_id = get_page_id_maybe_from_url($page_id, $url);
      }

  }
#+END_SRC

#+name: create1page
#+BEGIN_SRC perl
  sub create1page(@) {
      ## start code-generator "^\\s *#\\s *"
      # generate-getopt -s perl -l p:page-id t:title
      ## end code-generator
      ## start generated code
      use Getopt::Long;

      Getopt::Long::Configure("default");

      local @ARGV = @_;

      my $page_id = "";
      my $title = "";

      my $handler_help = sub {
          print ;
          print "\n\n选项和参数：\n";
          printf "%6s", '-p, ';
          printf "%-24s", '--page-id=PAGE-ID';
          if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";
          printf "%6s", '-t, ';
          printf "%-24s", '--title=TITLE';
          if (length('--title=TITLE') > 24 and length() > 0) {
              print "\n";
              printf "%30s", "";
          }
          printf "%s", ;
          print "\n";

          exit(0);
      };

      GetOptions (
          'page-id|p=s' => \$page_id,
          'title|t=s' => \$title,
          'help|h!' => \&$handler_help,
          );


      ## end generated code


  }
#+END_SRC

** Chinese GTD

The following are GTD that I wrote earler in Chinese, they help me to think more clear, but you, please don't read it.

*** DONE [#A] 解决通过 org-mode 写 wiki 的问题
    CLOSED: [2019-02-12 火 17:31]
  :PROPERTIES:
  :ID:       55e0a834-d680-49af-9e5b-fd77065ab6f8
  :END:
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2019-02-12 火 17:31]
  :END:

注意：这里说的 wiki，都是指 confluence。

**** 写一个 elisp 函数，能把 org-mode 转换成 html

这样调用就好：=(org-html-export-as-html nil nil nil t)=。

但是，注要不要把 toc（table of contents）给弄进来。

**** 写一个 elisp 函数，能把 org-html 给上传到某 wiki 页面。

对 wiki 页面的操作：

1. 创建某 wiki 页面
2. 更新某 wiki 页面
3. 查找某 wiki 页面
4. 方便的在 wiki 的 api 里查找关于 wiki 页面的文档

***** 最理想的情况应该是，我跟本不需要再去打开 wiki 网页，直接就可以在本地浏览 wiki 上的目录结构

如果要做到这样的话，我可能需要：

1. 设计一个本地目录结构与 wiki 网页目录结构的对应关系。

   - 假设我在编辑本地文件：A/B/C.org，我点一下发布，这个文件就被 push 到 wiki/A/B/C.html
   - 假设我指定要把 wiki 上的一个页面拉回来编辑，我只要指定这个页面的 url（因为从 browser 里拷 url 最方便），它就自动帮我保存到正确的 A/B/C.org。

2. 但是，我最需要的、最关键的 elisp 函数，应该是 (ok-upload-html-to-page html pageid)

   这个函数应该是我最先写出来，因为它是最有价值的。

**** 写一个 elisp 函数，能把 wiki 页面更新到我的某个 org 文件里来

**** 处理 org 中的图片，让它们能够自动上传到 wiki 里

**** 处理 org 转成 html 之后的 css，让它们上传到 wiki 里之后，看上去尽量与直接在浏览器里打开时一致。


**** 以下是草稿，测试用的文本、数据等，不要看。

***** 测试 Org-mode
