#!/usr/bin/env perl

# 这个脚本会把 csv 文件的格式统一成 perl 输出的格式。这样做的原因是一
# 些用户用 office 保存的 csv，它的引号、转义等使用规则与 perl 不一样，
# 最后会导致 csv 在 git 里管理的时候，不同工具保存出来的 diff 完全没法
# 看 -- office 用户只改了一行，但因为格式变了，跟上一个 perl 用户保存
# 的结果用 diff 一对比，发现每一行都被改了。

use Text::CSV qw(csv);
use strict;
use String::ShellQuote;


## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:input-csv o:output-csv
## end code-generator
## start generated code
use Getopt::Long;

my $input_csv = "";
my $output_csv = "";

GetOptions (
            'input-csv|i=s' => \$input_csv,
            'output-csv|o=s' => \$output_csv,
            'help|h!' => \&handler_help,
           );



sub handler_help {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-i, ';
  printf "%-24s", '--input-csv=INPUT-CSV';
  if (length('--input-csv=INPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-o, ';
  printf "%-24s", '--output-csv=OUTPUT-CSV';
  if (length('--output-csv=OUTPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
}

## end generated code


my @hdr;
my $csv = csv (in => csv(in => "$input_csv", keep_headers => @hdr),
               out => ($output_csv or "$input_csv"),
               headers => \@hdr
              )
    or die "Cannot use CSV: ".Text::CSV->error_diag ();
