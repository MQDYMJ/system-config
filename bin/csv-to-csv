#!/usr/bin/perl

# 这个文件会把一个 csv 文件转化成一个 bash 文件
# 假设：csv 文件的第一行是 header，会给出每一列的名字
# 输出：每一行 csv 文本，最后都会输出成一行 sh 脚本，如下：
#     var1=col1; var2=col2; var3=col3
# 其中 var1、var2、var3 等名字来自于 csv 文件的第一行；col1、col2、col3 等值则来自 csv 文件的当前行。
# 然后，我在 shell 脚本里 read 到这一行输出之后，我直接 eval 一下它，就可以得到这些变量了

# 输出格式 2：允许一行 csv 对应多行 bash 输出，最后用一个 eor 表示“end of record”


use Text::CSV qw(csv);
use strict;
use String::ShellQuote;


## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:input-csv o:output-csv
## end code-generator
## start generated code
use Getopt::Long;

my $input_csv = "";
my $output_csv = "";

GetOptions (
            'input-csv|i=s' => \$input_csv,
            'output-csv|o=s' => \$output_csv,
            'help|h!' => \&handler_help,
           );



sub handler_help {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-i, ';
  printf "%-24s", '--input-csv=INPUT-CSV';
  if (length('--input-csv=INPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-o, ';
  printf "%-24s", '--output-csv=OUTPUT-CSV';
  if (length('--output-csv=OUTPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
}

## end generated code



my $csv = csv (in => "$input_csv", out => ($output_csv or "$input_csv.$$"))
    or die "Cannot use CSV: ".Text::CSV->error_diag ();

my @title = map {s/\W/_/g; $_} @{$csv->getline(*STDIN)};
$csv->column_names(@title);

while (my $cols = $csv->getline_hr (*STDIN)) {
    for my $key (keys %{$cols}) {
        my $val = shell_quote($cols->{$key});
        print "$key=$val\n"
    }
    print "eor\n";
}
