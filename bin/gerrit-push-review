#!/bin/bash

if echo $SHELLOPTS | grep -q xtrace; then
    export SHELLOPTS
fi
set -e

set -o pipefail
function die() {
    echo "$@"
    exit -1
}

rev=HEAD

head_branch=
TEMP=$(getopt -o dnBb:r:Ra --long draft,revision:,norebase,remote: -n $(basename $0) -- "$@")
do_fetch=true
do_rebase=true
do_review=true
where=refs/for
eval set -- "$TEMP"
while true; do
    case "$1" in
        --remote)
            export REPO_REMOTE=$2
            shift 2
            ;;
        --norebase)
            do_rebase=false;
            shift
            ;;
        -d|--draft)
            where=refs/drafts
            shift
            ;;
        -a)
            shift
            if test "$1" = --; then
                shift
            fi
            for x in "$@"; do
                gerrit -- set-reviewers $(git rev-parse HEAD) -a "$x"
            done
            exit
            ;;
        -n)
            do_fetch=false
            shift
            ;;
        -B)
            export REPO_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)
            shift
            ;;
        -b)
            export REPO_BRANCH=$2
            if test "$REPO_BRANCH" = x; then
                REPO_BRANCH=$(git-choose-branch | perl -npe 's!^\s*remotes/!!; s!.*?/!!')
            fi
            shift 2
            ;;
        -r|--revision)
            rev=$2
            shift 2
            ;;
        -R)
            do_review=false
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if test -z "$REPO_BRANCH"; then
    head_branch=$(git symbolic-ref --short HEAD 2>/dev/null || true)
    if test "$head_branch"; then
        merge_head=$(git config branch.$head_branch.merge)
        if test "$merge_head" -a "$merge_head" != $head_branch -a "$merge_head" != refs/heads/$head_branch; then
            head_branch=$merge_head
        fi
    fi
    if test "$head_branch" && yes-or-no-p -y "use $head_branch as the target branch for review?"; then
        export REPO_BRANCH=$head_branch
        export REPO_REMOTE=$(git rev-parse --abbrev-ref HEAD@{upstream} | perl -npe 's!/.*!!')
    fi
fi

if test $do_fetch = true; then
    echo git fetching remote: $(repo-remote), branch: $(repo-branch)
    if test -z "$(lookup-file -e .repo)"; then
        git fetch -n -v $(repo-remote) $(repo-branch)
    else
        repo sync -c -n . || git fetch -n origin
    fi
    echo git fetch done
fi

if test $do_rebase = true && ! git-is-ancestor $(repo-remote-branch) HEAD; then
    if true; then
        git rebase $(repo-remote-branch) ||
        die "Rebase failed"
    else
        die "Not fast-forward push is not allowed"
    fi
fi

reviewers=()
if test $# = 0; then
    if true; then
        set -- $(git config user.email)
    else
        die "Error: Usage $(basename $0) REVIEWER..."
    fi
fi

while test $# -gt 0; do
    reviewers=("${reviewers[@]}" "$(echo "${1%@*}"|perl -npe 's/.*<//')")
    shift
done


# git pull ssh://hjbao@bear:29418/android/platform/external/rayzerlink-tools refs/changes/74/474/1
export REMOTE=$( (repo-review-url|perl -npe 's!:8080/r/!:/!') )

if is-tty-io && test $do_review = true; then
    (
        cd $(dirname $(lookup-file -e .git))
        FOR_REVIEW=true git-interactive-add
    )
fi

(
    echo git push $REMOTE "$rev":$where/`repo-branch`
    git push --no-thin --receive-pack="$(
            echo -n 'git receive-pack ';
            for x in "${reviewers[@]}"; do
                echo -n "--reviewer=$x "
            done)" $REMOTE "$rev":$where/`repo-branch` 2>&1 |
        grep -v 'x11 forwarding' -i |
        perl -npe '
    if (m,http://bear/gerrit/(\d+),) {
        system("putclip", "git", "pull", $ENV{REMOTE},
               "refs/changes/" . substr($1, -2) . "/$1/1");
    }'
    echo
    echo '* git commit message:'
    echo
    git log -1 "$rev"
) | perl  -npe 's/\033\[./ /g' |tr '\r' '\n'| tee /dev/tty ~/.cache/system-config/logs/gerrit-review.log.$$

set +x
echo push ok.

(
    cd $(dirname $(lookup-file .git))
    set -e
    test -e .git
    if test -e .gerrit-hooks; then
        echo gerrit hooks found, push for review.
        bash .gerrit-hooks push-for-review
    fi
)

mv ~/.cache/system-config/logs/gerrit-review.log.$$ ~/.cache/system-config/logs/gerrit-review.log
