#!/bin/bash

if echo $SHELLOPTS | grep -q xtrace; then
    export SHELLOPTS
fi
set -e

set -o pipefail
function die() {
    echo "$@"
    exit -1
}

rev=HEAD

head_branch=
TEMP=$(getopt -o dnBb:r:Rac --long draft,revision:,norebase,remote: -n $(basename $0) -- "$@")
do_fetch=true
do_commit=-n
do_rebase=true
do_review=true
where=refs/for
eval set -- "$TEMP"
while true; do
    case "$1" in
        -c)
            do_commit=-y
            shift
            ;;
        --remote)
            export REPO_REMOTE=$2
            shift 2
            ;;
        --norebase)
            do_rebase=false;
            shift
            ;;
        -d|--draft)
            where=refs/drafts
            shift
            ;;
        -a)
            shift
            if test "$1" = --; then
                shift
            fi
            for x in "$@"; do
                gerrit -- set-reviewers $(git rev-parse HEAD) -a "$x"
            done
            exit
            ;;
        -n)
            do_fetch=false
            shift
            ;;
        -B)
            export REPO_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)
            shift
            ;;
        -b)
            export REPO_BRANCH=$2
            if test "$REPO_BRANCH" = x; then
                REPO_BRANCH=$(git-choose-branch | perl -npe 's!^\s*remotes/!!; s!.*?/!!')
            fi
            shift 2
            ;;
        -r|--revision)
            rev=$2
            shift 2
            ;;
        -R)
            do_review=false
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if git status -s | grep -q . && yes-or-no-p -y "你的git仓储还有改动，是否要退出？"; then
    echo
    echo 以下是尚未提交的改动，请先提交再重试 $0 "$@"
    git status -s
    exit
fi

function confirm-with-repo() {
    if ! yes-or-no-p -y "根据repo manifest.xml计算出你的remote是 $(repo-remote) ，远程分支是 $(repo-branch)，确认？"; then
        die "不知道如何自动帮你提交review，请自己确定远程名、分支名，然后运行 git push 远程名 HEAD:refs/for/分支名"
    fi
}

if test -z "$REPO_BRANCH"; then
    head_branch=$(git symbolic-ref --short HEAD 2>/dev/null || true)
    merge_head=
    if test "$head_branch"; then
        merge_head=$(git config branch.$head_branch.merge | perl -npe 's!^refs/heads/!!' || true)
        if test -z "$merge_head"; then
            if test "$(repo-remote)" -a "$(repo-branch)"; then
                hint "你的本地分支 $head_branch 没有对应的远程服务器分支，但你的git仓储是一个repo仓储，将使用repo manifest.xml里提供的信息决定要push的远程目标分支名称"
                head_branch=
                merge_head=
            fi
        fi
        export REPO_REMOTE=$(git config branch.$head_branch.remote)
        if test "$merge_head" -a "$merge_head" != "$head_branch" -a "$merge_head" != refs/heads/$head_branch; then
            head_branch=$merge_head
        fi
    fi
    if test "$head_branch" && yes-or-no-p -y "你的git设置了远程跟踪分支 $head_branch ，是否要push到此分支？"; then
        export REPO_BRANCH=$head_branch
        if test -z "$REPO_REMOTE" -a -z "$merge_head"; then
            export REPO_REMOTE=$(git rev-parse --abbrev-ref HEAD@{upstream} | perl -npe 's!/.*!!')
        fi
    else
        confirm-with-repo
    fi
fi

if test $do_fetch = true; then
    echo git fetching remote: $(repo-remote), branch: $(repo-branch)
    if test -z "$(lookup-file -e .repo)" || [[ $PWD =~ /\.repo/manifests ]]; then
        git fetch -n -v $(repo-remote) $(repo-branch)
    else
        git fetch -n $(repo-remote) $(repo-branch) || repo sync -c -n $(repo-project) || git fetch -n origin
    fi
    echo git fetch done
fi

if test $do_rebase = true && ! git-is-ancestor $(repo-remote-branch) HEAD >/dev/null 2>&1; then
    if yes-or-no-p -y "远程有提交，需要先rebase到远程，自动处理？"; then
        git rebase $(repo-remote-branch) ||
        die "Rebase failed"
    else
        die "Not fast-forward push is not allowed"
    fi
fi

n_commits=$(git log $(repo-remote-branch)..HEAD --pretty=%H|wc -l)

if test "$n_commits" = 0; then
    echo 你的本地仓储没有改动需要提交到远程服务器
    exit 0
fi
if test "$n_commits" != 1; then
   if ! yes-or-no-p -y "你要一次提交多个（$n_commits个）patch，确认？"; then
       die "请确认自己是否要提交多个patch"
   fi
fi

reviewers=()
if test $# = 0; then
    if true; then
        set -- $(git config user.email)
    else
        die "Error: Usage $(basename $0) REVIEWER..."
    fi
fi

while test $# -gt 0; do
    reviewers=("${reviewers[@]}" "$(echo "${1%@*}"|perl -npe 's/.*<//')")
    shift
done


# git pull ssh://hjbao@bear:29418/android/platform/external/rayzerlink-tools refs/changes/74/474/1
export REMOTE=$( (repo-review-url|perl -npe 's!:8080/r/!:/!') )

if is-tty-io && test $do_review = true && yes-or-no-p -y "在请别人review之前，要不要先自己本地review一下（加-R参数可以跳过此提示）"; then
    (
        cd $(dirname $(lookup-file -e .git))
        FOR_REVIEW=true git-interactive-add
    )
fi

if is-jenkins && test "$molCM"; then
    atexit() {
        if test "$?" != 0; then
            cat ~/.cache/system-config/logs/gerrit-review.log.$$ | mail-cms -i "Gerrit-push-review failed in $PWD @ $(jenkins-info)"
        fi
    }

    trap atexit 0
fi

for try in $(seq 1 10); do
    if ! (
            if [[ "$(git log --pretty=%ae -1 "$rev")" =~ cmbuild@ ]] && test "$SMARTCM_ALLOW_CMBUILD_AUTHOR" != true; then
                die "Must not push with author as cmbuild@"
            fi
            echo git push $REMOTE "$rev":$where/`repo-branch`
            if ! git push --no-thin --receive-pack="$(
                echo -n 'git receive-pack ';
                for x in "${reviewers[@]}"; do
                    echo -n "--reviewer=$x "
                done)" $REMOTE "$rev":$where/`repo-branch` 2>&1; then
                exit 1
            fi
            echo
            echo '* git commit message:'
            echo
            git log -1 "$rev"
        ) | perl  -npe 's/\033\[./ /g' |tr '\r' '\n'| tee ~/.cache/system-config/logs/gerrit-review.log.$$; then
        if grep -q 'internal error while processing changes\|(Synchronous hook timed out' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            echo There is an error, need retry git push...
            sleep 5
        elif grep -q '(no new changes' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            if yes-or-no-p -y "你的改动之前已经提交过gerrit review，是否继续（进行gerrit-do-review）？"; then
                break
            else
                exit 1
            fi
        fi
    else
        break
    fi
done

if ! is-jenkins; then
    set +x
fi
echo push ok.

(
    cd $(dirname $(lookup-file .git))
    set -e
    test -e .git
    if test -e .gerrit-hooks; then
        echo gerrit hooks found, push for review.
        bash .gerrit-hooks push-for-review
    fi
)

mv ~/.cache/system-config/logs/gerrit-review.log.$$ ~/.cache/system-config/logs/gerrit-review.log

if yes-or-no-p $do_commit "Do review now?"; then
    gerrit-do-review
fi
