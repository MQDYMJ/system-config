#!/usr/bin/env perl

use strict;

use Getopt::Long;
my $diff_rev;
GetOptions(
    "r!" => \$diff_rev,
    );

my $f1 = shift @ARGV;
my $f2 = shift @ARGV;

my %path_project_map1;
my %path_project_map2;

my %path_revision_map1;
my %path_revision_map2;

my $def_revision1;
my $def_revision2;

open(my $RevF1, "-|", "repo-xml-sel -t -m //default -v \@revision -n $f1") or die "Error opening $f1\n";
while (<$RevF1>) {
    chomp;
    $def_revision1 = $_ if $_;
}

open(my $RevF2, "-|", "repo-xml-sel -t -m //default -v \@revision -n $f2") or die "Error opening $f2\n";
while (<$RevF2>) {
    chomp;
    $def_revision2 = $_ if $_;
}

open(my $F1, "-|", "repo-xml-sel -t -m //project -v \@path -o '=' -v \@name -o '=' -v \@revision -n $f1") or die "Error opening $f1\n";

while (<$F1>) {
    next unless m/^(.*?)\s*=\s*(.*)\s*=\s*(\S*)$/;
    my ($path, $project, $revision) = ($1, $2, $3);
    if (not $path) {
        $path = $project;
    } elsif (not $project) {
        $project = $path;
    }

    $path_project_map1{$path} = $project;
    $path_revision_map1{$path} = $revision || $def_revision1;
}
close $F1;

open(my $F2, "-|", "repo-xml-sel -t -m //project -v \@path -o '=' -v \@name -o '=' -v \@revision -n $f2") or die "Error opening $f2\n";
while (<$F2>) {
    next unless m/^(.*?)\s*=\s*(.*)\s*=\s*(.*)$/;

    my ($path, $project, $revision) = ($1, $2, $3);
    if (not $path) {
        $path = $project;
    } elsif (not $project) {
        $project = $path;
    }

    $path_project_map2{$path} = $project;
    $path_revision_map2{$path} = $revision || $def_revision2;
}
close $F2;


for my $path (sort keys %path_project_map1) {

    if ($path_project_map1{$path} eq $path_project_map2{$path}) {
        if (not $diff_rev) {
            delete $path_project_map2{$path};
            next;
        }
    }

    my $rev1 = $path_revision_map1{$path};
    my $rev2 = $path_revision_map2{$path};

    if ($rev1) {
        $rev1 = " revision=\"$rev1\"";
    }

    if ($rev2) {
        $rev2 = " revision=\"$rev2\"";
    }

    if (exists($path_project_map2{$path})) {
        if ($path_project_map1{$path} eq $path_project_map2{$path} and
            $rev1 == $rev2) {
            delete $path_project_map2{$path};
            next;
        }
        printf('1: <project path="%s" name="%s"%s/> <=> 2: <project path="%s" name="%s"%s/>' . "\n", $path, $path_project_map1{$path}, $rev1, $path, $path_project_map2{$path}, $rev2);
    } else {
        printf('1: <project path="%s" name="%s"%s />' . "\n", $path, $path_project_map1{$path}, $rev1);
    }
    delete $path_project_map2{$path};
}

for my $path (sort keys %path_project_map2) {
    my $rev2 = $path_project_map2{$path};
    if ($rev2) {
        $rev2 = " revision=\"$rev2\"";
    }

    printf('2: <project path="%s" name="%s"%s />' . "\n", $path, $path_project_map2{$path}, $rev2);
}
