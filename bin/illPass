#!/bin/bash

umask 0077
if false; then
    set -ex
    exec 2> ~/tmp/illPass.log
fi

export EMACS=t
window_class=$(sawfish-top-window-class)
window_name=$(sawfish-top-window-name)

sawfish-window mark -t illPass -s

window_class=${window_class,,}
window_name=${window_name,,}

add_newline_and_notify=false

if test "${window_name}" = myscr -a "${window_class}" = xterm; then
    add_newline_and_notify=true
    who_and_where=$(
        tmux capture-pane; tmux save-buffer - | reverse | grep '(\S+@\S+)\s' -o -P | head -n 1|tr -d ' '
                 )
    if test "${who_and_where}"; then
        window_class=${who_and_where#*@}
        window_name=${who_and_where%@*}
    fi
fi

IFS=$'\n'
passwords=$(
    cd ~/.password-store/
    find "${window_class}/${window_name}" -type f|perl -pe 's,\.gpg$,,'
         )

declare -A password_map
for password in ${passwords}; do
    password_map[$password]=1
done

extra_options=(
    "请选择你想要使用的密码，此处显示的是按照你的窗口上下文匹配出来的密码"
    "也可以输入「[*+]密码名字或片断」!<return>来强制使用(*)或新增(+)一个密码"
)

is-extra-options() {
    for x in "${extra_options[@]}"; do
        if test "$x" = "$1"; then
            return 0
        fi
    done
    return 1
}


which_password=$(select-args -o -p "Which password do you want to use?" $passwords "${extra_options[@]}")

if test "${password_map[$which_password]}" != 1; then
    if is-extra-options "${which_password}"; then
        hint "这是一个帮助用的提示选项，选它不会执行任何操作，请重试"
        exit 0
    elif [[ $which_password =~ ^\* ]]; then
        abbrev=${which_password:1}
        which_password=$(
            cd ~/.password-store
            select-output-line -1 -p "请选择、确认你想使用的密码" find ./ -name .git -prune -o -type f -path "*$abbrev*.gpg" -print | perl -pe 's,\.gpg$,,'
                      )
    elif [[ $which_password =~ ^\+ ]]; then
        if ! [[ $which_password =~ / ]] && yes-or-no-p -y "你输入的密码名字不包含目录，使用 ${window_class}/${window_name} 作为父目录？"; then
            which_password="${window_class}/${window_name}/${which_password}"
        fi

        if yes-or-no-p -y "生成一个随机密码？"; then
            pass generate "$which_password" 12
        fi
        pass edit $which_password
        sawfish-window mark -t illPass -r
    fi
fi

password=$(
    pass "${which_password}"
        )

if test ${#password} -gt 20 || [[ $password =~ $'\n' ]]; then
    bhj-notify illPass "Bad password: $password"
    hint "You have inputed a very long password, will now exit"
    exit
fi

xdotool-when-keyboard-clear type "${password}"

if test "${add_newline_and_notify}" = true; then
    xdotool-when-keyboard-clear type $'\n'
    bhj-notify illPass "Have inputed your password!"
fi
