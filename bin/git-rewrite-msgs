#!/bin/bash

set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

## start code-generator "^\\s *#\\s *"
    # generate-getopt '?"$b0 OPTIONS REV1 [REV2]"' \
        # s:start-with=1 '?"start reworking with which commit (in reverse order, 1 means the oldest patch)"' \
        # 1one-by-one
## end code-generator
## start generated code
TEMP=$( getopt -o 1s:h \
               --long one-by-one,start-with:,help,no-one-by-one \
               -n $(basename -- $0) -- "$@")
declare one_by_one=false
declare start_with=1
eval set -- "$TEMP"
while true; do
    case "$1" in

        -1|--one-by-one|--no-one-by-one)
            if test "$1" = --no-one-by-one; then
                one_by_one=false
            else
                one_by_one=true
            fi
            shift

            ;;
        -s|--start-with)
            start_with=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "$b0 OPTIONS REV1 [REV2]"
            echo
            echo Options and arguments:
            printf %06s '-1, '
            printf %-24s '--[no-]one-by-one'
            echo
            printf %06s '-s, '
            printf %-24s '--start-with=START_WITH'
            echo "start reworking with which commit (in reverse order, 1 means the oldest patch)"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


if test $# = 0; then
    set -- $(
        git log --pretty=%H $(repo-remote-branch)..HEAD | reverse | head -n ${start_with:-1} | tail -n 1
        )
    hint "Will start reworking with $(
echo
git log -1 --name-status $1
)"
fi

if test $# = 1; then
    set -- $1 HEAD
fi

set -- $(git rev-parse $1) $(git rev-parse $2)

export last_rev=$2

if test $# != 2; then
    die "Usage: $(basename $0) START_REV END_REV(default to HEAD)"
fi

export list=$(git rev-list $1..$2|reverse)

git reset --hard $1
if test $(basename $0) = git-rework-change; then
    start_recursive_shell "Rework commit $1" || true
    if test "${one_by_one}" = true; then
        for x in $list; do
            export $WORKING_REV=$x
            git cherry-pick $x || start_recursive_shell "cherry-pick $x failed" || true
            start_recursive_shell "done cherry-pick $x, please check" || true
        done
    else
        git cherry-pick $1..$2
    fi
    exit
fi

for x in $list; do
    export WORKING_REV=$x
    git commit --amend
    git cherry-pick $x || start_recursive_shell "cherry-pick $x failed" || true

    if test "${one_by_one}" = true; then
        start_recursive_shell "done cherry-pick $x, please check" || true
    fi
done
git commit --amend
