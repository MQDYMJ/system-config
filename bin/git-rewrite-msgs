#!/bin/bash

set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt s:start-with=1 '?"start reworking with which commit (in reverse order, 1 means the oldest patch)"'
## end code-generator
## start generated code
TEMP=$( getopt -o s:h \
               --long start-with:,help \
               -n $(basename -- $0) -- "$@")
declare start_with=1
eval set -- "$TEMP"
while true; do
    case "$1" in

        -s|--start-with)
            start_with=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-s, '
            printf %-24s '--start-with=START_WITH'
            echo "start reworking with which commit (in reverse order, 1 means the oldest patch)"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


if test $# = 0; then
    set -- $(
        git log --pretty=%H $(repo-remote-branch)..HEAD | reverse | head -n ${start_with:-1} | tail -n 1
        )
    hint "Will start reworking with $(
echo
git log -1 --name-status $1
)"
fi

if test $# = 1; then
    set -- $1 HEAD
fi

set -- $(git rev-parse $1) $(git rev-parse $2)

if test $# != 2; then
    die "Usage: $(basename $0) START_REV END_REV(default to HEAD)"
fi

export list=$(git rev-list $1..$2|reverse)

git reset --hard $1
if test $(basename $0) = git-rework-change; then
    start_recursive_shell "Rework commit $1" || true
    git cherry-pick $1..$2
    exit
fi

for x in $list; do
    export WORKING_REV=$x
    git commit --amend
    git cherry-pick $x || start_recursive_shell "cherry-pick $x failed" || true
done
git commit --amend
