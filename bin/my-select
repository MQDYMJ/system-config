#!/usr/bin/perl

use strict;

sub echo(@) {
    print "@_\n";
}

sub debug(@) {
    print STDERR "@_\n";
}

my $tty;
if ($ENV{EMACS}) {
    $tty = "";
} else {
    open ($tty, ">", "/dev/tty") or $tty = "";
}

my $accrue_prompt = "$ENV{ORIGINAL_MATCHER}";
if ($accrue_prompt) {
    $accrue_prompt = "$accrue_prompt\n";
}
sub tty(@) {
    if ($tty) {
        print $tty "@_";
    } else {
        $accrue_prompt .= "@_";
    }
}

sub read_ans($) {
    my ($prompt) = @_;
    unless ($prompt =~ '\s$') {
        $prompt .= " ";
    }
    if (not $tty) {
        tty "$prompt";
    }
    my $ans;
    if ($tty) {
        $ENV{BASH_READ_PROMPT} = $prompt;
        my $cmd = qq(bash -c 'read -e -p "\$BASH_READ_PROMPT"; echo -n \$REPLY');
        chomp($ans = qx($cmd));
    } else {
        my @accrue_prompt = split("\n", $accrue_prompt);
        if (@accrue_prompt > 20) {
            my $n_items = @accrue_prompt - 1;
            @accrue_prompt = (@accrue_prompt[0..19], "... ($n_items total)", $accrue_prompt[-1]);
        }
        my $sawfish_prompt = join("\n", @accrue_prompt);
        use String::ShellQuote;
        $sawfish_prompt = shell_quote($sawfish_prompt);
        chomp($ans = qx(ask-for-input-with-sawfish -p $sawfish_prompt));
    }

    $accrue_prompt = "";
    return $ans;
}

my @original_argv = @ARGV;
@ARGV = ();

sub find_in_original_argv($) {
    my ($entry) = @_;

    my $count = 1;
    for (@original_argv) {
        if ($entry eq $_) {
            echo $count;
            exit 0;
        }
        $count++;
    }
}

sub my_select(\@) {
    my ($args_ref) = @_;

    if (@$args_ref == 1) {
        find_in_original_argv($$args_ref[0]);
        return;
    }

    unless ($ENV{ORIGINAL_MATCHER}) {
        my $count = 1;
        foreach (@$args_ref) {
            tty "$count) $_\n";
            $count++;
        }
    }

    my $ans;
    my $got_ans_from_env = 0;
    if ($ENV{ORIGINAL_MATCHER}) {
        $ans = $ENV{ORIGINAL_MATCHER};
        $ENV{ORIGINAL_MATCHER} = "";
        $got_ans_from_env = 1;
    } else {
        $ans = read_ans ($ENV{SELECT_PROMPT} or '#? ');
    }

    if (not $ans or $ans =~ m/^\d+$/ and $ans > @$args_ref) {
        find_in_original_argv($$args_ref[0]);
    } elsif ($ans =~ m/^\d+$/) {
        find_in_original_argv($$args_ref[$ans - 1]);
    } else {
        my @matches;

        my @matchers = split(" ", $ans);
        my %matchers;
        for (@matchers) {
            $matchers{$_} = {};

            if ($_ =~ m/^!/) {
                my $re = substr($_, 1);
                $matchers{$_}{"qr"} = qr($re)i;
                $matchers{$_}{"reverse"} = 1;
            } else {
                $matchers{$_}{"qr"} = qr(\Q$_\E)i;
                $matchers{$_}{"reverse"} = 0;
            }
        }

        for my $entry (@$args_ref) {
            my $matched = 1;

            for my $matcher_ref (keys %matchers) {
                my $matcher = $matchers{$matcher_ref}{"qr"};
                my $reverse = $matchers{$matcher_ref}{"reverse"};
                if ($entry =~ m/$matcher/) {
                    if ($reverse) {
                        $matched = 0;
                        last;
                    }
                } elsif (not $reverse) {
                    $matched = 0;
                    last;
                }
            }
            if ($matched) {
                push @matches, $entry;
            }
        }

        if (@matches == 1) {
            find_in_original_argv($matches[0]);
        } elsif (@matches) {
            my_select(\@matches);
        } else {
            if ($got_ans_from_env) {
                exit -1;
            }
            my $saved_ans = $ans;
            if ($ans =~ m/!$/) {
                $ans =~ s/!$//;
                print $ans;
                exit;
            }

            while (1) {
                if ($ans =~ m/\003/) {
                    kill "TERM", getppid();
                    exit;
                }
                $ans = read_ans "Warning: no matches found for $ans,\ntype -<return> to go back or type !<return> to return $saved_ans";
                if ($ans eq '!') {
                    print $saved_ans;
                    exit;
                } elsif ($ans eq '-') {
                    my_select($args_ref);
                    last;
                }
            }
        }
    }
}

my_select @original_argv;
