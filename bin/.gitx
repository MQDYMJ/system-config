#!/bin/bash
if test -z "$SSH_AUTH_SOCK" -a -e ~/.config/system-config/ssh-agent; then
    . ~/.config/system-config/ssh-agent
fi

function git_svn() {
    if test $# = 1; then
        should_return=1
        case "$1" in
            fetch)
                command git svn fetch
                ;;
            pull)
                command git svn rebase
                ;;
            push)
                command git svn dcommit
                ;;
            *)
                should_return=0
                ;;
        esac
        if test $should_return = 1; then
            return
        fi
    fi

    case "$1" in
        st)
            NO_SVN_CHECK=true git "$@"
            return;
            ;;
        pull)
            if test $# = 2 -a "$2" = --rebase; then
                command git svn rebase
                return
            fi
            ;;
        push)
            if test "$2" = origin; then
                command git svn dcommit
                return
            fi
            ;;
        diff)
            args=()
            for x in "$@"; do
                if test "$x" = origin/master; then
                    x=git-svn
                fi
                args=("${args[@]}" "$x")
            done
            set -- "${args[@]}"
            command git "$@"
            return
            ;;
    esac
    NO_SVN_CHECK=true git "$@"
}

function git()
{
    if test "$#" = 1 -a "$1" = st -a "$WORKING_REV"; then
        git log -p -1 "$WORKING_REV"
    fi

    if test $# = 1 -a "$1" = st -a ! -e .git; then
        echo only stat the current folder 1>&2
        set -- st .
    fi

    if test $# = 2 -a "$1" = st -a "$2" = ..; then
        echo stat the whole directory
        command git st
        return
    fi

    if test $# = 1 -a "$1" = diff; then
        set -- diff -w
    fi

    if test "$1" = export; then
        command git archive --output "$3" "$2"
        return $?
    fi

    if test $# = 1 -a "$1" = cherry-pick; then
        set -- cherry-pick $(select-output-line 'git reflog | head -n 20' | pn 1)
    fi

    if test "$NO_SVN_CHECK" != true && command git config svn-remote.svn.url | grep -q .; then
        git_svn "$@"
        return $?
    fi

    (
        builtin cd -P .
        if test "$(readlink -f .)" = "$(readlink -f ~)" -a "$1" != clone ||
            test "$(readlink -f .)" = "$(readlink -f ~/system-config/)"
        then
            cd ~/system-config/;
            if test "$1" = st -a "$2" != -S; then
                for x in ~/src/github/*; do
                    if test -d $x -a ! -L $x -a -e $x/.git; then
                        (
                            cd $x

                            y=$(git st -s)
                            if test "$y"; then
                                echo $x not clean 1>&2
                                git st -s
                                echo ---------------- 1>&2
                                exit 0
                            fi
                            y=$(git diff --name-status $(git-remote-branch))
                            if test "$y"; then
                                echo $x not clean with $(git-remote-branch) 1>&2
                                git diff --name-status $(git-remote-branch)
                                echo ---------------- 1>&2
                            fi
                        )
                    fi
                done
            fi

            if test "$1" = submodule -a "$2" = foreach -a $# = 3; then
                for x in ~/src/github/*; do
                    if test -d $x -a ! -L $x -a -d $x/.git; then
                        (
                            cd $x
                            bash -c "$3"
                        )
                    fi
                done
            fi
        fi

        if test "$1" = st -a "$2" = -S; then
            command git status -s | perl -ne '
chomp();
if (m/^..."/) {
    s/(".*?")/eval($1)/ge;
}
print $_ . "\n";
'
          exit
        fi
        if test "$1" = clean; then
            where=
            if test $# = 2 -o $# = 1; then
                where=.
            fi
            if command git st -s $where | grep '??'; then
                echo Warning: git not clean, will not clean it
                if yes-or-no-p -n "Continue?"; then
                    true;
                else
                    echo Please use: command git clean -xfd
                    exit -1
                fi
            fi
        fi
        if test $# = 1 -a "$1" = co; then
            git co "$(select-output-line 'git reflog | head -n 20' | pn 1)"
            exit
        fi

        if test "$#" = 1 -a "$1" = reset-files-to-rev; then
            x=$(select-output-line 'git reflog | head -n 20' | pn 1)
            git ls-tree --name-only HEAD | xargs -d \\n git rm -rf
            git co "$x" -- .
            git commit -m "$(git log --pretty="%B" "$x" -1)"
            exit
        fi

        if test $# = 2 -a "$1" = co -a "$2" = -B; then
            git co -B "$(git-choose-branch remotes/ )"
            exit
        fi
        if test $# = 3 -a "$1" = co -a "$2" = -B; then
            git co -B $(echo $3|perl -npe 's!^remotes/!!; s!^[^/]+/!!') $3
            exit
        fi

        if test "$1" = co -a $# = 2; then
            command git "$@" || {
                git fetch -v $(repo-remote) || true
                git co $(git-choose-branch "$2")
            }
            exit
        fi

        if test "$1" = fetch -a $# = 1; then
            command git fetch $(select-output-line -o -m 1 git remote)
            exit
        fi

        if test "$1" = fetch -a "$#" = 2; then
            if test "$2" = ?; then
                set -- "$1" $(git-choose-branch)
            fi
            if [[ "$2" =~ ^remotes/ ]]; then
                remote=$(echo "$2" | perl -npe 's!remotes/!!; s!/.*!!')
                branch=$(echo "$2" | perl -npe 's!remotes/.*?/!!;')
                command git fetch $remote $branch:$branch
                exit
            fi
        fi

        if test "$1" = commit; then
            if test "$(arg1-arg2 -s "$@")" = -s && yes-or-no-p -y "Add signed-off-by?"; then
                shift
                set -- commit -s "$@"
            fi
        fi

        command git "$@"
    )

}
