#!/bin/bash

set -e

jobs=5
dirs=()
export path_pattern=
debug=0

if test "$1" = "repo-changes?"; then
    shift;
    set -- repo-changes.log "$@"
fi

if test -f "$1" -a "${1##*/}" = repo-changes.log; then
    echo "Warning: should add -d" 1>&2
    set -- -d "$@"
fi

TEMP=$(getopt -o xd:j:p: -n $(basename $0) -- "$@")
function die() {
    echo "$@"
    exit -1
}

export -f die
function locked-echo() {
    (
        exec 9> ~/.cache/system-config/logs/my-rfa.lock
        flock 9
        echo "$@"
    )
}
export -f locked-echo
function parallel-xargs() {
    set -- "${cmds[@]}"
    xargs -d \\n -P $jobs -I %N bash -c "cd %N; ""$(
    if test $# = 1; then
        echo "$@"
    else
        for x in "$@"; do printf '%q ' "$x"; done
    fi
)" true
}

eval set -- "$TEMP"
while true; do
    case "$1" in
        -x)
            debug=1
            shift
            ;;
        -j)
            jobs=$2
            shift 2
            ;;
        -d)
            dirs=("${dirs[@]}" "$2")
            shift 2
            ;;
        -p)
            path_pattern=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if test ! -e "$(lookup-file -e .repo/manifest.xml)"; then
    cd $(dirname $(lookup-file -e .git))
    export cmds=("$@")
    export ANDROID_TOP=$(readlink -f ..)
    echo $PWD | parallel-xargs
    exit
fi

if test "${#dirs[@]}" = 0; then
    dirs=(
        $(
            if test -d .repo; then
                redo_path=false;
                if test ! -e .repo/repo-paths -o .repo/manifest.xml -nt .repo/repo-paths; then
                    redo_path=true;
                fi
                if test -e .repo/repo-paths && grep ' ' -q .repo/repo-paths; then
                    redo_path=true;
                fi
                if test -e .repo/repo-paths && test $(stat -c %s .repo/repo-paths) = 0; then
                    redo_path=true
                fi

                if test $redo_path = true; then
                    if test "$(cd .repo/manifests.git; git config repo.mirror)" != true; then
                        xmlstarlet sel -t -m //project -v @path -o ' ' -v @name -n .repo/manifest.xml
                    else
                        xmlstarlet sel -t -m //project -v @name -o '.git' -o ' ' -v @name -o '.git' -n .repo/manifest.xml
                    fi | while read dir name; do
                             if test -d "$dir"; then
                                 echo $dir
                             fi
                         done > .repo/repo-paths.$$
                    mv .repo/repo-paths.$$ .repo/repo-paths
                fi
                cat .repo/repo-paths | sort -u
            else
                pwd
            fi
        )
    )
else
    dirs=(
        $(
            cd $(lookup-file -e .repo/..)
            for x in "${dirs[@]}"; do
                if test -d "$x"; then
                    if test -d "$x"/.git; then
                        echo "$x"
                    else
                        repo forall "$(ap "$x")" -c 'echo $REPO_PATH'
                    fi
                elif test -f "$x"; then
                    cat "$x" | pn 1 | sort -u
                else
                    die "Error: not a dir: $x"
                fi
            done
        )
    )
fi
job=0

cd $(lookup-file .repo/..)
test -d .repo

export ANDROID_TOP=$(pwd)

(cd .repo; make -f ~/system-config/etc/generate-repo-info.mk) >/dev/null 2>&1
export REPO_INFO=$(pwd)/.repo/repo_info.pl

function die() {
    echo "$@"
    exit -1
}

export -f die
mkdir -p ~/.cache/system-config/logs/my-rfa-locks

export cmds=("$@")
for x in "${dirs[@]}"; do
    echo "$x"
done | parallel-xargs
exit
