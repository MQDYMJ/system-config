#!/usr/bin/perl

# 这个脚本会把两个 CSV 文件用类似 sql join 的操作合并成一个。使用时除
# 指定两个 csv 文件之外，还需要指定一个 column name，这个列名必须是两
# 个 csv 文件共有的。


# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |col1 |col2 |col3 |  |col1 |col4 |col5 |        |col1 |col2 |col3 |col4 |col5 |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |3.14 |x    |y    |  |3.14 |X    |Y    |   =>   |3.14 |x    |y    |X    |Y    |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |1.00 |a    |b    |  |1.00 |A    |B    |        |1.00 |a    |b    |A    |B    |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+


use Text::CSV qw(csv);
use strict;
use String::ShellQuote;


## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:input-csv o:output-csv
## end code-generator
## start generated code
use Getopt::Long;

my $input_csv = "";
my $output_csv = "";

GetOptions (
            'input-csv|i=s' => \$input_csv,
            'output-csv|o=s' => \$output_csv,
            'help|h!' => \&handler_help,
           );



sub handler_help {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-i, ';
  printf "%-24s", '--input-csv=INPUT-CSV';
  if (length('--input-csv=INPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-o, ';
  printf "%-24s", '--output-csv=OUTPUT-CSV';
  if (length('--output-csv=OUTPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
}

## end generated code


my @hdr;
my $csv = csv (in => csv(in => "$input_csv", keep_headers => @hdr),
               out => ($output_csv or "$input_csv"),
               headers => \@hdr
              )
    or die "Cannot use CSV: ".Text::CSV->error_diag ();
