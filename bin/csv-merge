#!/usr/bin/perl

# 这个脚本会把两个 CSV 文件用类似 sql join 的操作合并成一个。使用时除
# 指定两个 csv 文件之外，还需要指定一个 column name，这个列名必须是两
# 个 csv 文件共有的。


# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |col1 |col2 |col3 |  |col1 |col4 |col5 |        |col1 |col2 |col3 |col4 |col5 |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |3.14 |x    |y    |  |3.14 |X    |Y    |   =>   |3.14 |x    |y    |X    |Y    |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+
# |1.00 |a    |b    |  |1.00 |A    |B    |        |1.00 |a    |b    |A    |B    |
# +-----+-----+-----+  +-----+-----+-----+        +-----+-----+-----+-----+-----+


use Text::CSV qw(csv);
use strict;
use warnings;
use Carp;
use String::ShellQuote;


## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl 1:input1-csv 2:input2-csv c:common-column o:output-csv
## end code-generator
## start generated code
use Getopt::Long;

my $common_column = "";
my $input1_csv = "";
my $input2_csv = "";
my $output_csv = "";

GetOptions (
            'common-column|c=s' => \$common_column,
            'input1-csv|1=s' => \$input1_csv,
            'input2-csv|2=s' => \$input2_csv,
            'output-csv|o=s' => \$output_csv,
            'help|h!' => \&handler_help,
           );



sub handler_help {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-c, ';
  printf "%-24s", '--common-column=COMMON-COLUMN';
  if (length('--common-column=COMMON-COLUMN') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-1, ';
  printf "%-24s", '--input1-csv=INPUT1-CSV';
  if (length('--input1-csv=INPUT1-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-2, ';
  printf "%-24s", '--input2-csv=INPUT2-CSV';
  if (length('--input2-csv=INPUT2-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-o, ';
  printf "%-24s", '--output-csv=OUTPUT-CSV';
  if (length('--output-csv=OUTPUT-CSV') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
}

## end generated code


my (@hdr1, @hdr2);
my $aoh1 = csv(in => "$input1_csv", keep_headers => \@hdr1);
my $aoh2 = csv(in => "$input2_csv", keep_headers => \@hdr2);

my %column_array_index_map1;
my %column_array_index_map2;

for (@$aoh1) {
  my $common_column_val = $_->{$common_column};
  $column_array_index_map1{$common_column_val} = $_;
}

for (@$aoh2) {
  my $common_column_val = $_->{$common_column};
  my $h1 = $column_array_index_map1{$common_column_val};
  my $h2 = $_;
  for (@hdr2) {
    $h1->{$_} = $h2->{$_};
  }
}

@hdr2 = grep {$_ ne $common_column} @hdr2;

push @hdr1, @hdr2;

my $csv = csv (
    in => $aoh1,
    out => ($output_csv or "$input1_csv"),
    headers => \@hdr1
    )
  or die "Cannot use CSV: ".Text::CSV->error_diag ();
