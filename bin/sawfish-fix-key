#!/usr/bin/env bash

## start code-generator "^\\s *#\\s *"
# generate-getopt -P aall-keys
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o ah \
                      --long all-keys,help,no-all-keys \
                      -n $(basename -- $0) -- "$@")
declare all_keys=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--all-keys|--no-all-keys)
            if test "$1" = --no-all-keys; then
                all_keys=false
            else
                all_keys=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-a, '
            printf %-24s '--[no-]all-keys'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code
if test "$all_keys" = true; then
    sawfish-fix-key \
    $(
        for k in {a..z}; do
            echo C-$k
        done
    )
    exit
fi


if test "$#" = 0; then
    sawfish-help-key
    set -- "$(getclip)"
    bhj-notify sawfish-fix-key "Fix key: $1"
fi

unbind_statements=$(
    for k in "$@"; do
        for m in global-keymap window-keymap; do
            cat <<EOF
; {%sawfish-mode%}
(unbind-keys $m "$k")
; {%/sawfish-mode%}
EOF
        done
    done | grep -v 'sawfish-mode%'
                 )



sawfish_cmd=$(cat <<EOF | . .replace-%% --
; {%sawfish-mode%}
(progn
  <%unbind-statements%>
  )
; {%/sawfish-mode%}
EOF
              )
sawfish-client -e "$sawfish_cmd"
