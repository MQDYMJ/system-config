#!/usr/bin/env perl
use String::ShellQuote;
use strict;

open (my $log_, ">", glob("~/.cache/system-config/logs/edit.log")) or die "Can not open log file";
print $log_ "@ARGV\n";

sub debug(@) {
    print $log_ "@_\n";
    print STDERR "@_\n";
}

if (@ARGV == 3 and $ARGV[1] eq "line" and $ARGV[2] =~ m/^\d+\.?$/) {
    chop $ARGV[0] if $ARGV[0] =~ m/,$/;
    chop $ARGV[2] if $ARGV[2] =~ m/\.$/;
    system("e", "$ARGV[0]:$ARGV[2]");
    exit;
}

if (@ARGV > 1 and $0 =~ m!(^|/)e$!) {
    map {$_ = shell_quote($_)} @ARGV;
    chomp(my $file = qx(select-file-from-where @ARGV));
    @ARGV = ($file);
}

if ($ARGV[0] =~ m/^\+\d+$/) {
  my $line = substr($ARGV[0], 1);
  shift @ARGV;
  $ARGV[0] .= ":$line";
}

my ($myfile) = ($ARGV[0]);
shift @ARGV;
my $remote_ip = $ENV{"REMOTEIP"};

my $protocol = "";
if ($remote_ip) {
  $protocol = qx(get-remote-edit-protocol $remote_ip);
  if ($ENV{REMOTEUSER}) {
      $remote_ip = "$ENV{REMOTEUSER}\@$remote_ip";
  }
}


my @emacsclient = ('emacs.client', '-n');

if ($0 =~ m,/?edit-wait$, or $0 =~ m,/?ew$,) {
  @emacsclient = ('emacs.client');
}

if ($ENV{REMOTEIP} eq "127.0.0.1") {
    @emacsclient = ('emacs', '-nw', '-q');
}

sub get_emacs_file_name($) {
  my ($file) = @_;
  if ($ENV{"REMOTEIP"} and $ENV{REMOTEIP} ne "127.0.0.1") {
    my ($myname, $myip, $myport) = @ENV{"USER", "LOCALIP", "LOCALPORT"};
    if ($protocol eq "pscp") {
      # plink on win7 has a bug, can't handle ip connection, only hostname
      # works
      $myip = qx(ip-hosts $myip);
    }

    if ($myport eq "def") {
        return "/$protocol:$myname\@$myip:$file";
    }
    return "/$protocol:$myname\@$myip#$myport:$file";
  } else {
    return $file;
  }
}

sub edit_1($)
  {
    my $file=$_[0];
    $file =~ s,.*file://,,;

    if (-e $file) {

        if (-e $file) {
            my $file = shell_quote($file);
            chomp($file = qx(readlink -f $file));
            if ($file =~ m!/Maildir/[^/]*/cur/!) {
                debug "working with $file";
                $file = shell_quote($file);
                chomp(my $gnus_link = qx(maildir-get-id $file));
                # $gnus_link = shell_quote($gnus_link);
                if ($gnus_link) {
                    system("find-or-exec emacs");
                    system("emacsclient", "-e", sprintf('(org-open-link-from-string "%s")', $gnus_link));
                    exit 0;
                } else {
                    system("bhj-notify hello 'This mail has no link'")
                }
            }
        }

        if ((! -r $file or ! -w $file) && $ENV{USER} ne "root") {
            my $fileq = shell_quote($file);
            my $user = qx(stat -c %U $fileq);
            my $action ="readable";
            if (-r $file) {
                $action = "writable";
            }
            if ($user ne $ENV{USER} and system("yes-or-no-p -y 'file not $action, use root?'") == 0) {
                system("sudoedit", $file);
                exit;
            }
            if (! -d $file and ! -r $file) {
                exit;
            }
        }

        my $file_q = $file = shell_quote($file);
        chomp($file_q = qx(lookup-file -e -r -- $file));
        if (not $file_q) {
            chomp ($file_q = qx(lookup-file -r -- $file));
        }
        debug "file_q is $file_q";
        return (@emacsclient, get_emacs_file_name($file_q));

    } else {

        debug "file $file not exist";

      # external/opencore/android/mediascanner.cpp:622: error: invalid conversion from ‘const char*’ to ‘char*’
      $file =~ m,^[a|b]/, and $file = substr($file, 2); # for git diff output
      $file =~ m,:$, and chop($file);

      my $line=1;
      $file =~ s,:(\d+)$,, and $line = $1;

      if (`uname` =~ m/cygwin/i) {
        $file = shell_quote($file);
        $file = `cygpath -u $file`;
        chomp($file);
      }

      my $file_q = $file = shell_quote($file);
      chomp($file_q = qx(select-output-line -- lookup-file -e -r -- $file));
      if (not $file_q or not -e $file_q) {
          chomp($file_q = qx(select-output-line -- lookup-file -r -- $file));
      }
      return (@emacsclient, "+$line", get_emacs_file_name($file_q));

    }
  }

if ($remote_ip and $ENV{REMOTEIP} ne "127.0.0.1") {
  my @cmd = edit_1($myfile);
  $cmd[-1] = shell_quote($cmd[-1]);

  my $ssh_cmd = join(" ", @cmd);

  $ssh_cmd = <<EOC;
if test `uname` != Linux; then
    psexec.exe -sid "\$(cygpath -alw "\$(which findexec)")" -t emacs@
fi
$ssh_cmd
EOC
  $ssh_cmd = shell_quote($ssh_cmd);
  print "ssh $remote_ip $ssh_cmd";
  my $remote_port = ($ENV{REMOTEPORT} or 22);
  my $res = system("ssh -o StrictHostKeyChecking=no $remote_ip -p $remote_port $ssh_cmd");
  exit $res unless @ARGV;
} else {
  my @cmd = edit_1($myfile);
  print "will run: ";
  for (@cmd) {
    print "'$_' ";
  }
  print "\n";
  system("find-or-exec emacs emacs.bhj");
  while (1) {
      my $ret = system(@cmd);
      if ($ret != 0) {
          debug "ret is", $ret >> 8, "and", $ret & 0xff;
          if ($ret == 2) {
              die "@cmd got interrupt";
          }
          warn("ret is $ret for @cmd");
          if (system("sleep 5") == 2) {
              die "@cmd got interrupt while sleeping"
          }
      } else {
          last;
      }
  }
}

while (@ARGV) {
    my $arg = shell_quote(shift @ARGV);
    while (system("$0 $arg") != 0) {
        if (system("sleep 1") == 2) {
            die "e $arg got interrupt while sleeping"
        }
    }
}
