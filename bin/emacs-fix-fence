#!/bin/bash

init_text=emacs-fix-fence.$$

## start code-generator "^\\s *#\\s *"
# generate-getopt f:from-mode '?"当前的文件是什么 emacs mode，比如 nxml（jenkins config）"' \
    # t:to-mode '?"想要加 fence 的是什么模式，比如 html（jenkins config descriptions）"' \
    # p:pipe-cmd '?"使用什么 pipe 命令（cat 或 cdata，后者会使用 xmlstarlet unesc -，默认根据 to-mode 配置是否匹配 cdata 自动计算）"' \
    # ssimple-fence '?"用更简短的 fence，比如不用“<![CDATA[<!--start html-->”，只用“<![CDATA[”"' \
    # @:text='"$init_text"' '?"使用指定的文本。若无指定，默认从 stdin 读取文本"'
## end code-generator
## start generated code
TEMP=$( getopt -o f:p:st:h \
               --long from-mode:,pipe-cmd:,simple-fence,text:,to-mode:,help,no-simple-fence \
               -n $(basename -- $0) -- "$@")
declare from_mode=
declare pipe_cmd=
declare simple_fence=false
declare text="$init_text"
declare to_mode=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -f|--from-mode)
            from_mode=$2
            shift 2

            ;;
        -p|--pipe-cmd)
            pipe_cmd=$2
            shift 2

            ;;
        -s|--simple-fence|--no-simple-fence)
            if test "$1" = --no-simple-fence; then
                simple_fence=false
            else
                simple_fence=true
            fi
            shift

            ;;
        --text)
            text=$2
            shift 2

            ;;
        -t|--to-mode)
            to_mode=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-f, '
            printf %-24s '--from-mode=FROM_MODE'
            echo "当前的文件是什么 emacs mode，比如 nxml（jenkins config）"
            printf %06s '-p, '
            printf %-24s '--pipe-cmd=PIPE_CMD'
            echo "使用什么 pipe 命令（cat 或 cdata，后者会使用 xmlstarlet unesc -，默认根据 to-mode 配置是否匹配 cdata 自动计算）"
            printf %06s '-s, '
            printf %-24s '--[no-]simple-fence'
            echo "用更简短的 fence，比如不用“<![CDATA[<!--start html-->”，只用“<![CDATA[”"
            printf "%06s" " "
            printf %-24s '--text=TEXT'
            echo "使用指定的文本。若无指定，默认从 stdin 读取文本"
            printf %06s '-t, '
            printf %-24s '--to-mode=TO_MODE'
            echo "想要加 fence 的是什么模式，比如 html（jenkins config descriptions）"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

declare -A add_at_start
declare -A add_at_end
declare -A pipe_map

unescape-html() {
    xmlstarlet unesc - | tr -d \\r
}

add_at_start[nxml-bash]='<![CDATA[#!/bin/bash'
add_at_end[nxml-bash]='#!end-of-fence]]>'

add_at_start[nxml-bash-simple]='<![CDATA['
add_at_end[nxml-bash-simple]=']]>'

for t in sh sh-simple; do
    add_at_start[$t]=${add_at_start[nxml-ba$t]}
    add_at_end[$t]=${add_at_end[nxml-ba$t]}
done

add_at_start[nxml-html]='<![CDATA[<!--start html-->
'
add_at_start[nxml-html-simple]='<![CDATA['

add_at_end[nxml-html]="<!--end html-->
]]>"
add_at_end[nxml-html-simple]=']]>'

add_at_start[-nxml]='<!--start nxml-->'
add_at_end[-nxml]='<!--end nxml-->'

echo_arg=-n
if test "$simple_fence" = true; then
    simple=-simple
else
    simple=
fi
pipe_map[nxml-html]=unescape-html

if test -z "${pipe_cmd}"; then
    pipe_cmd=${pipe_map[$from_mode-$to_mode]}

    if test -z "${pipe_cmd}"; then
        if [[ "${add_at_start[$from_mode-$to_mode]}" =~ CDATA ]]; then
            pipe_cmd=unescape-html
        else
            pipe_cmd=cat
        fi
    fi
fi

if test "${text}" != "${init_text}"; then
    exec <<<"$text"
fi

old_text=$(
    cat | ${pipe_cmd}
        )

if [[ $to_mode =~ html ]] && [[ $old_text =~ '<!--start html-->' ]]; then
    simple=-simple
elif [[ $to_mode =~ sh ]] && [[ ${old_text%%$'\n'*} =~ '#!/bin/bash' ]]; then
    simple=-simple
fi

prefix="${add_at_start[$from_mode-$to_mode$simple]}"
postfix="${add_at_end[$from_mode-$to_mode$simple]}"
if [[ $old_text =~ '<![CDATA[' ]] && [[ $prefix =~ '<![CDATA[' ]]; then
    true
else
    echo $echo_arg "$prefix"
fi
echo "${old_text}"

if [[ $old_text =~ '<![CDATA[' ]] && [[ $prefix =~ '<![CDATA[' ]]; then
    true
else
    echo $echo_arg "$postfix"
fi
