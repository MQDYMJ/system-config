#!/bin/bash
set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt r:REPO-REMOTE H:GERRIT-HOST aauto ccherry-pick p:patch-set @do-review
## end code-generator
## start generated code
TEMP=$(getopt -o caH:p:r:h \
              --long do-review,cherry-pick,auto,GERRIT-HOST:,patch-set:,REPO-REMOTE:,help,no-do-review,no-cherry-pick,no-auto \
              -n $(basename -- $0) -- "$@")
do_review=false
cherry_pick=false
auto=false
GERRIT_HOST=
patch_set=
REPO_REMOTE=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --do-review|--no-do-review)
            if test "$1" = --no-do-review; then
                do_review=false
            else
                do_review=true
            fi
            shift
            ;;
        -c|--cherry-pick|--no-cherry-pick)
            if test "$1" = --no-cherry-pick; then
                cherry_pick=false
            else
                cherry_pick=true
            fi
            shift
            ;;
        -a|--auto|--no-auto)
            if test "$1" = --no-auto; then
                auto=false
            else
                auto=true
            fi
            shift
            ;;
        -H|--GERRIT-HOST)
            GERRIT_HOST=$2
            shift 2
            ;;
        -p|--patch-set)
            patch_set=$2
            shift 2
            ;;
        -r|--REPO-REMOTE)
            REPO_REMOTE=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-H, '
            printf %-24s '--GERRIT-HOST=GERRIT_HOST'
            echo
            printf %06s '-r, '
            printf %-24s '--REPO-REMOTE=REPO_REMOTE'
            echo
            printf %06s '-a, '
            printf %-24s '--[no-]auto'
            echo
            printf %06s '-c, '
            printf %-24s '--[no-]cherry-pick'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]do-review'
            echo
            printf %06s '-p, '
            printf %-24s '--patch-set=PATCH_SET'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test -e ~/src/github/smartcm/scm-helpers/.gerrit-fetch-review.hooks; then
    . ~/src/github/smartcm/scm-helpers/.gerrit-fetch-review.hooks
fi

export GERRIT_HOST
export REPO_REMOTE

tmpf=/tmp/$(basename $0).$$
if test $# = 1 -a "${1:0:4}" = http; then
    if echo "$1" |grep -q "/\d+/\d+$" -P; then
        set -- $(echo "$1"|perl -npe 's,.*/(\d+)/\d+$,$1,')
    else
        set -- "$(basename "$1")"
    fi
fi


gerrit query "$@" --current-patch-set > $tmpf

function die() {
    echo "$@"
    exit -1
}


export PROJECT=$(cat $tmpf|grep 'project: '|pn 2)
branch=$(cat $tmpf | grep 'branch: '|pn 2)

if ! lookup-file -e .repo >/dev/null 2>&1 &&
       ! lookup-file -e .git >/dev/null 2>&1 &&
   test -z "$REPO_REMOTE"; then
    git-get -u $GERRIT_HOST:$PROJECT -d ~/src/$(basename $PROJECT) -b "$branch"
    git_dir=~/src/$(basename $PROJECT)
else
    git_dir=$(my-rfa 'if test "$(repo-abs-path)" = $PROJECT; then pwd; fi')
fi

if test -z "$git_dir"; then
    git-get -u $GERRIT_HOST:$PROJECT -d ~/src/$(basename $PROJECT) -b "$branch"
    (
        cd ~/src/$(basename $PROJECT)
        git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
    )
    git_dir=~/src/$(basename $PROJECT)
fi

if test -n "$git_dir"; then
    cd $(lookup-file .repo/..) || die repo not found.
    cd $git_dir || die "$git_dir: cd failed"
fi

ref=$(cat $tmpf|grep 'ref: '|pn 2|tail -n 1)

if test "$patch_set"; then
    if test "$patch_set" = '*'; then
        cat <<EOF | putclip
bash -c 'git diff $(dirname $ref)/\$1 $(dirname $ref)/\$2' true
EOF
        ref=$(dirname $ref)/*:$(dirname $ref)/*
    else
        ref=$(dirname $ref)/$patch_set
    fi
fi
(
    set -x
    git fetch $(repo-remote-url $(repo-remote)) -v $ref
)

if test "$cherry_pick" = true || is-jenkins; then
    git cherry-pick FETCH_HEAD --ff
fi

if test "$do_review" = true; then
    git-interactive-add -r HEAD^ || true
    if yes-or-no-p "Do review and submit for this patch?"; then
        gerrit-do-review
    fi
fi

if test "$auto" = true; then
    start_recursive_shell gerrit
fi
