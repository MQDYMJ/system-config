#!/bin/bash
set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt -e mmultiple-patches r:REPO-REMOTE H:GERRIT-HOST \
    # aauto ccherry-pick p:patch-set \
    # @do-review d:diff-patch-sets?'-d "1 2" to diff patch-set 1 and patch-set 2' \
    # Cdo-checkout
## end code-generator
## start generated code
TEMP=$( getopt -o H:r:acd:Cmp:h \
               --long GERRIT-HOST:,REPO-REMOTE:,auto,cherry-pick,diff-patch-sets:,do-checkout,do-review,multiple-patches,patch-set:,help,no-auto,no-cherry-pick,no-do-checkout,no-do-review,no-multiple-patches \
               -n $(basename -- $0) -- "$@")
GERRIT_HOST=${GERRIT_HOST:-}
REPO_REMOTE=${REPO_REMOTE:-}
auto=${auto:-false}
cherry_pick=${cherry_pick:-false}
diff_patch_sets=${diff_patch_sets:-}
do_checkout=${do_checkout:-false}
do_review=${do_review:-false}
multiple_patches=${multiple_patches:-false}
patch_set=${patch_set:-}
eval set -- "$TEMP"
while true; do
    case "$1" in

        -H|--GERRIT-HOST)
            GERRIT_HOST=$2
            shift 2
            ;;
        -r|--REPO-REMOTE)
            REPO_REMOTE=$2
            shift 2
            ;;
        -a|--auto|--no-auto)
            if test "$1" = --no-auto; then
                auto=false
            else
                auto=true
            fi
            shift
            ;;
        -c|--cherry-pick|--no-cherry-pick)
            if test "$1" = --no-cherry-pick; then
                cherry_pick=false
            else
                cherry_pick=true
            fi
            shift
            ;;
        -d|--diff-patch-sets)
            diff_patch_sets=$2
            shift 2
            ;;
        -C|--do-checkout|--no-do-checkout)
            if test "$1" = --no-do-checkout; then
                do_checkout=false
            else
                do_checkout=true
            fi
            shift
            ;;
        --do-review|--no-do-review)
            if test "$1" = --no-do-review; then
                do_review=false
            else
                do_review=true
            fi
            shift
            ;;
        -m|--multiple-patches|--no-multiple-patches)
            if test "$1" = --no-multiple-patches; then
                multiple_patches=false
            else
                multiple_patches=true
            fi
            shift
            ;;
        -p|--patch-set)
            patch_set=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-H, '
            printf %-24s '--GERRIT-HOST=GERRIT_HOST'
            echo
            printf %06s '-r, '
            printf %-24s '--REPO-REMOTE=REPO_REMOTE'
            echo
            printf %06s '-a, '
            printf %-24s '--[no-]auto'
            echo
            printf %06s '-c, '
            printf %-24s '--[no-]cherry-pick'
            echo
            printf %06s '-d, '
            printf %-24s '--diff-patch-sets=DIFF_PATCH_SETS'
            echo
            printf "%30s" ""
            echo '-d "1 2" to diff patch-set 1 and patch-set 2'
            printf %06s '-C, '
            printf %-24s '--[no-]do-checkout'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]do-review'
            echo
            printf %06s '-m, '
            printf %-24s '--[no-]multiple-patches'
            echo
            printf %06s '-p, '
            printf %-24s '--patch-set=PATCH_SET'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


export GERRIT_HOST
export REPO_REMOTE
export auto
export cherry_pick
export diff_patch_sets
export do_checkout
export do_review
export multiple_patches
export patch_set

## end generated code

if test "$multiple_patches" = true -a $# != 1; then
    eval "$(sort-args.reliably -t patches_sorted -- "$@")"
    for p in "${patches_sorted[@]}"; do
        gerrit-fetch-review "$p"
    done
    exit
fi

if test "$diff_patch_sets" -a -z "$patch_set"; then
    patch_set='*'
fi

if test "$do_checkout" = true -a "$cherry_pick" = true; then
    die "不能同时指定 checkout 和 cherry-pick"
fi

if test -e ~/src/github/smartcm/scm-helpers/.gerrit-fetch-review.hooks; then
    . ~/src/github/smartcm/scm-helpers/.gerrit-fetch-review.hooks
fi

export GERRIT_HOST
export REPO_REMOTE

. atexit bash -c "rm ~/tmp/gerrit-fetch-review*.$$ -f || true"

tmpf=~/tmp/$(basename $0).$$

if is-jenkins; then
    if test $# != 1 -o "${1:0:4}" != http || ! echo "$1" | grep -q '/\d+/?$' -P; then
        mail-cms -i "Can't gerrit-fetch-review $@" <<EOF
无法 Gerrit Fetch 不安全的 Patch 参数： $@

用法：gerrit-fetch-review GERRIT-URL （比如：https://review.smartisan.cn:8080/#/c/266798/）

一般来说，从 Gerrit 网页上打开一个 Review 页面，直接把网址拷下来就可以。
EOF
    fi
fi


if test $# = 1 -a "${1:0:4}" = http; then
    if echo "$1" |grep -q "#/c/\d+/" -P; then
        set -- "change:"$(echo "$1"|perl -npe 's,.*#/c/(\d+)/.*,$1,')
    else
        set -- "$(basename "$1")"
    fi
fi

gerrit query "$@" --current-patch-set > $tmpf

function die() {
    echo "$@"
    exit -1
}

if grep 'value:\s+-' -P -q $tmpf; then
    all_review_ok=false
else
    all_review_ok=true
fi

if grep 'value:\s+2' -P -q $tmpf; then
    approved_review=true
else
    approved_review=false
fi

git_commit_revision=$(
    cat $tmpf | grep revision: | pn 2
                   )
if ! [[ "$git_commit_revision" =~ ^[0-9a-f]{40}$ ]]; then
    die "Invaled git commit: $git_commit_revision"
fi

export PROJECT=$(cat $tmpf|grep 'project: '|pn 2)
branch=$(cat $tmpf | grep 'branch: '|pn 2)

if ! lookup-file -e .repo >/dev/null 2>&1 &&
       ! lookup-file -e .git >/dev/null 2>&1 &&
       test -z "$REPO_REMOTE"; then
    git-get -u $GERRIT_HOST:$PROJECT -d ~/src/gerrit-fetch-review/$(basename $PROJECT) -b "$branch" \
            $(
        if test -e ~/src/android-mirror/${PROJECT%.git}.git; then
            echo --reference ~/src/android-mirror/${PROJECT%.git}.git
        fi
            )

    git_dir=~/src/gerrit-fetch-review/$(basename $PROJECT)
else
    git_dir=$(my-rfa 'if test "$(repo-abs-path)" = /$PROJECT; then pwd; fi')
fi

if test -z "$git_dir"; then
    if is-jenkins; then
        echo "$@" | mail-cms -i "Smart Builder 加 Patch 编译没有找到相应的 git 仓库"
        die "Can't find git dir for $@"
    fi
    git-get -u $GERRIT_HOST:$PROJECT -d ~/src/$(basename $PROJECT) -b "$branch"
    (
        cd ~/src/$(basename $PROJECT)
        git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
    )
    git_dir=~/src/$(basename $PROJECT)
fi

if test -n "$git_dir"; then
    cd $(lookup-file .repo/..) || die repo not found.
    cd $git_dir || die "$git_dir: cd failed"
fi

ref=$(cat $tmpf|grep 'ref: '|pn 2|tail -n 1)

if test "$patch_set"; then
    if test "$patch_set" = '*'; then
        cat <<EOF | putclip
bash -c 'git diff $(dirname $ref)/\$1 $(dirname $ref)/\$2' true
EOF
        ref="$(dirname $ref)/*"
    else
        ref=$(dirname $ref)/$patch_set
    fi
fi
(
    set -x
    git fetch $(repo-remote-url $(repo-remote)) -v "$ref:$ref"
)
if test "$diff_patch_sets"; then
    patch_sets=(
        $diff_patch_sets
    )

    if test ${#patch_sets[@]} = 2; then
        rev1=$(dirname $ref)/${patch_sets[0]}
        rev2=$(dirname $ref)/${patch_sets[1]}

        while true; do
            hint "接下来让你选择你要 review 哪个文件，如果不想 review 了，请 Ctrl-C 退出"
            review_file=$(
                select-output-line -- "git diff --name-status $rev1 $rev2; echo exit now！ （直接退出）" | pn 2
                       )
            if test "$review_file" = now！; then
                break
            fi
            git-interactive-add -b $rev1 -r $rev2 $review_file
        done
    else
        git diff -w $(for x in $diff_patch_sets; do echo $(dirname $ref)/$x; done)
    fi
fi

if test "$cherry_pick" = true || is-jenkins; then
    if is-jenkins; then
        if cat $tmpf | grep '^\s+status:\s+ABANDONED' -P; then
            cat $tmpf | mail-cms -i "Patch must not be abandoned"
            die "Patch is abandoned"
        fi
        if test "$all_review_ok" != true -o "$approved_review" != true; then
            cat $tmpf |
                mail-cms -i "Patch need review: $@, must has +2 +1, and no -1 -2."
            cat $tmpf | grep 'value:|description:' -P
            die "Error: Review needed, can't cherry-pick this patch $@:, see above output."
            exit -1
        fi
    fi
    if ! git cherry-pick $git_commit_revision --ff $(
            if is-jenkins; then
                echo --allow-empty --keep-redundant-commits
            fi
         ) > ~/tmp/gerrit-fetch-review.log.$$ 2>&1; then
        if is-jenkins; then
            (
                git diff HEAD || true
                cat ~/tmp/gerrit-fetch-review.log.$$ $tmpf
            ) | mail-cms -s -i "你的 Patch 有冲突，无法 cherry-pick，请修复后重试: $@"
        fi

        die "Error: patch can't cherry-pick: $(
            echo git diff:;
            git diff HEAD;
            echo;
            echo cherry-pick output:;
            cat ~/tmp/gerrit-fetch-review.log.$$
        )"
    fi
fi

if is-jenkins; then
    exit 0
fi

if test "$do_checkout" = true; then
    git reset --hard FETCH_HEAD
fi

if test "$do_review" = true; then
    git-interactive-add -r HEAD^ || true
    if yes-or-no-p "Do review and submit for this patch?"; then
        gerrit-do-review
    fi
fi

if test "$auto" = true; then
    start_recursive_shell gerrit
else
    putclip "$PWD"
    cat <<EOF
你的 Gerrit Patch 已经下载，请
    cd $PWD
前往查看
EOF
fi
