#!/usr/bin/env bash

if test "$DEBUG" = true; then
    set -x
fi
if test "$PWD" = ~; then
    cd ~/system-config/
fi

cd -P .
# cd $(dirname $(lookup-file -e .git))
if test -x .before-gia-hook; then
    ./.before-gia-hook
fi

function die() {
    echo Error: "$@"
    exit -1
}

if ! is-tty-io; then
    die "Can't do it in non tty env"
fi


## start code-generator "^\\s *#\\s *"
# generate-getopt r:revision b:review-base
## end code-generator
## start generated code
TEMP=$(getopt -o b:r:h \
              --long review-base:,revision:,help \
              -n $(basename -- $0) -- "$@")
review_base=
revision=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -b|--review-base)
            review_base=$2
            shift 2
            ;;
        -r|--revision)
            revision=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-b, '
            printf %-24s '--review-base=REVIEW_BASE'
            echo
            printf %06s '-r, '
            printf %-24s '--revision=REVISION'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test -e .git-interactive-add.before; then
    bash .git-interactive-add.before
fi

function git-diff() {
    clear

    if test "$FOR_REVIEW"; then
        if git diff -w $(repo-remote-branch) HEAD -- "$@" | grep -q .; then
            git diff -w $(repo-remote-branch) HEAD -- "$@"
        else
            read -e -p "$@ seems contain only whitespace changes, press Enter to continue...  "
        fi
        return 0
    fi

    if git status -s "$@" | grep -q -P -e '^\?\?'; then
        read -e -p "$@ seems to be a new file, press Enter to continue...  "
        diff /dev/null "$@"
    else
        if git diff -w $review_base $revision -- "$@" | grep -q .; then
            git diff -w $review_base $revision -- "$@"
        else
            read -e -p "$@ seems contain only whitespace changes, press Enter to continue...  "
        fi
    fi
}

IFS=$'\n'
for x in "$@" $(
              if test $# == 0; then
                  if test "$revision" = ""; then
                      git st -s .|grep '^.\S' -P | cut -b 4-;
                  else
                      gitp=$(gitp .)
                      case "$gitp" in
                          ./)
                              gitp=
                              ;;
                          *)
                              gitp=$gitp/
                              ;;
                      esac
                      len=${#gitp}
                      start=$((9 + len))
                      git diff --name-status $review_base $revision . | expand | cut -b $start-;
                  fi
              fi
    if test "$FOR_REVIEW"; then
        git diff $(repo-remote-branch) HEAD --name-status .| perl -npe 's/^\S+\s+//'
    fi
); do
    if test "${x:0:1}" = \" && yes-or-no-p -y "Eval $x?"; then
        eval x=\$\'"$x"\'
        x=${x#\"}
        x=${x%\"}
        echo "x changed to '$x'"
    fi
    if test -d "$x"; then
        continue
    fi
    if test ! -e "$x" && git st -s |grep -P -e "\Q$x\E" | grep "^RM"; then
        x=$(git st -s |grep -P -e "\Q$x\E" | grep "^RM" | perl -npe 's/.*-> //')
    fi
    if test ! -e "$x" && git st -s "$x" | grep -P -e '^ D|^D' && yes-or-no-p "$x removed, remove it from git?"; then
        git rm "$x"
        continue
    fi
    git-diff "$x";
    while true; do
        out=$(select-args yes no discard diff delete edit "@ $PWD/$x");
        if test "$out" = diff; then
            git-diff "$x";
            continue;
        fi

        if test "$out" = delete; then
            rm "$x"
            break
        fi

        if test "$out" = edit; then
            ew "$x"
            find-or-exec konsole
            if test ! -e "$x"; then
                break
            fi
            git-diff "$x";
            continue
        fi

        if test "$out" = no; then
            break
        fi

        if test "$out" = discard; then
            git checkout $revision "$x"
            break
        fi

        if test "$out" = yes; then
            git add "$x"
            if [[ $x =~ \.org$ ]] && grep 'BEGIN_SRC.*:tangle '-i "$x" -q; then
                (
                    tangle_target=$(grep -o ':tangle\s+\S+\s+' -P "$x" -i |pn 2)
                    if test -e "$tangle_target" -a "$x" -nt "$tangle_target" && yes-or-no-p -y "Your .org knuth-mode file newer than tangled version, export?"; then
                        emacsclient -e '(progn (find-file "$x") (org-babel-tangle))'
                        git-interactive-add "$x"
                    fi
                )
            fi

            touch $(lookup-file -e .git)/sc-not-merged
        elif test "${out:0:1}" != @; then
            git add "$x"
            echo $(gitp "$x"): $out >> $(lookup-file-dir -e .git)/.commit-msg-bhj
            touch $(lookup-file -e .git)/sc-not-merged
        fi
        break
    done
done

if test -e .before-push-hook -a "$before_push_hook" != done; then
    bash .before-push-hook
    if ! git-is-clean; then
        before_push_hook=done git-interactive-add
    fi
fi

. .gitx
git submodule foreach $0
