#!/bin/bash
set -e

set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

## start code-generator "^\\s *#\\s *"
    # generate-getopt O:order-name oORDERED='${SELECT_HISTORY_ORDER:-false}' '?Should use history for list order' \
        # @:select-dist-word \
        # m:max-history=-1 \
        # p:prompt='"Please enter your selection"' \
        # i:init \
        # @:dot-sep-init \
        # @select-from-history-too \
        # @:exclude \
        # vverbose
## end code-generator
## start generated code
TEMP=$( getopt -o oi:m:O:p:vh \
               --long ORDERED,dot-sep-init:,exclude:,init:,max-history:,order-name:,prompt:,select-dist-word:,select-from-history-too,verbose,help,no-ORDERED,no-select-from-history-too,no-verbose \
               -n $(basename -- $0) -- "$@")
ORDERED=${SELECT_HISTORY_ORDER:-false}
dot_sep_init=
exclude=
init=
max_history=-1
order_name=
prompt="Please enter your selection"
select_dist_word=
select_from_history_too=false
verbose=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -o|--ORDERED|--no-ORDERED)
            if test "$1" = --no-ORDERED; then
                ORDERED=false
            else
                ORDERED=true
            fi
            shift
            ;;
        --dot-sep-init)
            dot_sep_init=$2
            shift 2
            ;;
        --exclude)
            exclude=$2
            shift 2
            ;;
        -i|--init)
            init=$2
            shift 2
            ;;
        -m|--max-history)
            max_history=$2
            shift 2
            ;;
        -O|--order-name)
            order_name=$2
            shift 2
            ;;
        -p|--prompt)
            prompt=$2
            shift 2
            ;;
        --select-dist-word)
            select_dist_word=$2
            shift 2
            ;;
        --select-from-history-too|--no-select-from-history-too)
            if test "$1" = --no-select-from-history-too; then
                select_from_history_too=false
            else
                select_from_history_too=true
            fi
            shift
            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=false
            else
                verbose=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-o, '
            printf %-24s '--[no-]ORDERED'
            echo 'Should use history for list order'
            printf "%06s" " "
            printf %-24s '--dot-sep-init=DOT_SEP_INIT'
            echo
            printf "%06s" " "
            printf %-24s '--exclude=EXCLUDE'
            echo
            printf %06s '-i, '
            printf %-24s '--init=INIT'
            echo
            printf %06s '-m, '
            printf %-24s '--max-history=MAX_HISTORY'
            echo
            printf %06s '-O, '
            printf %-24s '--order-name=ORDER_NAME'
            echo
            printf %06s '-p, '
            printf %-24s '--prompt=PROMPT'
            echo
            printf "%06s" " "
            printf %-24s '--select-dist-word=SELECT_DIST_WORD'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]select-from-history-too'
            echo
            printf %06s '-v, '
            printf %-24s '--[no-]verbose'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

export SELECT_PROMPT=$prompt
if test -z "$init" -a "$dot_sep_init"; then
    init=${dot_sep_init//./ }
fi
if test "$init"; then
    export ORIGINAL_MATCHER=$init
fi

if test "$order_name"; then
    ORDERED=$order_name
fi

if test "$select_from_history_too" = true -a "$ORDERED" = false; then
    ORDERED=true
fi

if test $ORDERED != false; then
    if test $ORDERED != true; then
        md5=$ORDERED
    else
        md5=$(echo $SELECT_PROMPT "$@" | md5sum | pn 1)
    fi
    cmdfile=~/.cache/system-config/bhj/select-output-line/$md5.cmd.$UID
    histfile=~/.cache/system-config/bhj/select-output-line/$md5.hist.$UID
    if test "$verbose" = true; then
        echo 1>&2 "Histfile is $histfile"
    fi
    (
        touch $histfile.$$
        mv $histfile $histfile.$$ &&
            cp $histfile.$$ $histfile.$$.2 &&
            mv $histfile.$$.2 $histfile
    ) >/dev/null 2>&1 || true
    mkdir -p $(dirname $cmdfile);
    echo "$@" > $cmdfile
fi

IFS=$'\n'
dood=(
    $(
        tmpfile=/tmp/$(basename $0).$$
        (
            if test "$b0" = select-args; then
               for x in "$@"; do
                   echo "$x"
               done
            elif test $# = 1; then
                bash -c "$1"
            else
                "$@"
            fi > $tmpfile

            if test $ORDERED = true; then
                echo -n | perl -ne 'BEGIN{
                              open($tmpfile, "<", "'$tmpfile'");
                              while (<$tmpfile>) {
                                  $lines{$_} = 1;
                              }
                          }

                          print if $lines{$_};
                      ' $histfile.$$
            fi

            if test "$select_from_history_too" = true -a -e "$histfile"; then
                cat "$histfile"
            fi

            cat $tmpfile
            rm $tmpfile
        ) |
            if test $ORDERED != true -a $ORDERED != false; then
                if test "$SELECT_DIST_WORD"; then
                    (
                        cat $histfile.$$  2>/dev/null | head -n 1
                        uniq-and-dist-sort "$SELECT_DIST_WORD"
                    ) | uniq-even-non-ajacent
                else
                    uniq-and-dist-sort "$(cat $histfile.$$  2>/dev/null | head -n 1)"
                fi
            elif test "$SELECT_DIST_WORD"; then
                uniq-and-dist-sort "$SELECT_DIST_WORD"
            else
                uniq-even-non-ajacent
            fi |
            if test -z "$exclude"; then
                cat
            else
                (
                    IFS=$'\t \n'
                    while read line; do
                        is_exclude=false
                        for e in $exclude; do
                            if test "$line" = "$e"; then
                                is_exclude=true
                                break
                            fi
                        done
                        if test "$is_exclude" = false; then
                            echo "$line"
                        fi
                    done
                )
            fi
    )
) || true
if test ${#dood[@]} = 0; then
    exit -1
fi

n=$(my-select "${dood[@]}")

function is-good-n() {
    echo "$n" | grep -q -P -e '^[0-9]+$' && test "$n" -ge 1 -a $n -le ${#dood[@]}
}

output=$(
    if is-good-n; then
        echo -n ${dood[n-1]}
    else
        echo -n "$n"
    fi
      )

echo -n "$output"

if (  is-good-n && test "$ORDERED" != false ) || test "$select_from_history_too" = true; then
    (
        echo "$output"
        cat $histfile.$$ 2>/dev/null || true
    ) | perl -ne "print if 1..$max_history" | uniq-even-non-ajacent > $histfile.$$.2 &&
        mv $histfile.$$.2 $histfile && rm $histfile.$$ -f
fi&
