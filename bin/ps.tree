#!/usr/bin/env perl

use strict;

my @ps = split /\n/, qx(ps.pl . 2>/dev/null);

sub debug(@) {
    print STDERR "@_\n";
}


my %ppid_map;
my %command_map;

for my $p (@ps) {
    $p =~ m/(\d+)\s+(\d+)\s+(\S+)\s+(.*)/ or next;
    my ($pid, $ppid, $time, $command) = ($1, $2, $3, $4);

    $ppid_map{$pid} = $ppid;
    $command_map{$pid} = "$time $command";
}

my $start_p = $ARGV[0];

my @start_p = ($start_p);
unless ($start_p =~ m/^\d+$/) {
    @start_p = ();
    open(my $pipe, "-|", "ps.pl", $start_p) or
        die "Cannot open pipe for ps.pl $start_p";

    while (<$pipe>) {
        my @fields = split;
        push @start_p, $fields[0];
    }
    close $pipe;
}

my %print_children_map;

sub add_parent_child($$) {
    my ($parent, $child) = @_;
    $print_children_map{$parent} = {} unless $print_children_map{$parent};
    $print_children_map{$parent}{$child} = 1;
}

for $start_p (sort @start_p) {
    # find till the root (usually the init process)
    next if $start_p == $$;

    my @parents = ();
    my $saved_pid = $start_p;

    while ($start_p) {
        push @parents, $start_p;
        my $parent = $ppid_map{$start_p};
        last unless $parent;
        add_parent_child($parent, $start_p);
        $start_p = $ppid_map{$start_p};
    }

    $start_p = $saved_pid;

    sub add_childrens($) {
        my ($parent) = @_;
        for (keys %ppid_map) {
            if ($ppid_map{$_} == $parent) {
                my $child = $_;
                add_parent_child($parent, $child);
                add_childrens($child);
            }
        }
    }

    add_childrens($start_p);
}

sub print_branch($$) {
    my ($pid, $indent) = @_;
    printf "$indent %d %d %s\n", $pid, $ppid_map{$pid}, $command_map{$pid};

    for (sort keys %{$print_children_map{$pid}}) {
        print_branch($_, $indent . "  ");
    }
}

print_branch(1, "");
