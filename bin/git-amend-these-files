#!/bin/bash
set -e

files=$(
    git diff HEAD --name-only
     )

for f in $files; do
    target_commit=$(select-output-line -p "Which commit do you want to amend for $f?" git log --pretty='%h %s' $(git-remote-branch)..HEAD -- $f | pn 1)

    if test -z "${target_commit}"; then
        if yes-or-no-p "$(git diff HEAD $f;
                          echo "****************************************************************";
                          git-get-log --name-status HEAD;
                          echo;
                          echo piggy back $f with current commit?
                         )"; then
            git add $f
            git commit --amend --no-edit
            continue
        else
            piggy_file=$(select-output-line -p "Which file to piggy" git diff --name-only $(git-remote-branch))
            if test -e "${piggy_file}"; then
                target_commit=$(f=$piggy_file; select-output-line -p "Which commit do you want to amend for $f?" git log --pretty='%h %s' $(git-remote-branch)..HEAD -- $f | pn 1)
            fi
            if test -z "${target_commit}"; then
                die "Can't amend $file, not committed after sync from upstream"
            fi
        fi
    fi

    if yes-or-no-p -y "$(git-get-log --name-status $target_commit; echo; echo amend this for 『$f』)"; then
        git add $f
        git commit --fixup=$target_commit
    fi
done
git rebase --no-ff -i --autosquash $(git-remote-branch)
