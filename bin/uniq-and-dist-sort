#!/usr/bin/env perl

my $debug;
my $logfile = $0;
$logfile =~ s!.*/!!;
if ($ENV{DEBUG} eq 'true') {
    $debug = *STDERR;
} else {
    open($debug, ">", glob("~/.cache/system-config/logs/$logfile.log"))
        or die "Can not open debug log file ~/.cache/system-config/logs/$logfile.log";
}
sub debug(@) {
    print $debug "@_\n";
}

use Getopt::Long;
use Text::Levenshtein qw(distance);
my $pre;
my $keep;
GetOptions(
           "pre=s" => \$pre,
           "keep=s" => \$keep,
    );

if ($pre) {
    $pre_re = qr/^\Q$pre\E/;
}

my $dist_cmp_str = $ARGV[0];
shift @ARGV;

while (<>)
  {
    chomp;
    if (not exists $file{$_}) {
        $file{$_} = 1;
        push @file, $_;

        if ($pre and m/$pre_re/) {
            $file_pre{$_} = 1;
            push @file_pre, $_;
        }
    }
}

if ($pre) {
    for (@file_pre) {
        print "$_\n";
    }
}

debug "sort with $dist_cmp_str";

my %dists;

map {
  $dists{$_} = abs(distance($dist_cmp_str, $_));
  debug "$_: $dists{$_}";
} @file;

sub print_array(\@) {
  my @file = @{$_[0]};
  for (@file) {
    next if ($pre and exists $file{$pre . $_} or exists $file_pre{$_});
    print "$_\n";
  }
}

if ($keep) {
  my @head = @file[0 .. ($keep - 1)];
  print_array(@head);
  @file = @file[$keep .. @file];
}

@file = sort {$dists{$a} <=> $dists{$b}} @file;

print_array(@file);
