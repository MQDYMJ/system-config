#!/bin/bash

set -e


## start code-generator "^\\s *#\\s *"
# generate-getopt eerror-exit
## end code-generator
## start generated code
TEMP=$(getopt -o eh \
              --long error-exit,help,no-error-exit \
              -n $(basename -- $0) -- "$@")
error_exit=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -e|--error-exit|--no-error-exit)
            if test "$1" = --no-error-exit; then
                error_exit=false
            else
                error_exit=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-e, '
            printf %-24s '--[no-]error-exit'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if echo $SHELLOPTS | grep -q xtrace; then
    if ! is-tty-io; then
        exec > ~/.cache/system-config/logs/find-or-exec.log 2>&1
    fi
else
    exec >/dev/null 2>&1
fi

if test $# = 0; then
    die "Error: Usage $(basename $0) window_class [program_to_exec]"
fi

window_not_found_command=${2:-true}


to_match=$1
case "$1" in
    konsole|lxterminal|xterm)
        to_match='konsole|lxterminal|xterm'
        ;;
esac

if ! is-sawfish; then
    wmctrl -l -x|(
        while read wid desktop class user name; do
            if [[ $class =~ $to_match ]]; then
                wmctrl -a $wid -i
                exit 0
            fi
        done
        exit 1
    ) || (
        $window_not_found_command &

        if test "$error_exit" = true; then
            exit 1
        fi
        exit 0
    )
    exit 0
fi

if test "$error_exit" = true; then
    window_not_found_command="${2:-touch ~/tmp/find-or-exec-failed.$$}"
fi
if test "$1" = konsole; then
    sawfish_exp=$(printf '(find-window-or-exec %s "%s")' \
                         '(lambda (w) (and
                                        (string-match "'"$to_match"'" (bhj-window-class w) 0 t)
                                        (not (string= "emacs" (window-name w)))))' \
                                            "$window_not_found_command"
               )
elif test "$1" = emacs -a "$(which emacs)" = ~/external/local/bin/emacs; then
    sawfish_exp=$(printf '(find-window-or-exec (lambda (w) (string= (window-name w) "emacs")))')
else
    sawfish_exp=$(printf '(find-window-or-exec "%s" "%s")' "$1" "$window_not_found_command")
fi

sawfish-client -e "$sawfish_exp"

(
    if test "$1" = emacs; then
        if emacsclient -e 'before-save-hook' | grep "'"; then
            bhj-notify "Warning" "Emacs before-save-hook has gone weird"
        fi
    fi
)&

if test $error_exit = true; then
    if test -e ~/tmp/find-or-exec-failed.$$; then
        rm ~/tmp/find-or-exec-failed.$$
        exit 1
    fi
    exit 0
fi
