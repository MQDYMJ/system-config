#!/usr/bin/expect


if {[info exists env(JS_TARGET)]} {
    set js_target $env(JS_TARGET); #
} else {
    set js_target 162
}

if {[info exists env(JS_EXECUTE)]} {
    set js_execute $env(JS_EXECUTE);
} else {
    set js_execute {}
}

if [regexp {^\d+$} $js_target] {
    set js_target .4.$js_target
}

# close [open "|bhj-notify hello $js_target '$js_execute'"]

proc qx cmd {
    set fh [open "|$cmd"]
    set res [read $fh]
    if {[catch {close $fh} err]} {
        puts "command failed: $err"
    }

    return $res
}

set home $env(HOME)

proc log str {
    global home
    set logf [open ${home}/tmp/js-ssh.log a+]
    puts -nonewline $logf $str
    close $logf
}

# log "got argv: $argv\n"

set local_ip [qx get-my-ip]
log_user 0
spawn ssh -o ControlMaster=auto -o ControlPath=$home/.cache/tramp.%C -o ControlPersist=no -e none js;

expect "Opt>" {
    # log "Seend Opt>, sending $js_target\n";
    send -- "$js_target\n";
    expect -re "\\$" {
        if {$argc != 0} {
            foreach arg $argv {
                send "$arg "
            }
            send "\n";
            log_user 1
        } else {
            send "REMOTEPROTOCOL=jssh PS1HOSTNAME=js-$js_target REMOTEIP=$local_ip REMOTEUSER=$env(USER) "
            send "exec bash -c 'sc=system-config/bin/sc; for d in /apps/scm/prod ~; do f=\${d}/\${sc}; if test -e \${f}; then \${f} try; break; fi; done\n"
            send ": EOF'\n";
            if { $js_execute ne {} } {
                expect -re ": EOF.*\n" {
                    # log_user 1;
                    # set -x; export SHELLOPTS;
                    send "( $js_execute ); \\\necho -n exit; read -p 123456; exit;\n";

                    expect {
                        -re "echo -n exit; read -p 123456" {
                            # send_error "hello seen read 123456\n"
                            log_user 1;
                            exp_continue;
                        }
                        -re "exit123456" {
                            log_user 0
                            send "exit\n";
                            expect "Opt>" {
                                send "exit\n";
                                wait
                                exit
                            }
                        }
                        timeout {
                            send_user "timed out>\n";
                            exp_continue;
                        }
                    }
                }
            } else {
                expect -re ": EOF.*\n" {
                    log_user 1
                }
            }
        }
    } -re " Would you like to update.*:" {
        send "n\n"
        exp_continue
    } -re " Would you like to check for updates.*:" {
        send "n\n"
        exp_continue
    } -re "Opt>" {
        close [open "|bhj-notify js-ssh Cannot connect, please use strace to debug"]
        log_user 1
        sleep 1
        exit 1
    } -re "提示: 输入资产.*，直接登录资产.*\n:" {
        close [open "|bhj-notify js-ssh Cannot connect, please use strace to debug"]
        sleep 1
        exit 1
    }
}

expect_background "Opt>" {
    send "exit\n";
    wait
    exit
}
# -re "(.)" {
#     log $expect_out(1,string)
# }

# exp_internal 1
interact {
    timeout 1750 {
        set current_hour [clock format [clock seconds] -format %k]
        if { $current_hour > 18 || $current_hour < 9 } {
            exit
        } else {
            send " \010";
        }
    }
    # -re "(.)" {
    #     log $interact_out(1,string)
    #     send -- $interact_out(1,string)
    # }
};
wait
