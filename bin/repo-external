#!/bin/bash
set -e


## start code-generator "^\\s *#\\s *"
# generate-getopt @do-delete
## end code-generator
## start generated code
TEMP=$( getopt -o h \
               --long do-delete,help,no-do-delete \
               -n $(basename -- $0) -- "$@")
do_delete=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --do-delete|--no-do-delete)
            if test "$1" = --no-do-delete; then
                do_delete=false
            else
                do_delete=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]do-delete'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

mv-1-if-exist() {
    local dir=$1
    shift
    local x
    for x in "$@"; do
        if test -e "$x" -o -L "$x"; then
            mv "$x" "$dir"
        fi
    done
}

cp-al-1-if-exist() {
    local dir=$1
    shift
    local x
    for x in "$@"; do
        if test -e "$x" -o -L "$x"; then
            cp -al "$x" "$dir"
        fi
    done
}

if test ! -d .repo; then
    die "must run at top of repo"
fi

my-rfa -j1 pwd | perl -npe 's,$ENV{PWD}/,,' > .repo/my-project.list
if is-jenkins; then
    echo "my project.list: $(echo; indent-stdin < .repo/my-project.list)"
fi

if test -e .repo/project.list -o -e .repo/project.list-last-init; then
    extra_repos=$(
        arg1-arg2 "$(
# {%sh-mode%}
if test -e .repo/project.list; then
    cat .repo/project.list
fi

if test -e .repo/project.list-last-init; then
    cat .repo/project.list-last-init
fi
# {%/sh-mode%}
            )" "$(cat .repo/my-project.list)" | sort |
            while read d; do
                if test -d "$d"; then
                    echo $d;
                fi;
            done
               )

    if is-jenkins; then
        echo "current project.list: $(echo; indent-stdin < .repo/my-project.list)"
    fi
else
    echo "No .repo/project.list, can't decide extra_repos"
    extra_repos=
fi

rm -rf .repo/repo-external
mkdir -p .repo/repo-external

cat .repo/my-project.list | sort |
    (
        last=
        while read d; do
            if [[ $d =~ ^$last/ ]]; then
                continue;
            fi;
            echo $d;
            last=$d;
        done
    ) | xargs mv-with-dir-struct .repo/repo-external >/dev/null 2>&1

if test "$extra_repos"; then
    echo "These repos are not needed: $extra_repos"
fi
if test "$do_delete" = false; then
    cp-al-1-if-exist .repo/repo-external *
    rm -rf .repo/cleanlinks
    mkdir -p .repo/cleanlinks
    mv-1-if-exist .repo/cleanlinks *

    (
        cd .repo/cleanlinks
        cleanlinks >/dev/null 2>&1
        echo These files/dirs are external: *
    )
else
    if rmdir .repo/repo-external >/dev/null 2>&1; then # in case there is nothing in .repo/repo-external
        exit 0
    fi
    if test "$extra_repos"; then
        (
            cd .repo/repo-external
            for r in $extra_repos; do
                if test -d "$r"/.git; then
                    echo clean "$r"
                    rm -rf "$r"
                fi
            done
        )
    fi
fi

rm * -rf

mv-1-if-exist . .repo/repo-external/*
rmdir .repo/repo-external
