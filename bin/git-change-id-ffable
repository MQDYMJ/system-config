#!/bin/bash

set -e
function die() {
    echo "$@"
    exit -1
}

verbose=false
TEMP=$(getopt -o v: --long verbose: -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
        -v|--verbose)
            verbose=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if test $# != 2; then
    die "Error: Usage $(basename $0) src_branch dest_branch"
fi

src=$1
export dest=$2

commit_in_src=$(git rev-list $src ^$dest 2>/dev/null | reverse)
num_commit_in_src=$(echo "$commit_in_src" | wc -l)
commit_in_dest=$(git rev-list ^$src $dest 2>/dev/null | head -n $((num_commit_in_src * 2)))

export destlog=/tmp/log_in_dest.$$
git log $src..$dest > $destlog


export srclog=/tmp/log_in_src.$$
git log --format="%%commit%% %H %ae(%ai) %ce(%ci) : {{{%s}}}%n%B" $dest..$src > $srclog

need_die=0

perl -e '
     open($destlog, "<", $ENV{destlog});
     while (<$destlog>) {
         $destcid{$1} = 1 if m/^\s*(?:old-)?Change-Id:\s*(.*)/i;
     }
     close($destlog);

     open($srclog, "<", $ENV{srclog});
     while (<$srclog>) {
         if (m/^%commit% (\S*) (.*)/) {
             $current_commit=$1;
             if ($no_cid) {
                 printf "%s commit %s has no change id %s %s\n", $ENV{PWD}, $no_cid, $ENV{dest}, $commit_info;
             }
             $no_cid = $current_commit;
             $commit_info = $2;
         }
         if (m/^\s*Change-Id:\s*(.*)/i) {
             $no_cid="";
             if (not $destcid{$1}) {
                 printf "%s commit %s cid %s not found in %s %s\n", $ENV{PWD}, $current_commit, $1, $ENV{dest}, $commit_info;
             }
         }
     }
' | reverse |grep . && need_die=1

rm $destlog $srclog
if test $need_die = 1; then
    exit -1
fi
