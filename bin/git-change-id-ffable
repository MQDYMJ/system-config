#!/bin/bash

set -e
function die() {
    echo "$@"
    exit -1
}

verbose=false
TEMP=$(getopt -o v: --long verbose: -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
        -v|--verbose)
            verbose=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if test $# != 2; then
    die "Error: Usage $(basename $0) src_branch dest_branch"
fi

src=$1
export dest=$2

commit_in_src=$(git-cmds-in-mirror rev-list $src ^$dest 2>/dev/null | reverse)
num_commit_in_src=$(echo "$commit_in_src" | wc -l)
commit_in_dest=$(git-cmds-in-mirror rev-list ^$src $dest 2>/dev/null | head -n $((num_commit_in_src * 2)))

export destlog=/tmp/log_in_dest.$$
git-cmds-in-mirror log $src..$dest > $destlog


export srclog=/tmp/log_in_src.$$
git-cmds-in-mirror log --format="%%commit%% %H %ae(%ai) %ce(%ci) : {{{%s}}}%n%B" $dest..$src > $srclog

need_die=0

perl -e '
# {%perl-mode%}
     use Text::CSV;
     my $csv = Text::CSV->new ( { binary => 1, eol => $/ } )
         or die "Cannot use CSV: ".Text::CSV->error_diag ();

     open($destlog, "<", $ENV{destlog});
     while (<$destlog>) {
         $dest_change_ids{$1} = 1 if m/^\s*(?:old-)?Change-Id:\s*(.*)/i;
     }
     close($destlog);

     open($srclog, "<", $ENV{srclog});
     my ($author, $author_date, $committer, $commit_date, $subject);

     sub parse_commit_info($) {
         my ($info) = @_;
         if ($info =~ m/^(\S+?)\((.+?)\) (\S+?)\((.+?)\) : \{\{\{(.*?)\}\}\}$/) {
             ($author, $author_date, $committer, $commit_date, $subject) = ($1, $2, $3, $4, $5);
         } else {
             ($author, $author_date, $committer, $commit_date, $subject) = ("Error: $info");
         }
     }

     $last_commit_printed = 1;
     while (<$srclog>) {
         if (m/^%commit% (\S*) (.*)/) {
             $current_commit = $1;

             if (not $last_commit_printed) { # it has no change id
                 parse_commit_info($commit_info);
                 $csv->print(STDOUT, [$last_commit, "", $ENV{dest}, $author, $author_date, $committer, $commit_date, $subject]);
             }

             $last_commit_printed = 0;
             $last_commit = $current_commit;
             $commit_info = $2;
         }
         if (m/^\s*Change-Id:\s*(.*)/i) {
             $last_commit_printed = 1;
             if (not $dest_change_ids{$1}) {
                 my $change_id = $1;
                 parse_commit_info($commit_info);
                 $csv->print(STDOUT, [$last_commit, $change_id, $ENV{dest}, $author, $author_date, $committer, $commit_date, $subject]);
             }
         }
     }

     if (not $last_commit_printed and $commit_info) {
         parse_commit_info($commit_info);
         $csv->print(STDOUT, [$last_commit, "", $ENV{dest}, $author, $author_date, $committer, $commit_date, $subject]);
         print STDERR "The last commit $last_commit is not printed with a change-id\n";
     }

     $csv->print(STDOUT, ["Git Commit", "Change-ID", "Target Branch", "Author", "Author Date", "Committer", "Commit Date", "Subject", "Assign To", "Team", "Status" ]);
# {%/perl-mode%}
' | reverse |grep . && need_die=1

rm $destlog $srclog
if test $need_die = 1; then
    exit -1
fi
