#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use Shell::Parser;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;


(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# uun-quote vverbose
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $un_quote = 0;
my $verbose = 0;

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-u, ';
    printf "%-24s", '--[no]un-quote';
    if (length('--[no]un-quote') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--[no]verbose';
    if (length('--[no]verbose') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'un-quote|u!' => \$un_quote,
    'verbose|v!' => \$verbose,
    'help|h!' => \&$handler_help,
);


## end generated code

if ($un_quote) {
    my $str = join("", <>);
    my @words = split(", ", $str);
    map {
        $_ =~ s,^(['"])(.*)\1$,$2,;
        $_ =~ s,',",g;
    } @words;

    # say STDERR "words are @words";
    use String::ShellQuote;
    ($str = join(" ", shell_quote @words)) =~ s,',",g;
    print $str;
    exit
}

my $parser = new Shell::Parser handlers => { default => \&dumpnode };
$parser->parse(join '', <>);

sub dumpnode {
    my $self = shift;
    my %args = @_;
    say STDERR decode_utf8($json->encode(\%args)) if $verbose;
    my $token = $args{token};
    my $type = $args{type};
    if (${token} =~ m,\S,) {
        if (${token} =~ m,^".*"$,) {
            printf "%s, ", $token;

        } elsif ($token =~ m,^'.*'$,) {
            printf "%s, ", $token;
        } else {
            printf '"%s", ', ${token};
        }
    }
}
