#!/usr/bin/env perl

use Getopt::Long;
use strict;
use Cwd 'realpath';
use String::ShellQuote;
$ENV{'LANG'} = 'C';
$ENV{'LC_ALL'} = 'C'; # fix grep too slow when ignore_case and gbk file recognized as binary

delete $ENV{GREP_OPTIONS};
if (-e "$ENV{HOME}/external/local/bin/mkbeagrepidx" and not -e "/usr/local/bin/mkbeagrepidx") {
    if ($ENV{LD_LIBRARY_PATH}) {
        $ENV{LD_LIBRARY_PATH} = "$ENV{HOME}/external/local/lib:$ENV{LD_LIBRARY_PATH}"
    } else {
        $ENV{LD_LIBRARY_PATH} = "$ENV{HOME}/external/local/lib";
    }
    $ENV{PATH} = "$ENV{HOME}/external/local/bin:$ENV{PATH}"; # force using the right version
}

my $pat = '';
my $pathpat = '.';
my $additional_tokens = $ENV{BEAGREP_ADDITIONAL_TOKENS};
my $use_tokens = '';
my $pathdeny = '^$';
my $pwd = realpath(".");
my $pwd_opt;
my $list_beagrep;
my $short_format = 0;
my $use_beagrep_for_dir;
my $use_top_code_dir;
my $abc_base;

my $ignore_case;
my $find_file_only = 0;
my $file_default_line = 1;
my $file_tag = "";
my $grep_use_perl_regexp;
my $replace_with;

my @saved_args = @ARGV;
my @fallback_dirs;
my $only_grep_myself;

open(my $log, ">>", "$ENV{HOME}/.beagrep.log") or die "Error openning log";
print $log "$0 @ARGV in " . $ENV{PWD} . "\n";

mkdir "$ENV{HOME}/.cache/system-config/logs";
open(my $debuglog, ">", "$ENV{HOME}/.cache/system-config/logs/beagrep.log") or die "Error openning log";

sub debug(@) {
    print $debuglog "@_\n";
}


my $grep_add_opts = "";
GetOptions(
    "beagrep=s" => \$use_beagrep_for_dir,
    "abc=s" => \$abc_base,
    "top=s" => \$use_top_code_dir,
    "a=s" => \$additional_tokens,
    "t=s" => \$use_tokens,
    "e=s" => \$pat,
    "p=s" => \$pathpat,
    "perl!" => \$grep_use_perl_regexp,
    "grep=s" => \$grep_add_opts,
    "v=s" => \$pathdeny,
    "d=s" => \$pwd_opt,
    "i!" => \$ignore_case,
    "c!" => sub {$ENV{LC_ALL} = "C"},
    "f!" => \$find_file_only,
    "l!" => \$list_beagrep,
    "o!" => \$only_grep_myself,
    "s!" => \$short_format,
    "rewrite=s" => \$replace_with,
    ) or die;

if ($pwd_opt) {
    $abc_base = "";
}

if ($replace_with) {
    my $char_1 = substr($replace_with, 0, 1);
    my @parts = split($char_1, $replace_with);
    my $re = $parts[1];
    my $with = $parts[2];
    $pat =~ s/$re/$with/;
}

if ($ignore_case) {
  $ignore_case = '-i';
} else {
  $ignore_case = '';
}

if ($grep_use_perl_regexp) {
    $grep_use_perl_regexp = '-P';
} else {
    $grep_use_perl_regexp = '';
}


die 'no regexp specified' unless $pat;
if ($pwd_opt) {
    if (not -d $pwd_opt) {
        $pwd_opt = qx(select-beagrep-dir $pwd_opt);
    }
    $pwd = realpath $pwd_opt;
}
chdir $pwd or die "$pwd: $!";

my $pat_implicit_path = $pat;

if ($find_file_only) {
  $ENV{FIND_FILE_ONLY} = 1;
  if ($pat =~ m/:([0-9]+)$/) { #hack for using beagrep in java-bt-mode
      $file_default_line = $1;
      $pat = substr($pat, 0, rindex($pat, ':'));
      if ($pat =~ m/(.*)\(/) {
          $file_tag = $1;
          $pat = substr($pat, index($pat, '(') + 1);
      }
      $pat_implicit_path = $pat;
  }
  $pat =~ s,.*/,,; #beagrep can only find a filename, not a path name.
  $pat_implicit_path = $pat;
}

if ($pat_implicit_path =~ m/\(|\)/) {
    # hack for fixing unexpected error messages when we actually
    # should not do implicit path matching
    $pat_implicit_path = "^it can not be a path pat, do not bother!";
}

$pat = shell_quote($pat);
debug "pat is: $pat.\n";

# debug "beagrep query argument `[01;31m"
#   . substr(qx/beagrep-get-tokens $pat/, 0, -1)
#   . "[0m'\n";

my $beagrep_files_cmd = "beagrep-files -- $use_tokens";
if (not $use_tokens) {
    $beagrep_files_cmd = "beagrep-files -- $pat $additional_tokens";
}

my $beagrep_files_pipe;
if ($abc_base) {
    open($beagrep_files_pipe, "-|", "abc-x", "-b", "$abc_base", "abc-files", "$pat $additional_tokens");
} else {
    open($beagrep_files_pipe, "-|", $beagrep_files_cmd);
}



my $pwd_save = $pwd;
my $cache_dir = "$ENV{HOME}/.cache/system-config/for-code-reading";
my $db_dir = "$cache_dir/$pwd";
if ($use_beagrep_for_dir) {
    $use_beagrep_for_dir = realpath $use_beagrep_for_dir;
    $db_dir = "$cache_dir/$use_beagrep_for_dir";
    if (not $use_top_code_dir) {
        die "with -D $use_beagrep_for_dir, you must specify top_code_dir with -T"
    } else {
        $pwd = realpath $use_top_code_dir;
    }
}
while (! -d "$db_dir/.beagrep") {
    debug "no beagrep db at $db_dir";
    $pwd =~ s!(.*)/.*!$1!;
    if (not $pwd or $pwd eq "/") {
        $pwd = qx(lookup-file -e .repo);
        if ($pwd) {
            $pwd =~ s/.repo$//;
            $db_dir = "$cache_dir/$pwd";
            last;
        } else {
            die "Can not find beagrep data for $pwd_save";
        }
    }
    $db_dir = "$cache_dir/$pwd";
    debug "change db to $db_dir";
}
debug "found beagrep db at $db_dir";

@fallback_dirs = glob("$db_dir/.beagrep-fallback.*");
if (@fallback_dirs) {
    debug "We have found fall back dirs: @fallback_dirs\n";
} else {
    debug "We have no fallbacks at $db_dir/.beagrep-fallback.*"
}

chdir $pwd;
chomp($pwd = qx/pwd -P/);
my $start = length($pwd) + 1;
if ($short_format) {
    printf "Using short format, Entering directory \`%s'\n", $pwd;
}

if ($list_beagrep) {
    while (<$beagrep_files_pipe>) {
        $_ = substr($_, $start) if ($short_format and not $abc_base);
        print "$_:$file_default_line: [01;31m****************![0m\n";
    }
    exit 0;
}

my @beagrep_files;
if (!$find_file_only) {
    open(my $grep, "|xargs -d '\\n' -- grep -e $pat -H -n -I $ignore_case $grep_add_opts $grep_use_perl_regexp");

    while (<$beagrep_files_pipe>) {
        chomp;
        $_ = substr($_, $start) if ($short_format and not $abc_base);
        push @beagrep_files, $_;
        next unless m/$pathpat/i;
        next if m/$pathdeny/i;
        print $grep "$_\n";
    }
    close $grep; # perldoc -f close, search for wait, the "xargs grep"
                 # subprocess is finished when this returns
}

#see [[http://baohaojun.wordpress.com/2010/05/06/beagrep-grep-sh%E5%8A%9F%E8%83%BD%E5%8F%88%E5%8F%98%E5%BC%BA%E5%A4%A7%E4%BA%86/]] for why
if ($find_file_only || 1) {
    my %path_match_set;
    debug "pat_implicit_path is $pat_implicit_path, pathpat is $pathpat";
    for (@beagrep_files) {
        $path_match_set{$_} = 1 if m/$pat_implicit_path/i and m/$pathpat/i;
    }
    if ($find_file_only && keys %path_match_set > 1 && $file_tag) {
        my $files = qx(grep-gtags -e $file_tag|perl -ne "if (m/:[0-9]+:/) {s/:[0-9]+:.*//; print}"|sort -u);
        my @files = split("\n", $files);
        for (@files) {
            print "$_:$file_default_line: [01;31m****************![0m\n"
                if $path_match_set{$_} and m,/$pat_implicit_path$,; # the `and' part is to make file name match totally
        }
    } else {
        for (@beagrep_files) {
            print "$_:$file_default_line: [01;31m****************![0m\n" if $path_match_set{$_};
        }
    }
}

if (@fallback_dirs and not $ENV{DOING_BEAGREP_FALLBACK} and not $only_grep_myself) {
    $ENV{DOING_BEAGREP_FALLBACK} = 1;
    for (@fallback_dirs) {
        $_ = realpath $_;
        $_ =~ s,/.*\.cache/system-config/for-code-reading,,;
        print("Going to work in $_\n");
        chdir $_ or die "Can't chdir to $_";
        $ENV{PWD} = $_;
        system("beagrep", @saved_args, "-d", "$_");
    }
}
