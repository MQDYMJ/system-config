#!/bin/bash
set -e

if echo $SHELLOPTS | grep -q xtrace; then
    export SHELLOPTS
fi


## start code-generator "^\\s *#\\s *"
# generate-getopt @check-first
## end code-generator
## start generated code
TEMP=$(getopt -o h \
              --long check-first,help,no-check-first \
              -n $(basename -- $0) -- "$@")
check_first=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --check-first|--no-check-first)
            if test "$1" = --no-check-first; then
                check_first=false
            else
                check_first=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]check-first'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code


if grep '^deb htt' /etc/apt/sources.list; then
    sudo dpkg --add-architecture i386 || true
    sudo perl -npe 's/^deb\s+\b/deb [arch=amd64,i386] /' -i /etc/apt/sources.list
    sudo apt-get update
fi

if test $# = 1; then
    if test ! -d "$1" && test -d ~/system-config/bin/Linux/config/"$1"; then
        set -- ~/system-config/bin/Linux/config/$1
    fi
    if test -d "$1"; then
        export PACKAGES_DIR=$(readlink -f "$1")
        set --
    fi
fi

if test $# != 0; then
    packages=$(echo "$@")
else
    packages_dir=${PACKAGES_DIR:-~/system-config/bin/Linux/config/pkgs/}
    packages=$(
        (
            find "$packages_dir" -maxdepth 1 -type f
            packages_dir_by_dist=~/system-config/bin/Linux/config/install-pkgs-by-distribution/$(lsb_release -s -c 2>/dev/null)/$(basename -- "$packages_dir")
            if test -d "$packages_dir_by_dist"; then
                find "$packages_dir_by_dist" -maxdepth 1 -type f
            fi
        ) | perl -npe 's,.*/,,'|grep -v '^\.' -P)

    if test -d "$packages_dir/$USER"; then
        packages="$packages $(find "$packages_dir/$USER" -maxdepth 1 -type f|perl -npe 's,.*/,,')"
    fi
fi

export complete_packages_list="$packages"

if test "$check_first" = true; then
    need_install=false
    for x in $packages; do
        if ! dpkg-query -l $x >/dev/null 2>&1; then
            need_install=true
            hint "你需要安装 $x 程序，可能需要输入sudo密码"
            break
        fi
    done
    if test "$need_install" = false; then
       exit
    fi
fi

export LC_ALL=C
export LANG=C
export retry=1
unset -f sudo
if test "$http_proxy"; then
    function sudo() {
        command sudo env http_proxy="$http_proxy" "$@"
    }
fi

while ! sudo apt-get install "$@" -y $packages; do
    retry=$((retry + 1))
    if (( retry % 20 == 0)); then
        if yes-or-no-p "I have tried 20 times, should we continue trying to install?"; then
            true
        else
            echo "Failed: package installation not complete. Please ask for help."
            exit 1
        fi
    fi
    packages=$(arg1-arg2 "$packages" "$(sudo apt-get install "$@" -y $packages 2>&1)");
    echo installing: $packages
done

if test $# = 0 || yes-or-no-p -y "install missing packages?"; then
   ~/system-config/bin/Linux/config/install-missing-pkgs "$@"
fi
if test "$#" = 0; then
    for x in ${PACKAGES_DIR:-~/system-config/bin/Linux/config/pkgs/}/*:*; do
        if test ! -e "$x"; then
            continue
        fi
        sudo apt-get install -y "${x##*/}" || true
    done
fi
