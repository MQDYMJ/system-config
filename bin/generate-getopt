#!/bin/bash

# [[file:~/system-config/knuth-mode/generate-getopt.org::*%E6%9C%80%E7%BB%88%E8%84%9A%E6%9C%AC][the-ultimate-script]]

# All bash scripts should start with ~set -e~ to fail early and loudly.
set -e
declare -A short_opts_map
declare -A long_opts_map
declare -A help_map
declare -A default_val_map
declare -A var_name_map

## start code-generator "^\\s *#\\s *"
# generate-getopts p:prefix Pposixly-correct lis-local H:global-help eexport-all
## end code-generator
## start generated code

export_all=false
global_help=
is_local=false
posixly_correct=false
prefix=
OPTIND=1
while getopts "eH:lPp:h" opt; do
    case "$opt" in

        e) export_all=true ;;
        H) global_help=$OPTARG ;;
        l) is_local=true ;;
        P) posixly_correct=true ;;
        p) prefix=$OPTARG ;;
        h)
            echo
            echo
            printf %06s%s '-e ' 'export-all'
            printf %-24s ''
            echo ''
            printf %06s%s '-H ' 'global-help'
            printf %-24s 'GLOBAL_HELP'
            echo ''
            printf %06s%s '-l ' 'is-local'
            printf %-24s ''
            echo ''
            printf %06s%s '-P ' 'posixly-correct'
            printf %-24s ''
            echo ''
            printf %06s%s '-p ' 'prefix'
            printf %-24s 'PREFIX'
            echo ''
            shift
            exit 0
            ;;
        *)
            echo
            echo
            printf %06s%s '-e ' 'export-all'
            printf %-24s ''
            echo ''
            printf %06s%s '-H ' 'global-help'
            printf %-24s 'GLOBAL_HELP'
            echo ''
            printf %06s%s '-l ' 'is-local'
            printf %-24s ''
            echo ''
            printf %06s%s '-P ' 'posixly-correct'
            printf %-24s ''
            echo ''
            printf %06s%s '-p ' 'prefix'
            printf %-24s 'PREFIX'
            echo ''
            exit 2
            ;;
    esac
done

shift $((OPTIND - 1))

## end generated code


if [[ $1 =~ ^\? ]]; then
    global_help=${1:1}
    shift
fi

while test "$1"; do
    spec=$1
    shift

    if [[ $spec =~ ^@ ]]; then
        short=
    else
        short=${spec:0:1}
    fi
    spec=${spec:1}
    if [[ $spec =~ ^: ]]; then
        short=$short:
        spec=${spec:1}
    fi

    long=$(echo "$spec"|perl -npe 's/(\?|=).*//')
    help=$(echo "$spec" | perl -ne 'print if s/.*\?(.*?)(=.*|$)/$1/')
    default=$(echo "$spec" | perl -ne 'print if s/.*=(.*?)(\?.*|$)/$1/')

    while true; do
        if test "${1:0:1}" = '?'; then
            help=${1:1}
            shift
        elif test "${1:0:1}" = '='; then
            default=${1:1}
            shift
        else
            break
        fi
    done

    short_opts_map[$long]=$short
    long_opts_map[$long]=$long
    if [[ $short =~ : ]]; then
        long_opts_map[$long]=$long:
    fi

    if ! [[ $short =~ : ]]; then
        default_val_map[$long-off-]=false
        default_val_map[$long-on-]=true

        if [[ $default =~ \( ]]; then
            eval bool_val=$default
            default_val_map[$long-off-]=${bool_val[0]}
            default_val_map[$long-on-]=${bool_val[1]}
            if test ${#bool_val} = 3; then
                default=${bool_val[2]}
            else
                default=${bool_val[0]}
            fi
        elif test -z "$default"; then
            default=false
        fi
    fi

    default_val_map[$long]=$default
    help_map[$long]=$help
    var_name_map[$long]=${long//-/_}
    if test "$prefix"; then
        var_name_map[$long]=${prefix}_${long//-/_}
    fi
done

eval "$(sort-args.reliably -t long_opts_sorted -- "${!long_opts_map[@]}")"

output-no-long-opts() {
    output_done=false
    for long in "${long_opts_sorted[@]}"; do
        short=${short_opts_map[$long]}
        if ! [[ $short =~ : ]]; then
            echo -n ,no-$long
        fi
    done
}

cat <<EOF
TEMP=\$($(
            if test "$is_local" = true -o "$posixly_correct" = true; then
                echo POSIXLY_CORRECT=true
            fi
        ) getopt -o $(string-join '' $(for x in "${long_opts_sorted[@]}"; do x="${short_opts_map[$x]}"; if test "$x" -a "$x" != :; then echo $x; fi; done) h) \\
 --long $(string-join , $(for x in "${long_opts_sorted[@]}"; do echo ${long_opts_map[$x]}; done) help; output-no-long-opts) \\
 -n \$(basename -- \$0) -- "\$@")
  $(
for long in "${long_opts_sorted[@]}"; do
    var=${var_name_map[$long]}
    declare declare_opt=
    if test "$export_all" = true; then
        declare_opt=" -x"
    fi
    declare is_array_var=false
    if test "${default_val_map[$long]:0:1}" = '('; then
        declare_opt="$declare_opt -a"
        is_array_var=true
    fi
    if test "$export_all" = false -o "$is_array_var" = true; then
        echo declare${declare_opt} ${var}=${default_val_map[$long]}
    else
        echo declare${declare_opt} ${var}=\$\{$var:-${default_val_map[$long]}\}
    fi
done
  )
eval set -- "\$TEMP"
while true; do
  case "\$1" in

  $(
for long in "${long_opts_sorted[@]}"; do
    s=${short_opts_map[$long]}
    is_boolean=true
    if [[ $s =~ : ]]; then
        is_boolean=false
    fi
    s=${s/:/}
    var=${var_name_map[$long]}
    cat << EOF2
$(
    if test "$s"; then
        echo -n "-$s|"
    fi
    echo -n "--$long";
    if test "$is_boolean" = true; then
        echo -n "|--no-$long"
    fi
    echo ")"
)
$(
    if test $is_boolean = false; then
        if test "${default_val_map[$long]:0:1}" = '('; then
            echo ${var}=\(\"\${${var}[@]}\" \""\$2\""\)
            echo shift 2
        else
            echo ${var}=\$2
            echo shift 2
        fi
    else
        cat << EOF3
if test "\$1" = --no-$long; then
    ${var}=${default_val_map[$long-off-]}
else
    ${var}=${default_val_map[$long-on-]}
fi
shift

EOF3
    fi
)

EOF2
    echo ";;"
done

  )
-h|--help)
    $(
        echo set +x
        echo echo -e "$global_help"
        echo echo
        echo echo Options and arguments:
        for long in ${long_opts_sorted[@]}; do
            short=${short_opts_map[$long]}
            is_boolean=true
            if [[ $short =~ : ]]; then
                is_boolean=false
            fi
            short=${short/:/}
            if test "$short"; then
                echo printf "%06s" "'-$short, '"
            else
                echo 'printf "%06s" " "'
            fi
            long_output=$(
                if test "$is_boolean" = true; then
                    echo -n --[no-]$long
                else
                    uc_long=$long
                    uc_long=${uc_long^^}
                    echo -n --$long=${uc_long//-/_}
                fi
                       )
            opt_chars=$(( ${#long_output} + 6))
            echo printf "%-24s" "'$long_output'"
    
            if test "${help_map[$long]}"; then
                if test "$opt_chars" -gt 30; then
                    echo echo
                    echo 'printf "%30s" ""'
                fi
                echo echo "${help_map[$long]}"
            else
                echo echo
            fi
        done
        echo exit
    )
    shift
    ;;
--)
   shift
   break
   ;;
   *)
       die "internal error"
       ;;
   esac
done

EOF

# Local Variables: #
# eval: (read-only-mode 1) #
# End: #

# the-ultimate-script ends here
