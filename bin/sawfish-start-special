#!/bin/bash

set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

## start code-generator "^\\s *#\\s *"
# generate-getopt -P t:special-tag p:start-program c:window-class
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o t:p:c:h \
                      --long special-tag:,start-program:,window-class:,help \
                      -n $(basename -- $0) -- "$@")
declare special_tag=
declare start_program=
declare window_class=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -t|--special-tag)
            special_tag=$2
            shift 2

            ;;
        -p|--start-program)
            start_program=$2
            shift 2

            ;;
        -c|--window-class)
            window_class=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-t, '
            printf %-24s '--special-tag=SPECIAL_TAG'
            echo
            printf %06s '-p, '
            printf %-24s '--start-program=START_PROGRAM'
            echo
            printf %06s '-c, '
            printf %-24s '--window-class=WINDOW_CLASS'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

sawfish-client -e "(setq old-list-of-windows.$$ (managed-windows))"
. atexit sawfish-client -e "(unintern 'old-list-of-windows.$$)"

my_pid=$$

sawfish_find_tagged_window_command=$(
    cat <<EOF
; {%sawfish-mode%}
(catch 'found
  (mapc
   (lambda (w)
     (when (eq (window-get w 'special) '$special_tag)
       (bhj-activate-window w)
       (throw 'found '$special_tag)))
   (managed-windows)))
; {%/sawfish-mode%}
EOF
                                  )

sawfish_tag_it_command=$(
    cat <<'EOF83dab6c15b01' | . .replace-%% --
; {%sawfish-mode%}
(cond
 ((member (input-focus) old-list-of-windows.<%my_pid%>) (format nil "window %s is old" (input-focus)))
 ((string-match "<%window_class%>" (window-class (input-focus)) nil t)
  (window-put (input-focus) 'special '<%special_tag%>)
  "we are done")
 (t "window is new, but not match"))
; {%/sawfish-mode%}
EOF83dab6c15b01
                      )

if test "$(sawfish-client -e "$sawfish_find_tagged_window_command")" = $special_tag; then
    exit 0
else
    $start_program&
    for try in $(seq 1 30); do
        if test "$(sawfish-client -e "${sawfish_tag_it_command}")" = '"we are done"'; then
            break
        fi
        sleep $((try/10)).$((try%10))
    done
fi
