#!/bin/bash
set -e
if test "$SYSTEM_CONFIG_INITED" != true; then
    . ~/system-config/.bashrc
fi

if [[ $PWD =~ /\.repo($|/) ]]; then
    cd $(lookup-file .repo)/..
fi

if test "$1" = init; then
    if is-jenkins; then
        set -- "$@" -g all --reference /data/mirror
    fi
    if test -e .repo/manifest.xml; then
        xmlstarlet sel -t -m //copyfile -v @dest -n .repo/manifest.xml|xargs rm -f
    fi || true
    if test -e .repo -a ! -e .repo/manifest.xml; then
        rm -f .repo/manifest.xml
    fi
    saved_args=()
    should_cd=false
    build_dir=
    while test "$1"; do
        if [[ "$1" =~ ^\!.*\! ]]; then
            build_dir=$HOME/jw/$(echo "$1" | perl -npe 's/!(.*)!.*/$1/')
            should_cd=true
        fi
        saved_args=("${saved_args[@]}" "${1#\!*\!}")
        shift
    done
    set -- "${saved_args[@]}"
    if test "$should_cd" = true; then
        mkdir -p $build_dir
        rm -f ./.true_build_dir .repo
        relative-link $build_dir ./.true_build_dir
        relative-link $build_dir/.repo ./
        cd $build_dir
    fi
elif test -d ./.true_build_dir; then
    cd "$(readlink -f ./.true_build_dir)"
fi

old_manifest_target=
if is-jenkins; then
    set -x
    if test "$1" = init; then
        scm check-df
        if test -e .repo/manifest.xml; then
            old_manifest_target=$(readlink -f .repo/manifest.xml)
        fi
    fi
    if test "$1" = init -a -d .repo/manifests/.git; then
        (
            cd .repo/manifests/
            if test "$(git config repo.depth)" = 1; then
                die "Can't do repo with depth=1 in jenkins task, will lock up gerrit"
            fi
        )
        echo "will now do repo init, but no sync yet." > .repo/grep-errors.txt
        (
            cd .repo/manifests
            git reset --hard
            git clean -xfd
            find . -type f -name '*.xml'|xargs touch /dev/null
        )
        if (
            cd .repo/manifests/
            git tag 2>&1 | grep -q 'does not point to a valid object'
        ); then
            rm .repo/manifests .repo/manifests.git .repo/manifest.xml -rf
        fi
    fi
fi

if test "$1" = init; then
    (
        if test -d .repo; then
            cd .repo
            rm repo-paths repo_info.pl -f
        fi
    ) || true
fi

if test "$1" = sync -a "$(arg1-arg2 -- -h "$@")" = -h -a "$(arg1-arg2 -- --help "$@")" = --help; then
    if test -d "$(lookup-file -e .repo/manifests)"; then
        (
            cd $(lookup-file .repo/manifests)
            git_remote_url=$(git-remote-url || true)
            if [[ $git_remote_url =~ ^smartisan: ]]; then
                git config remote.origin.url ssh://gerrit.smartisan.cn/${git_remote_url#smartisan:}
            elif ! git-remote-url | grep :// -q; then
                if is-jenkins; then
                    die "Can't download source code from $(git-remote-url)"
                else
                    hint "你的 repo init 初始化参数使用方法已过时，最新方法需要使用 -u ssh:// 的格式，否则代码同步可能出错"
                    hint "请使用 repo-switch -p 查看你之前 repo init 时使用的命令，然后改一下 -u 参数，重新 repo init 一遍"
                fi
                fi
        ) || true
    fi
    set -- "$@" --no-tags
    if grep -e --force-sync .repo/repo/subcmds/sync.py >/dev/null 2>&1; then
        set -- "$@" --force-sync
    fi

    repo_sync_log=~/tmp/repo-sync.log.$$
    if (
        set -o pipefail
        if is-jenkins; then
            time stdbuf -oL -eL ~/system-config/bin/repo "$@" 2>&1| tee $repo_sync_log
        else
            touch $repo_sync_log || true
            time ~/system-config/bin/repo "$@"
        fi
    ); then
        rm $repo_sync_log -f
        if option-included -n "$@"; then
            true
        elif is-jenkins; then
            true # no need to config on jenkins, let's assume we won't fetch tags.
        else
            (my-rfa 'git config remote.$(repo-remote).tagopt --no-tags' >/dev/null 2>&1&)
        fi || true
    else
        ret=$?
        if is-jenkins && test "$REDO_REPO_SYNC" != true; then
            if test -e .repo/do-not-retry-sync; then
                exit 1
            fi
            export REDO_REPO_SYNC=true
            (
                if grep "Permission denied (publickey)" $repo_sync_log &&
                        grep "fatal: Could not read from remote repository" $repo_sync_log; then
                    # this might be temporary
                    sleep 60
                    if ~/system-config/bin/repo "$@"; then
                        mail-cms "Info: Jenkins repo sync repaired after retry."
                        rm $repo_sync_log
                        exit 0
                    else
                        mail-cms "Warn: Jenkins repo sync still failing after retry."
                    fi
                fi
                (
                    cd $(lookup-file -e .repo/manifests)
                    if test "$(git config repo.mirror)" = true; then
                        readlink -f .repo/manifest.xml |
                            mail-cms -e -i "Jenkins mirror repo sync failed for $(jenkins-info)"
                        exit 1
                    fi
                )
                cd $(lookup-file -e .repo/..)
                rm * -rf
                (
                    cd .repo
                    rm project-objects/ projects/ -rf
                )
                mail-cms "Warn: Jenkins repo sync failed for $JOB_NAME, will remove all and try again"
                ~/system-config/bin/repo "$@"
            )
        else
            exit $ret
        fi
    fi
    if is-jenkins; then
        echo "repo sync completed" >> .repo/grep-errors.txt
        scm check-repo-project-objects
    fi
    exit
else
    if ~/system-config/bin/repo "$@"; then
        if test "$1" = init -a ! -e .repo/using-fast-sync && is-jenkins; then
            repo-external --do-delete &&
                rm  .repo/project.list -f &&
                scm -x check-manifests-project-reuse --do-clean || (
                    sleep 5 # maybe it's being aborted!
                    mail-cms "Can't force manifest reuse projects, will force clean"
                    sc_tmpdir=.repo/delete.$$
                    rm -rf $sc_tmpdir # just in case last time it's not deleted.
                    mkdir -p $sc_tmpdir
                    mv * .repo/projects $sc_tmpdir || true
                    rm $sc_tmpdir -rf&
                )
            (
                function clean-a-repo() {
                    if test -d .git; then
                        exec 9> .git/sc-clean-repo.lock
                        flock 9
                        if git reset --hard && git clean -xfd; then
                            echo clean: $PWD
                            exit 0
                        else
                            echo Failed to clean: $PWD
                            rm $PWD -rf
                            if git_dir=$(lookup-file -e .git/..); then
                                cd "$git_dir"
                                if lookup-file -e .repo/..; then
                                    clean-a-repo
                                fi
                                exit 0
                            else
                                mail-cms -o "Warn: repo failed to clean: $PWD"
                                exit 1
                            fi

                        fi
                    fi
                }
                export -f clean-a-repo
                my-rfa 'clean-a-repo' || true
                cd .repo
                rm repo-paths repo_info.pl -f
            )
        fi

        exit 0
    else
        ret=$?
        if test "$1" = init -a -e ".repo/local_manifests"; then
            echo 1>&2 "Warning: you have local_manifest set, might cause error"
        fi
        exit $ret
    fi
fi
