#!/usr/bin/env perl

use String::ShellQuote;
use strict;
## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl @:strace-output
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $strace_output = "";

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '';
    printf "%-24s", '--strace-output=STRACE-OUTPUT';
    if (length('--strace-output=STRACE-OUTPUT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    exit(0);
};

GetOptions (
    'strace-output=s' => \$strace_output,
    'help|h!' => \&$handler_help,
);


## end generated code
use v5.10;
if (not $strace_output) {
    $strace_output = qx(getclip);
    $strace_output =~ s/\n//g;

    $strace_output =~ s/\@/\\@/g;

    use String::ShellQuote;
    my $strace_output = shell_quote($strace_output);

    if (system("export EMACS=t; yes-or-no-p use this as command: $strace_output") != 0) {
        &$handler_help(1);
    }
}

my $strace_aref;
eval "\$strace_aref = $strace_output" or
    die "Can't do eval: $@";


$, = " ";
print "running: ", shell_quote(@$strace_aref);
