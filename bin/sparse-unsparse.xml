#!/bin/bash
set -e
if test $# = 0; then
    set -- -p system -o ~/tmp/system.img.$$
    echo "$@"
fi

## start code-generator "^\\s *#\\s *"
    # generate-getopt ?'把高通system_NNN.img等稀疏文件拼成system.img文件，一个可以mount的ext4文件系统' \
        #p:part?'指定对应哪个分区的稀疏文件，可选system、userdata、cache、persist等' \
        #o:out?'最终输出文件路径' \
        #x:xml?'使用哪个unsparse.xml文件中的文件块区域信息。不指定的话会自动查找当前目录下所有相关.xml文件'
## end code-generator
## start generated code
TEMP=$(getopt -o o:x:p:h \
              --long out:,xml:,part:,help \
              -n $(basename -- $0) -- "$@")
out=
xml=
part=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -o|--out)
            out=$2
            shift 2
            ;;
        -x|--xml)
            xml=$2
            shift 2
            ;;
        -p|--part)
            part=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo 把高通system_NNN.img等稀疏文件拼成system.img文件，一个可以mount的ext4文件系统
            echo
            echo Options and arguments:
            printf %06s '-o, '
            printf %-24s '--out=OUT'
            echo '最终输出文件路径'
            printf %06s '-p, '
            printf %-24s '--part=PART'
            echo '指定对应哪个分区的稀疏文件，可选system、userdata、cache、persist等'
            printf %06s '-x, '
            printf %-24s '--xml=XML'
            echo '使用哪个unsparse.xml文件中的文件块区域信息。不指定的话会自动查找当前目录下所有相关.xml文件'
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test -z "$part"; then
    part=system
fi

if test -z "$xml"; then
    xml=rawprogram_unsparse.xml
fi

if test ! -e "$xml"; then
    xml=$(find . -name '*.xml' | xargs grep -l system_ |pn 1)
fi

if test -z "$out"; then
    out=~/tmp/${part}.img
fi

function die() {
    echo Error: "$@"
    exit -1
}

if test ! "$part"; then
    die "part not set, should use -p to set system/userdata/cache etc"
fi
if test -d sparse_images -a ! -e "$(echo system_1.*)"; then
    cd sparse_images
fi
bs=$(xmlstarlet sel -B -t -m //program -v @SECTOR_SIZE_IN_BYTES -n $xml|sort -u)
if test "$(echo "$bs"|wc -l)" != 1; then
    die "block size not decided: $bs"
fi
xmlstarlet sel -t -m //program -v @filename -o " " -v @start_sector -n $xml | grep ${part} |
{
    while read img start; do
        if [[ $img =~ ${part}_1\. ]]; then
            the_start=$start
        fi
        start=$((start - the_start)) || true
        dd if=$img of=${out} seek=$start bs=$bs
    done
    dd if=/dev/zero of=${out} seek=$(pretty 1000000+$(stat -c %s ${out})/512|pn 2) count=1 bs=$bs
}
