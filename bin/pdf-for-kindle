#!/bin/bash

set -e

paper=a4
duplicate=5mm
scale=1.2
max=-1

pagespec=
TEMP=$(getopt -o d:m:p: -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
        -p)
            pagespec=$2
            shift 2
            ;;
        -d)
            duplicate=$2
            shift 2
            ;;
        -m)
            max=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done

function die() {
    echo "$@"
    exit -1
}

function sum() {
    subtract "$1" "$(subtract 0 "$2")"
}

pdf=$1
old_pdf=$1

if test -e odd.pdf && yes-or-no-p "Clean up?"; then
    rm -f odd-*.pdf even-*.pdf odd.pdf even.pdf seq-*.pdf
    for x in left bot right top; do
        rm $x.pdf -f
    done
fi


if test ! -e odd.pdf; then
    pdf-split.sh "$pdf"
    pdf-intwine.sh odd.pdf even.pdf -o out.pdf
    pdf=out.pdf
fi

o_width=$(pdf-get-width "$pdf")
o_height=$(pdf-get-height "$pdf")

if test ! -e odd-cut.pdf || yes-or-no-p "Redo odd.pdf cut?"; then
    if test "$CUT_SPEC_ODD"; then
        cut=$CUT_SPEC_ODD
    else
        cut=$(pdf-get-cut.sh odd.pdf)
    fi
    pdf-cut $cut odd.pdf -p "$pagespec"
    export CUT_SPEC=$(echo "$cut" | perl -npe 's/(-l|-r)/if ($1 eq "-l") {"-r"} else {"-l"}/eg')
fi

if test ! -e even-cut.pdf || yes-or-no-p "Redo even.pdf cut?"; then
    read -e -p "Press any key to continue... "
    if test "$CUT_SPEC_EVEN"; then
        cut=$CUT_SPEC_EVEN
    else
        cut=$(pdf-get-cut.sh even.pdf)
    fi
    pdf-cut $cut even.pdf -p "$pagespec"
fi

n_width=$(pdf-get-width odd-cut.pdf)
n_height=$(pdf-get-height odd-cut.pdf)

function scale() {
    perl -e "print ($1 * $2)";
}


half_n_height=$(scale $n_height 0.5)
cut_n_height=$(subtract $n_height $half_n_height)
cut_n_height=$(subtract $cut_n_height $duplicate)
remaining_n_height=$(subtract $n_height $cut_n_height)


test $# != 1 && die "Error: Usage $(basename $0) PDF"

test -e "$pdf" || die "Error: $pdf does not exist";

pdf=${pdf%.pdf}

for x in odd even; do
    pdfnup --no-landscape --rotateoversize false  --nup 1x1 --papersize "{${n_width}pt,${remaining_n_height}pt}" \
        --trim "0pt ${cut_n_height}pt 0pt 0pt" --outfile $x-top.pdf $x-cut.pdf
    pdfnup --no-landscape --rotateoversize false  --nup 1x1 --papersize "{${n_width}pt,${remaining_n_height}pt}" \
        --trim "0pt 0pt 0pt ${cut_n_height}pt" --outfile $x-bot.pdf $x-cut.pdf
    run-in-parallel -I %N "pdfjoin --no-landscape --rotateoversize false  $x-top.pdf %N $x-bot.pdf %N --outfile $x-join-%N.pdf" $(seq 1 $(pdf-get-pages $x-top.pdf))
done

pages=$(pdf-get-pages odd-cut.pdf)
for page in $(seq 1 $pages); do
    for x in odd even; do
        if test -e $x-join-$page.pdf; then
            echo $x-join-$page.pdf
        fi
    done
done | xargs pdfjoin --no-landscape --rotateoversize false  --outfile final.pdf

pdf90 final.pdf --outfile "${old_pdf/%.pdf/.Kindle.pdf}"
rm odd-*.pdf even-*.pdf -f odd.pdf even.pdf seq-*.pdf

for x in left bot right top; do
    rm $x.pdf -f
done

destroy-windows evince || true

#mv "$pdf"-nup-bot-$y-joined-joined-rotated90.pdf kindle-"$pdf".pdf
#rm -rf "$pdf"-nup*.pdf
