#!/bin/bash

set -e

if test -e ~/src/github/smartcm/etc/ldap.rc; then
    . ~/src/github/smartcm/etc/ldap.rc >/dev/null 2>&1
fi

## start code-generator "^\\s *#\\s *"
    # generate-getopt u:user='${scm_ldap_user:-$(get-about-me ldap-user)}' \
        # p:pass \
        # ddecode g:glob='"*"' '?"默认为「*」，在要搜索的名字前后添加此参数。如需精确搜索，请使用 -g \"\""' \
        # m:match-regexp=. '?"只输出匹配正则表达式 MATCH_REGEXP（默认为「.」）的行"' \
        # eexact-query-input '?"不要修改我的 query input"' \
        # @:group '?"在某个组中搜索此用户"'
## end code-generator
## start generated code
TEMP=$( getopt -o deg:m:p:u:h \
               --long decode,exact-query-input,glob:,group:,match-regexp:,pass:,user:,help,no-decode,no-exact-query-input \
               -n $(basename -- $0) -- "$@")
declare decode=false
declare exact_query_input=false
declare glob="*"
declare group=
declare match_regexp=.
declare pass=
declare user=${scm_ldap_user:-$(get-about-me ldap-user)}
eval set -- "$TEMP"
while true; do
    case "$1" in

        -d|--decode|--no-decode)
            if test "$1" = --no-decode; then
                decode=false
            else
                decode=true
            fi
            shift

            ;;
        -e|--exact-query-input|--no-exact-query-input)
            if test "$1" = --no-exact-query-input; then
                exact_query_input=false
            else
                exact_query_input=true
            fi
            shift

            ;;
        -g|--glob)
            glob=$2
            shift 2

            ;;
        --group)
            group=$2
            shift 2

            ;;
        -m|--match-regexp)
            match_regexp=$2
            shift 2

            ;;
        -p|--pass)
            pass=$2
            shift 2

            ;;
        -u|--user)
            user=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-d, '
            printf %-24s '--[no-]decode'
            echo
            printf %06s '-e, '
            printf %-24s '--[no-]exact-query-input'
            echo "不要修改我的 query input"
            printf %06s '-g, '
            printf %-24s '--glob=GLOB'
            echo "默认为「*」，在要搜索的名字前后添加此参数。如需精确搜索，请使用 -g \"\""
            printf "%06s" " "
            printf %-24s '--group=GROUP'
            echo "在某个组中搜索此用户"
            printf %06s '-m, '
            printf %-24s '--match-regexp=MATCH_REGEXP'
            echo
            printf "%30s" ""
            echo "只输出匹配正则表达式 MATCH_REGEXP（默认为「.」）的行"
            printf %06s '-p, '
            printf %-24s '--pass=PASS'
            echo
            printf %06s '-u, '
            printf %-24s '--user=USER...'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


test $# = 0 && { echo "Usage: $(basename $0) match1 [match2] [[--] disp1 disp2 ... ]"; exit; }
matches=()
matches_done=false
disps=()

while test $# != 0; do
    if test ${#matches[@]} = 2 -o "$1" = --; then
        matches_done=true
    fi
    if test $matches_done = false; then
        matches=("${matches[@]}" "$1")
    else
        test "$1" != -- && disps=("${disps[@]}" "$1")
    fi
    shift
done

set -- "${matches[@]}"

if test "${group}"; then
    if ! [[ $group =~ = ]]; then
        group="CN=$group"
        group=$(
            comp-mail -d -e "$group" -m '^dn:'|pn 2
             )
        group="memberOf=$group"
    fi
fi


if test $# = 1; then
    if test "${exact_query_input}" = true; then
        query=$1
    elif [[ "$1" =~ = ]]; then
        query=$1
    else
        query=$(printf "(|(sAMAccountName=${glob}%s${glob})(cn=${glob}%s${glob})(sn=${glob}%s${glob})(mail=${glob}%s${glob})(displayName=${glob}%s${glob}))" "$1" "$1" "$1" "$1" "$1")
    fi
elif test $# = 2; then
    query='(|'
    f='sn mail givenName'
    for x in $f; do
        for y in $f; do
            test $x = $y && continue;
            query=$(printf '%s(&(%s=*%s*)(%s=*%s*))' "$query" $x $1 $y $2)
            done
        done
    query=$query')'
fi

if test "${group}"; then
    query="(&($group)${query})"
fi

function get-display() {
    perl -ne '
BEGIN{
    @f = @ARGV;
    @ARGV=();
    $str = "";
    $mail_str = "";

    sub print_it() {
        if ($mail_str) {
            print "$mail_str";
            if ($str) {
                print ":$str\n";
            }
            print "\n";
        }
    }
}

END {
    print_it;
}

chomp;
if (m/^dn: /) { # restart
    print_it;
    $str = "";
    $mail_str = "";
} elsif (m/^displayName: (.*)$/) {
    $mail_str = "\"$1\" $mail_str";
} elsif (m/^mail: (.*)$/) {
    $mail_str = "$mail_str<$1>";
} else {
    m/(.*?): (.*)/ or next;
    ($key, $val) = ($1, $2);
    for $f (@f) {
        if ($key =~ m/$f/i) {
            $str = "$str\n($key: $val)"
        }
    }
}
' "${disps[@]}"
}

function maybe-decode() {
    if test $decode = true; then
        decode-ldap-output
    else
        cat
    fi
}

function maybe-filter() {
    if test -x ~/.local-config/bin/comp-mail-filter; then
        ~/.local-config/bin/comp-mail-filter
    else
        cat
    fi | grep -P "${match_regexp}" -i
}

if test -z "${pass}"; then
    pass=$(git config -f "${scm_secrets_conf}" ldap.password)
fi

ldapsearch -LLL -b "${scm_ldap_dc}" \
    -P 3 \
    -H "${scm_ldap_url}" \
    -D "$user" \
    -w "${pass}" "$query" |
    maybe-decode |
    maybe-filter
