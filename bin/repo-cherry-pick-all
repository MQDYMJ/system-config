#!/bin/bash

set -e

function die() {
    echo Error: "$@"
    exit -1
}

function skip-current-repo() {
    exit 5
}

function skip-all-remaining-repos() {
    kill $$
    kill -9 $$
}

export -f skip-current-repo
export -f skip-all-remaining-repos

function cherry-ok() {
    ap=$1
    commit=$2

    ok_file=$(lookup-file -e out)/diff/${ap//\//%}.ok

    (echo -n 'ok: '; grep $commit ${ok_file/.ok/.log}) | tee -a $ok_file
}

function cherry-fail() {
    ap=$1
    commit=$2

    fail_file=$(lookup-file -e out)/diff/${ap//\//%}.fail

    (echo -n 'failed: '; grep $commit ${fail_file/.fail/.log})| tee -a $fail_file
    if test "$(wc -l $fail_file)" -gt 100; then
        echo "有冲突的patch太多了，之后的patch不再处理" | tee -a $fail_file
    fi
    git cherry-pick --abort
}

export -f cherry-ok
export -f cherry-fail

## start code-generator "^\\s *#\\s *"
# generate-getopt sshell hdo_here nno_fetch Rno_reverts ddry-run o:ok-function f:fail-function
## end code-generator
## start generated code
TEMP=$(getopt -o shnRdo:f: --long "shell,do_here,no_fetch,no_reverts,dry-run,ok-function:,fail-function:"  -n $(basename -- $0) -- "$@")
shell=false
do_here=false
no_fetch=false
no_reverts=false
dry_run=false
ok_function=
fail_function=
eval set -- "$TEMP"
while true; do
    case "$1" in
        -s|--shell)
            shell=true
            shift
            ;;
        -h|--do_here)
            do_here=true
            shift
            ;;
        -n|--no_fetch)
            no_fetch=true
            shift
            ;;
        -R|--no_reverts)
            no_reverts=true
            shift
            ;;
        -d|--dry-run)
            dry_run=true
            shift
            ;;
        -o|--ok-function)
            ok_function=$2
            shift 2
            ;;
        -f|--fail-function)
            fail_function=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

## end generated code


if test $# != 1; then
    die "Error: Usage $(basename $0) REGEXP_FOR_AUTHORS_AND_COMMITTERS"
fi

if test "$no_reverts" != true && yes-or-no-p -y "Skip reverted patches"; then
    no_reverts=true
fi


if test -d .repo; then
    diffs=$(rgrep -l -P -e "$1" out/diff | sort)
    (
        cd out/diff
        rm *.ok *.fail -f
    )
else
    prefix=$(lookup-file -e out/diff)/$(ap . | perl -npe 's!/!%!g')
    diffs=$(lookup-file -e $prefix.log)
    rm $prefix.ok $prefix.fail -f
    if test ! -e "$diffs"; then
        echo "diff file not found"
        exit 0
    fi
    if test "$ANDROID_TOP"; then
        cd "$ANDROID_TOP"
    elif test -e "$(lookup-file -e .repo/..)"; then
        cd $(lookup-file -e .repo/..)
    else
        cd $(lookup-file -e out/..)
    fi
fi

for diff_file in $diffs; do
    diff_file=$(readlink -f $diff_file)
    dir=$(echo $diff_file|perl -npe 's!.*/!!; s/.log$//; s!%!/!g')
    (
        cd $dir || exit 0
        if test "$(basename $0)" = repo-cherry-push-all; then
            if test "$ok_function"; then
                echo running $ok_function in $PWD
                $ok_function || true
                exit
            fi
            if ! start_recursive_shell repo-cherry-push-all; then
                if yes-or-no-p -y "Exited abnormally... Do you want to continue with the rest repos?"; then
                    exit 0
                else
                    exit 1
                fi
            else
                exit 0
            fi
        fi
        git reset --hard
        command git clean -xfd
        if test $no_fetch = false; then
            git fetch $(repo-remote)
        fi
        echo doing $dir
        if test $shell = true; then
            start_recursive_shell 'shell for cherry'
            exit
        fi
        if test $do_here = true; then
            target_branch=HEAD
        else
            target_branch=$(grep -o 'not found in .*' $diff_file|pn 4|head -n 1)
        fi

        if test -z "$target_branch"; then
            echo target branch is not found in $diff_file'!'
            if is-tty-io; then
                start_recursive_shell "No target branch" || ret=$?
            else
                exit $?
            fi
            if test "$ret" = 5; then
                exit
            elif test $ret = 4; then
                echo skipping $(ap)
                break
            fi
        else
            if test $do_here = false; then
                git checkout $target_branch -B $(
                    echo $target_branch | perl -npe 's!^(remotes/)?.*?/!!'
                    ) || true
            fi

            if test "$no_reverts" = true; then
                declare -A reverted_commits
                grep -P -e "$1" $diff_file | (
                    while read line; do
                        if echo "$line" | grep '{{{Revert "' -q; then
                            subject=$(echo "$line" | perl -npe 's,.*\{\{\{Revert "(.*)"\}\}\}.*,$1,')
                            reverted_commits[$subject]=1
                        fi
                    done
                    export reverted_commits
                    export -p |grep -P -e 'declare -Ax reverted_commits' > $diff_file.env
                )
                . $diff_file.env
            fi

            declare -A skiped_later_reverted_commits

            for git_commit_id in $(grep -P -e "$1" $diff_file |grep -v 'Merge commit.*into'| pn 3|uniq-even-non-ajacent); do
                export WORKING_REV=$git_commit_id
                ret=0
                if test "$no_reverts" = true; then
                    . $diff_file.env
                    subject=$(git log -1 --pretty=%s $git_commit_id)
                    if test "${reverted_commits[$subject]}" = 1 && yes-or-no-p -y skip $git_commit_id: $subject, it is reverted later?; then
                        echo skip $git_commit_id: $subject
                        skiped_later_reverted_commits[Revert \"$subject\"]=1
                        continue
                    fi

                    if test "${skiped_later_reverted_commits[$subject]}" = 1 && yes-or-no-p -y skip $git_commit_id: $subject, the original has been skipped?; then
                        echo skip $git_commit_id: $subject
                        skiped_later_reverted_commits[Revert \"$subject\"]=1
                        continue
                    fi
                fi
                if test "$dry_run" = true; then
                    continue
                fi
                if git cherry-pick -x --allow-empty $git_commit_id; then
                    if test "$ok_function"; then
                        "$ok_function" $(ap) $git_commit_id
                    fi
                elif test "$fail_function"; then
                    "$fail_function" $(ap) $git_commit_id
                elif is-tty-io; then
                    start_recursive_shell "cherry failed: $git_commit_id" || ret=$?
                else
                    exit -1
                fi
                if test $ret = 5; then
                    exit
                elif test $ret = 4; then
                    echo cherry-failed: $WORKING_REV in $(ap) |tee -a ~/tmp/repo-cherry-pick-all.txt
                    break
                fi
            done
        fi
    )
done
