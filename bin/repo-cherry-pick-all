#!/bin/bash

set -e

function die() {
    echo Error: "$@"
    exit -1
}

if test $# == 0; then
    die "please specify whose changes you want to cherry pick"
fi

shell=false
do_here=false
TEMP=$(getopt -o sh --long shell,here -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
        -s|--shell)
            shell=true
            shift
            ;;
        -h|--here)
            do_here=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

if test -d .repo; then
    diffs=$(rgrep -l -e "$1" out/diff | sort)
else
    diffs=$(lookup-file -e out/diff/$(ap . | perl -npe 's!/!%!g').log)
    if test ! -e "$diffs"; then
        die "diff file not found"
    fi
    if test "$ANDROID_TOP"; then
        cd "$ANDROID_TOP"
    elif test -e "$(lookup-file -e .repo/..)"; then
        cd $(lookup-file -e .repo/..)
    else
        cd $(lookup-file -e out/..)
    fi
fi

for x in $diffs; do
    x=$(readlink -f $x)
    dir=$(echo $x|perl -npe 's!.*/!!; s/.log$//; s!%!/!g')
    (
        cd $dir
        if test "$(basename $0)" = repo-cherry-push-all; then
            start_recursive_shell repo-cherry-push-all;
            exit
        fi
        git reset --hard
        command git clean -xfd
        git fetch $(repo-remote)
        echo doing $dir
        if test $shell = true; then
            start_recursive_shell 'shell for cherry'
            exit
        fi
        if test $do_here = true; then
            target_branch=HEAD
        else
            target_branch=$(grep -o 'not found in .*' $x|pn 4|head -n 1)
        fi
        if test -z "$target_branch"; then
            echo target branch is not found in $x'!'
            start_recursive_shell "No target branch"
        else
            if test $do_here = false; then
                git co $target_branch -B $(
                    echo $target_branch | perl -npe 's!^(remotes/)?.*?/!!'
                    ) || true
            fi
            for y in $(grep -e "$1" $x |grep -v 'Merge commit.*into'| pn 3); do
                export WORKING_REV=$y
                git cherry-pick --allow-empty $y || start_recursive_shell "cherry failed: $y" || true
            done
        fi
    )
done
