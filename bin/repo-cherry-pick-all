#!/bin/bash

set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

if is-jenkins; then
    set -x
fi

function die() {
    echo Error: "$@"
    exit -1
}

function skip-current-repo() {
    exit 5
}

function skip-all-remaining-repos() {
    kill $$
    kill -9 $$
}

export -f skip-current-repo
export -f skip-all-remaining-repos

function cherry-skip() {
    commit=$git_commit_id
    skip_file=$(lookup-file -e out)/diff/${ap//\//%}.skip
    (echo -n 'skip: '; grep $commit ${skip_file/.skip/.log}|head -n 1) | tee -a $skip_file
}

function cherry-ok() {
    commit=$git_commit_id

    ok_file=$(lookup-file -e out)/diff/${ap//\//%}.ok

    (echo -n 'ok: '; grep $commit ${ok_file/.ok/.log}|head -n 1) | tee -a $ok_file
}

function cherry-fail() {
    fail_file=$(lookup-file -e out)/diff/${ap//\//%}.fail

    (echo -n 'failed: '; grep $git_commit_id ${fail_file/.fail/.log}|head -n 1) | tee -a $fail_file
    git cherry-pick --abort
}

export -f cherry-ok
export -f cherry-fail
export -f cherry-skip

## start code-generator "^\\s *#\\s *"
# generate-getopt '?"用法：$b0 [OPTIONS] REGEXP_FOR_AUTHORS_AND_COMMITTERS\n本脚本把 repo-cherry-find-all 提出来的 git 提交差异，挨个 Cherry-Pick 到指定的目标分支上\n\n此脚本主要用于：1. 新产品 Bring Up，2. 上游代码基线升级跟随 Rebase，3. 整理 Patch"' \
    # @do-here '?在当前 Git HEAD 上开始 Cherry-Pick 工作' \
    # @:target-branch '?提到哪个目标分支上，默认不用指定，会从 repo-cherry-find-all 结果里计算出来' \
    # @do-fetch-first=true '?要先从服务器上 Fetch 一下，看有没有最新提交，默认是 true' \
    # @squash-reverts '?自动处理 Reverted Patches，主要用于整理 Patch 列表。有一些被 Revert 掉的逻辑改动，可以整个从维护的 Patch 列表中删除，节省下次 Rebase 工作' \
    # o:ok-function '?如果 Patch 没有冲突，该执行什么操作。主要用于服务器自动处理' \
    # f:fail-function '?指定 Cherry-Pick 有冲突时执行的操作。参考 --ok-function' \
    # S:skip-function '?指定跳过某 Patch 时执行的操作。参考 --ok-function' \
    # @:should-function '?提前判断一个 Patch 需要不需要 Cherry-Pick，用于自动挑 Patch'
## end code-generator
## start generated code
TEMP=$( getopt -o f:o:S:h \
               --long do-fetch-first,do-here,fail-function:,ok-function:,should-function:,skip-function:,squash-reverts,target-branch:,help,no-do-fetch-first,no-do-here,no-squash-reverts \
               -n $(basename -- $0) -- "$@")
do_fetch_first=true
do_here=false
fail_function=
ok_function=
should_function=
skip_function=
squash_reverts=false
target_branch=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --do-fetch-first|--no-do-fetch-first)
            if test "$1" = --no-do-fetch-first; then
                do_fetch_first=false
            else
                do_fetch_first=true
            fi
            shift
            ;;
        --do-here|--no-do-here)
            if test "$1" = --no-do-here; then
                do_here=false
            else
                do_here=true
            fi
            shift
            ;;
        -f|--fail-function)
            fail_function=$2
            shift 2
            ;;
        -o|--ok-function)
            ok_function=$2
            shift 2
            ;;
        --should-function)
            should_function=$2
            shift 2
            ;;
        -S|--skip-function)
            skip_function=$2
            shift 2
            ;;
        --squash-reverts|--no-squash-reverts)
            if test "$1" = --no-squash-reverts; then
                squash_reverts=false
            else
                squash_reverts=true
            fi
            shift
            ;;
        --target-branch)
            target_branch=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo -e "用法：$b0 [OPTIONS] REGEXP_FOR_AUTHORS_AND_COMMITTERS\n本脚本把 repo-cherry-find-all 提出来的 git 提交差异，挨个 Cherry-Pick 到指定的目标分支上\n\n此脚本主要用于：1. 新产品 Bring Up，2. 上游代码基线升级跟随 Rebase，3. 整理 Patch"
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]do-fetch-first'
            echo '要先从服务器上 Fetch 一下，看有没有最新提交，默认是 true'
            printf "%06s" " "
            printf %-24s '--[no-]do-here'
            echo '在当前 Git HEAD 上开始 Cherry-Pick 工作'
            printf %06s '-f, '
            printf %-24s '--fail-function=FAIL_FUNCTION'
            echo
            printf "%30s" ""
            echo '指定 Cherry-Pick 有冲突时执行的操作。参考 --ok-function'
            printf %06s '-o, '
            printf %-24s '--ok-function=OK_FUNCTION'
            echo
            printf "%30s" ""
            echo '如果 Patch 没有冲突，该执行什么操作。主要用于服务器自动处理'
            printf "%06s" " "
            printf %-24s '--should-function=SHOULD_FUNCTION'
            echo
            printf "%30s" ""
            echo '提前判断一个 Patch 需要不需要 Cherry-Pick，用于自动挑 Patch'
            printf %06s '-S, '
            printf %-24s '--skip-function=SKIP_FUNCTION'
            echo
            printf "%30s" ""
            echo '指定跳过某 Patch 时执行的操作。参考 --ok-function'
            printf "%06s" " "
            printf %-24s '--[no-]squash-reverts'
            echo '自动处理 Reverted Patches，主要用于整理 Patch 列表。有一些被 Revert 掉的逻辑改动，可以整个从维护的 Patch 列表中删除，节省下次 Rebase 工作'
            printf "%06s" " "
            printf %-24s '--target-branch=TARGET_BRANCH'
            echo
            printf "%30s" ""
            echo '提到哪个目标分支上，默认不用指定，会从 repo-cherry-find-all 结果里计算出来'
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

function hint() {
    command hint "$@" </dev/tty || true
}

function select-args() {
    command select-args "$@" </dev/tty || true
}

function yes-or-no-p() {
    command yes-or-no-p "$@" </dev/tty
}

if test -e ~/src/github/smartcm/scm-helpers/repo-cherry-pick-all.help; then
    . ~/src/github/smartcm/scm-helpers/repo-cherry-pick-all.help
fi

if test $# != 1; then
    die "Error: Usage $(basename $0) REGEXP_FOR_AUTHORS_AND_COMMITTERS"
fi

if test -d .repo; then
    diffs=$(rgrep -l -P -e "$1" out/diff/*.log | sort)
    (
        cd out/diff
        rm *.ok *.fail -f
    )
else
    prefix=$(lookup-file -e out/diff)/$(ap | perl -npe 's!/!%!g')
    diffs=$(lookup-file -e $prefix.log)
    rm $prefix.ok $prefix.fail -f
    if test ! -e "$diffs"; then
        echo "diff file not found"
        exit 0
    fi
    if test "$ANDROID_TOP"; then
        cd "$ANDROID_TOP"
    elif test -e "$(lookup-file -e .repo/..)"; then
        cd $(lookup-file -e .repo/..)
    else
        cd $(lookup-file -e out/..)
    fi
fi

for diff_file in $diffs; do
    diff_file=$(readlink -f $diff_file)
    dir=$(echo $diff_file|perl -npe 's!.*/!!; s/.log$//; s!%!/!g')
    (
        cd $dir || exit 0
        repo_project=$(ap)
        if test "$(basename $0)" = repo-cherry-push-all; then
            if test "$ok_function"; then
                echo running $ok_function in $PWD
                $ok_function || true
                exit
            fi
            if ! start_recursive_shell repo-cherry-push-all; then
                if yes-or-no-p -y "Exited abnormally... Do you want to continue with the rest repos?"; then
                    exit 0
                else
                    exit 1
                fi
            else
                exit 0
            fi
        fi
        git reset --hard
        command git clean -xfd
        (git cherry-pick --abort || true) >/dev/null 2>&1
        if test $do_fetch_first = true; then
            git fetch $(repo-remote)
        fi
        echo doing $dir
        if test -z "$target_branch"; then
            if test $do_here = true; then
                target_branch=HEAD
            else
                target_branch=$(grep -o 'not found in .*' $diff_file|pn 4|head -n 1)
            fi
        fi

        if ! is-jenkins && test -z "$target_branch"; then
            echo target branch is not found in $diff_file'!'
            if is-tty-io; then
                start_recursive_shell "No target branch" || ret=$?
            else
                exit $?
            fi
            if test "$ret" = 5; then
                exit
            elif test $ret = 4; then
                echo skipping $(ap)
                break
            fi
        else
            if test $do_here = false -a "$target_branch"; then
                if [[ "$target_branch" =~ ^$(repo-remote)/ ]]; then # dirty hack
                    target_branch=remotes/$target_branch
                fi
                if [[ "$target_branch" =~ ^remotes/ ]]; then
                    local_branch=$(
                        echo $target_branch | perl -npe 's!^(remotes/)?.*?/!!'
                                )
                    if git log -1 $local_branch >/dev/null 2>&1; then
                        git co -b $local_branch.bak-$$ $local_branch
                        git branch -D $local_branch
                    fi
                    git checkout -B $local_branch $target_branch
                fi
            fi

            if test "$squash_reverts" = true; then
                declare -A reverted_commits
                declare -A paired_reverts
                declare -A should_skip_githash
                cat "$diff_file" | scm is-patch-reverted -p | perl -ne 'print "$1 $2\n" if m/paired-revert: ([0-9a-f]{40}) ([0-9a-f]{40})/' |
                    (
                        while read g1 g2; do
                            paired_reverts[$g1]=$g2
                        done

                        declare -p paired_reverts > $diff_file.env
                    )

                cat "$diff_file" | scm is-patch-reverted -m | grep '^\s*multi-revert:' | (
                    while read multi_revert n g subject; do
                        reverted_commits[$g]=$n
                    done
                    declare -p reverted_commits >> $diff_file.env
                )
                . $diff_file.env
            fi

            # /home/bhj/src/android/build commit 43762abec244028673342090b29c6d04a96b1f6f cid I85848cd29536e96e9d330bf1b38f184ac9e6b3f7 not found in remotes/smartisan/tools_r22.2 jinxiaodong@smartisan.cn(2016-03-03 18:03:26 +0800) jinxiaodong@smartisan.cn(2016-03-03 19:22:05 +0800) : {{{use full boot.img if imgdiff failure}}}

            ap=$(ap)
            if type check-merged-commit >/dev/null 2>&1; then
                check-merged-commit $ap $(cat $diff_file | pn 3)
            fi
            declare -A already_handled_commit_map
            grep -P -e "$1" $diff_file |
                while read path 'commit' git_commit_id remaining; do
                    if test "${already_handled_commit_map[$git_commit_id]}" = 1; then
                        echo $git_commit_id already handled
                        continue
                    fi

                    already_handled_commit_map[$git_commit_id]=1

                    if ! [[ $git_commit_id =~ ^[a-f0-9]{40}$ ]]; then
                        echo $path $commit $git_commit_id is invalid
                        continue
                    fi
                    subject=${remaining#*\{\{\{}
                    subject=${subject%\}\}\}*}
                    change_id=

                    if [[ $remaining =~ ^'has no change id' ]]; then
                        read has no change id target_branch remaining <<<$remaining
                    else
                        read cid change_id not found in target_branch remaining <<<$remaining
                    fi

                    author=${remaining%%\(*}
                    atime=${remaining#$author\(}
                    atime=${atime%%\)*}
                    remaining=${remaining#*\) }
                    committer=${remaining%%\(*}
                    ctime=${remaining#$committer\(}
                    ctime=${ctime%%\)*}


                    export WORKING_REV=$git_commit_id
                    ret=0
                    if test "$squash_reverts" = true; then
                        . $diff_file.env
                        if test "${reverted_commits[$git_commit_id]}"; then
                            cat "$diff_file" | scm is-patch-reverted -m -r "$subject"
                            hint "当前要处理的 Patch 有多个相关的 Revert Patch，请选择你想要如何处理这些 Patch（你可以选择跳过、另开一个终端检查并处理，等等）"
                            should_continue=true
                            while true; do
                                revert_action=$(
                                    select-args -p "请选择你要如何处理 $git_commit_id 及其相关 Revert Patches" \
                                                "Pick （我确认过了，这个 Patch 是要 Cherry-Pick 的，帮我自动 Cherry 试试看吧，没冲突最好，有冲突我再解）" \
                                                "Skip （跳过此 Patch，我自己确认了，它跟另一个 Patch 互消抵消了，所以不需要它的逻辑了）" \
                                                "Done （不用处理此 Patch，我自己已经另开一个终端处理了）" \
                                                "Show （请打印一下跟它相关的 Revert Patch 列表，我自己可以新开一个窗口，然后挨个检查一下，再决定如何处理）" |
                                        pn 1
                                             )

                                if test "$revert_action" = Skip; then
                                    echo Skip $git_commit_id: $subject
                                    if test "$skip_function"; then
                                        skip_reason=UserSkip "$skip_function" $ap $git_commit_id </dev/null
                                    fi
                                    break
                                elif test "$revert_action" = Done; then
                                    echo Done $git_commit_id: $subject
                                    if test "$skip_function"; then
                                        skip_reason=UserDone "$skip_function" $ap $git_commit_id </dev/null
                                    fi
                                elif test "$revert_action" = Show; then
                                    cat "$diff_file" | scm is-patch-reverted -m -r "$subject"
                                    hint "以上是相关的 Revert Patch 列表，请自己新开一个终端窗口检查这些 Patch 的逻辑关系，并决定如何处理"
                                    continue
                                elif test "$revert_action" = Pick; then
                                    should_continue=false
                                    break
                                fi
                            done

                            if test "$should_continue" = true; then
                                continue
                            fi
                        fi

                        if test "${paired_reverts[$git_commit_id]}"; then
                            hint "当前要处理的 Patch 有一个跟它成对的 Revert Patch，请选择你想要如何处理这些 Patch（你可以选择跳过、另开一个终端检查并处理，等等）"

                            should_continue=true
                            while true; do
                                revert_action=$(
                                    select-args -p "请选择你要如何处理这对 Patch： $git_commit_id ${paired_reverts[$git_commit_id]} （您可自己新开一个终端检查）" \
                                                "Check （帮我看一下它们是否完美相互抵消——在 commit1 的提交上打上 commit2，如果没有冲突并且跟 commit1^没有 diff。。。）" \
                                                "Skip2 （我已经确认了，它们完美抵消，因此把这个两个 Patch 都跳过就对了）" \
                                                "Done （我自己在另一个窗口里处理了，跳过当前 Patch，跟它成对的下一个 Patch 有冲突的话，我自己再处理）" \
                                                "Pick （我确认了，这个 Patch 要 Pick，跟它成对的下一个 Patch 有冲突的话，我自己再处理）" |
                                        pn 1
                                             )

                                if test "$revert_action" = Check; then
                                    if is-perfect-revert "$git_commit_id" "${paired_reverts[$git_commit_id]}"; then
                                        if yes-or-no-p -y "这两个Patch刚好相互抵消，是否把两个都跳过？"; then
                                            revert_action=Skip2
                                        else
                                            continue
                                        fi
                                    else
                                        hint "这两个 Patch 不能互相抵消，请仔细检查它们的改动，然后再决定如何处理"
                                        continue
                                    fi
                                fi

                                if test "$revert_action" = Skip2; then
                                    should_skip_githash[$git_commit_id]=true
                                    should_skip_githash[${paired_reverts[$git_commit_id]}]=true
                                    should_continue=false # goto the judge for should_skip_githash
                                    break
                                elif test "$revert_action" = Done; then
                                    echo Done $git_commit_id: $subject
                                    if test "$skip_function"; then
                                        skip_reason=UserDone "$skip_function" $ap $git_commit_id </dev/null
                                    fi
                                    break
                                elif test "$revert_action" = Pick; then
                                    should_continue=false
                                    break
                                fi
                            done

                            if test "${should_skip_githash[$git_commit_id]}" = true; then
                                echo "跳过 $git_commit_id: $subject，因为它和另一个 Patch 成对 Revert 并且互相完美抵消了"
                                if test "$skip_function"; then
                                    skip_reason=reverted "$skip_function" $ap $git_commit_id </dev/null
                                fi
                                continue
                            fi
                        fi
                    fi

                    if test -z "$change_id"; then
                        echo skip $git_commit_id: $subject
                        if test "$skip_function"; then
                            skip_reason=no-change-id "$skip_function" $ap $git_commit_id </dev/null
                        fi
                        continue
                    fi

                    if test "$dry_run" = true; then
                        continue
                    fi

                    if test "$should_function"; then
                        if (set -o pipefail; "$should_function" | tee $diff_file.$git_commit_id.should); then
                            true
                        elif test $? = 2; then
                            exit # do not cherry any patches
                        else
                            echo should not cherry $git_commit_id
                            continue
                        fi
                    fi
                    if (set -o pipefail; git cherry-pick -x --allow-empty $git_commit_id 2>&1 | tee $diff_file.$git_commit_id.cp ); then
                        if test "$ok_function"; then
                            "$ok_function" $ap $git_commit_id </dev/null
                        fi
                    elif grep -q 'The previous cherry-pick is now empty, possibly due to conflict resolution' $diff_file.$git_commit_id.cp; then
                        echo $git_commit_id is now empty
                        git cherry-pick --abort
                        if test "$skip_function"; then
                            skip_reason=empty "$skip_function" $ap $git_commit_id </dev/null
                        fi
                        true
                    elif test "$fail_function"; then
                        "$fail_function" $ap $git_commit_id </dev/null
                    elif is-tty-io </dev/stderr ; then
                        start_recursive_shell "cherry failed: $git_commit_id" </dev/stderr || ret=$?
                    else
                        exit -1
                    fi
                    if test $ret = 5; then
                        exit
                    elif test $ret = 4; then
                        echo cherry-failed: $WORKING_REV in $ap |tee -a ~/tmp/repo-cherry-pick-all.txt
                        break
                    fi
                                            done
                                    fi
                                )
                            done
