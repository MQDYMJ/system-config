#!/bin/bash

set -e
echo 此脚本会使用到sudo权限，可能需要输入sudo密码
sudo echo ok

if test "$(pretty 20|pn 3)" != 0x14; then
    read -p "You need to install libmarpa-r2-perl.
    press Enter to continue... "
    if ! sudo apt-get install libmarpa-r2-perl; then
        cpan -i Marpa::R2
    fi
fi

if test "$BEING_TIMED" != true; then
    export BEING_TIMED=true;

    if set -o|grep xtrace.*on -q; then
        bashx='bash -x'
    else
        bashx=
    fi

    time $bashx $0 "$@"
    exit
fi

function die() {
    echo Error: "$@"
    exit -1
}

if test ! "$ANDROID_SERIAL"; then
    export ANDROID_SERIAL=$(select-output-line my-adb devices?|pn 1)
fi

## start code-generator "^\\s *#\\s *"
# generate-getopt  @do-system=true Gno-gapps @system-only ddebug x:skip-partitions @hack=true @:system-image
## end code-generator
## start generated code
TEMP=$(getopt -o Gdx:h \
              --long hack,no-gapps,system-only,system-image:,do-system,debug,skip-partitions:,help,no-hack,no-no-gapps,no-system-only,no-do-system,no-debug \
              -n $(basename -- $0) -- "$@")
hack=true
no_gapps=false
system_only=false
system_image=
do_system=true
debug=false
skip_partitions=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --hack|--no-hack)
            if test "$1" = --no-hack; then
                hack=false
            else
                hack=true
            fi
            shift
            ;;
        -G|--no-gapps|--no-no-gapps)
            if test "$1" = --no-no-gapps; then
                no_gapps=false
            else
                no_gapps=true
            fi
            shift
            ;;
        --system-only|--no-system-only)
            if test "$1" = --no-system-only; then
                system_only=false
            else
                system_only=true
            fi
            shift
            ;;
        --system-image)
            system_image=$2
            shift 2
            ;;
        --do-system|--no-do-system)
            if test "$1" = --no-do-system; then
                do_system=false
            else
                do_system=true
            fi
            shift
            ;;
        -d|--debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift
            ;;
        -x|--skip-partitions)
            skip_partitions=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-d, '
            printf %-24s '--[no-]debug'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]do-system'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]hack'
            echo
            printf %06s '-G, '
            printf %-24s '--[no-]no-gapps'
            echo
            printf %06s '-x, '
            printf %-24s '--skip-partitions=SKIP_PARTITIONS'
            echo
            printf "%06s" " "
            printf %-24s '--system-image=SYSTEM_IMAGE'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]system-only'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test -z "$skip_partitions" -a -e ~/.config/system-config/android-rsync-phone-ota.skip-partitions; then
    skip_partitions=$(cat ~/.config/system-config/android-rsync-phone-ota.skip-partitions)
fi
xml=rawprogram_unsparse.xml
if test ! -e "$xml"; then
    if test -e rawprogram0_unsparse.xml; then
        xml=rawprogram0_unsparse.xml
    elif test -e "sparse_images/$xml"; then
        xml=sparse_images/$xml
    elif test -e rawprogram0.xml; then
        xml=rawprogram0.xml
    elif test -e MT6797_Android_scatter.txt; then
        true
    else
        xml=$(find . -maxdepth 2 -name '*program*.xml')
        for x in $xml; do echo $x; done;
        echo
        yes-or-no-p -y "没有找到唯一的xml文件，将使用以上所有.xml文件，确认？"
    fi
fi

my-adb -r id | grep 'uid=0\b'

if test $do_system = true; then
    if ! my-adb 'which bash && echo -n hello && echo '$$ | grep hello$$ -q; then
        adb-fix-busybox
    elif ! my-adb 'test -d /data/debian/ && which bash && echo -n hello && echo '$$ | grep hello$$ -q; then
        die "Debian or bash not found on this phone, can't use rsync"
    fi
    ssh-to-phone echo hello$$ | grep hello$$
fi

my-adb mount -t ext4 /dev/block/bootdevice/by-name/userdata /data
my-adb mount -t ext4 /dev/block/bootdevice/by-name/system /system

adb_partition_prefix=$(my-adb "for y in /dev/block/platform/*/by-name /dev/block/platform/*/*/by-name; do if test -d \$y; then echo \$y; exit; fi; done")
# this is for debugging
function update-partition() {
    size=$(stat -c %s $file)
    echo $file $size
    my-adb "dd if=\$(echo $adb_partition_prefix/$part) of=/data/$file.x"
    my-adb pull /data/$file.x ~/tmp
    bindiff.py ~/tmp/$file.x $file
}

function update-partition() {
    if test $system_only = true; then
        return 0
    fi
    if test $(basename $file) = boot.img; then
        if test $hack = false; then
            adb-push $file /data
        elif test -e boot-root-debuggable\=0.img; then
            adb-push boot-root-debuggable\=0.img /data/boot.img
        elif test -e boot-root.img; then
            adb-push boot-root.img /data/boot.img
        else
            adb-push -d $file /data
        fi
    else
        my-adb push $file /data
    fi

    my-adb "dd if=/data/$file of=\$(echo $adb_partition_prefix/$part) && rm /data/$file && sync && echo yes$$" | grep yes$$
}

if test $(basename $0) = android-rsync-phone-diff; then
    function update-partition() {
        md5sum=$(md5sum $file | pn 1)
        size=$(stat -c %s $file)
        remote_md5sum=$(my-adb "dd if=\$(echo $adb_partition_prefix/$part) bs=$size count=1 2>/dev/null | md5sum" | pn 1)
        if test "$md5sum" != $remote_md5sum; then
            if test "$part" = boot && yes-or-no-p </dev/tty "continue for boot.img?"; then
                return 0
            fi
            die "Not the same md5 for $file on $part: $remote_md5sum"
        fi
    }
fi

function update-non-system-partitions() {
    if test -e MT6797_Android_scatter.txt; then
        mtk-print-file-partitions MT6797_Android_scatter.txt
    else
        xmlstarlet 2>&1 sel -t -m //program -v \@filename -o ' ' -v @label -n $xml
    fi |
        sort -u|
        while read f p; do if test -e $f; then echo $f $p; fi; done|
        grep -v 'GPT|_\d+| .* ' -P| perl -npe 'END{print "done done\n"}'|
        while read file part; do
            if test -z "$part"; then
                continue
            fi
            do_continue=false;

            # aboot abootbak alterable boot cmnlib cmnlib64 cmnlib64bak
            # cmnlibbak devcfg devcfgbak keymaster keymasterbak modem
            # rpm rpmbak tz tzbak xbl xblbak

            if test -z "$(arg1-arg2 "$part" PrimaryGPT BackupGPT udisk modemst1 modemst2 persist fsg factory sec security $skip_partitions)"; then
                continue
            fi
            if test $part = done; then
                break
            fi
            echo doing $file to $part
            update-partition $file $part || exit 5
        done
}

export tmpPostfix=$$

if test -e "$xml"; then
    system_xml=$xml
else
    system_xml=$(grep system_ *.xml -l |head -n 1)
fi
if test "$system_image"; then
    ln -s $system_image ~/tmp/system-$tmpPostfix.img.2
elif test -e system.img; then
    simg2img system.img ~/tmp/system-$tmpPostfix.img.2 || kill $$ &
else
    sparse-unsparse.xml -p system -o ~/tmp/system-$tmpPostfix.img.2 -x $(readlink -f $system_xml) >/dev/null 2>&1 || kill $$&
fi

if test $(basename $0) = android-rsync-phone-diff; then
    update-non-system-partitions
else
    update-non-system-partitions
    if test $do_system = false; then
        exit
    fi
fi

echo "non system partitions done, wait for system.img unsparse..."
wait

mv ~/tmp/system-$tmpPostfix.img.2 ~/tmp/system-$tmpPostfix.img
mkdir -p ~/tmp/system-$tmpPostfix/system
cd ~/tmp/system-$tmpPostfix
sudo umount system >/dev/null 2>&1 || true
sudo umount SYSTEM >/dev/null 2>&1 || true
sudo mount -o loop ../system-$tmpPostfix.img system

if test $(basename $0) = android-rsync-phone-diff; then
    sudo find system -type f | xargs sudo md5sum | sort > local.txt
    my-adb 'cd /; find system -type f | xargs md5sum | sort > data/adb.txt'
    adb pull /data/adb.txt
    diff adb.txt local.txt || true
    exit
fi

cd system
echo doing rsync in $(pwd)
adb-stop-all-services
my-adb remount
my-adb stop

gapps_updir=~/src/github/
if test -d ~/system-config/src/github/gapps-t1; then
    gapps_updir=~/system-config/src/github
fi

if test ! -e xbin/busybox; then
    busybox_file=~/src/android/vendor/smartisanhw/log-crawler/busybox
    bash_file=~/src/android/vendor/smartisanhw/log-crawler/bash
    if test ! -e $busybox_file; then
        busybox_file=~/system-config/doc/galaxy-nexus-root/system/xbin/busybox
    fi
    sudo cp $busybox_file ./xbin
    sudo cp $bash_file ./xbin
    for x in $(find ~/system-config/doc/galaxy-nexus-root/system/xbin -type l); do
        x=$(basename $x)
        sudo ln -s busybox ./xbin/$x || true
    done
fi

# sudo find . \( -name 'AppStoreSmartisan.apk' -o -name 'GameStoreSmartisan.apk' \) -exec rm -v '{}' \;
if test -e $gapps_updir/gapps-t1 -a $hack = true; then
    dest=$PWD
    sudo mv xbin/su xbin/su.copy || true
    (

        gapps=$gapps_updir/gapps-lp/system
        phone_version=$(my-adb getprop ro.build.version.release)
        if test -e $gapps_updir/gapps-$phone_version/system; then
            gapps=$gapps_updir/gapps-$phone_version/system
        elif ! version-lower-than "$(my-adb getprop ro.build.version.release)" 5.0; then
            # it's lp
            true
        else
            gapps=$gapps_updir/gapps-t1
        fi

        supersu=~/src/github/smartcm/supersu-32
        if my-adb uname -a | grep -q aarch64; then
            supersu=~/src/github/smartcm/supersu-64
        fi

        for dir in $gapps $supersu; do
            cd $dir
            find . -name '.git' -prune -o -type f -print |
                if test $no_gapps = false; then
                    cat
                else
                    grep 'install-recovery.sh|Superuser.apk|/xbin/|libsupol.so' -P
                fi |
                xargs sudo env PATH=$PATH cp-with-dir-struct $dest
        done
    )
fi

sudo bash -c "
    mkdir ~/.ssh -p
    if test ! -e ~/.ssh/id_rsa; then
        cp $HOME/.ssh/id_rsa ~/.ssh/
    fi
"
(
    sudo find ../system -type l -prune -o -print |sort |sudo xargs ls -Zd |grep -v 'u:object_r:system_file:s0\|\?'|perl -npe 's/^/chcon /'
    echo chcon u:object_r:zygote_exec:s0 ../system/xbin/sugote
    if test "$hack" = true; then
        echo chmod 755 /system/etc/install-recovery.sh
        echo ln -sf /system/etc/install-recovery.sh /system/bin/install-recovery.sh
    fi
)|tee ../system.chcon
my-adb push ../system.chcon /data/
sudo rsync --inplace -e "ssh -F $HOME/.ssh/config -l root" . root@phone:/system -av --delete-before --exclude media/app --delete-excluded ||
    sudo rsync -e "ssh -F $HOME/.ssh/config -l root" . root@phone:/system -av --delete-before --exclude media/app --delete-excluded

my-adb 'cd /system; bash -x /data/system.chcon; sync'
my-adb romount
if test $debug = true; then
    echo you should check the files at ~/tmp/system-$tmpPostfix
    exit
fi
cd ..
sudo umount system
cd ..
sudo rm -rf ~/tmp/system-$tmpPostfix.img ~/tmp/system-$tmpPostfix
set -x
wait
echo ok
