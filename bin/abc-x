#!/bin/bash
export LANG=C
export LC_ALL=C
export LANGUAGE=C

if test -e ~/src/github/private-config/etc/abc-x; then
    . ~/src/github/private-config/etc/abc-x
fi

if test $PWD = ~/src/linux; then
    git diff HEAD | time abc -t remote-abc -x build-request -m kernel -p kernel -b icesky-rom "$@"
    exit
fi

. $(lookup-file build/envsetup.sh) >/dev/null 2>&1

repo-cherry-find-all() {
    command abc -t remote-abc repo-cherry-find-all \
            -f $(cd $(lookup-file bionic); git-choose-branch -p from remotes | perl -npe 's,.*?remotes/.*?/,,') \
            -t $(cd $(lookup-file bionic); git-choose-branch -p to remotes | perl -npe 's,.*?remotes/.*?/,,') -b $(abc-base-build)
}

function abc() {
    (
        case "$1" in
            help)
                abc-help
                ;;
            mm)
                shift;
                abc-mm "$@" | tee ~/tmp/abc-x.mm
                echo
                if yes-or-no-p -y "push the above files"; then
                    cat ~/tmp/abc-x.mm | perl -ne 'print if m/<<XXX/../^XXX/'|bash
                fi
                ;;
            grep)
                shift
                abc-grep "$@"
                ;;
            tags)
                shift
                abc-tags "$@"
                ;;
            abc-files)
                shift
                abc-files "$@"
                ;;
            base)
                abc-base-build
                ;;
            *)
                die "no such abc-x command: $1"
                ;;
        esac
    )
}

abc-help() {
    cat <<EOF

Run commands with Android Build Center. The following commands are
supported:

    abc mm: run mm command to build the modules in the current
        directory in Android Build Center.

    abc grep: run grep with the help of Android Build Center. For e.g.,
        adb grep -e "readlink"
EOF
}

abc-mm() {

    if git status -s|grep '??'; then
        git status -s | awk '{print $2}' | xargs -d \\n git add
    fi

    base_build=${base_build:-$(abc-base-build)}
    repo_path=$(abc-repo-path)

    local method=mm
    if test "$repo_path" = kernel; then
        method=kernel
    elif test "$repo_path" = bootable/bootloader/lk; then
        method=lk
    fi

    remote_rev=$(abc-repo-revision)
    if test -z "$remote_rev"; then
        echo "Something went wrong with abc remote revision"
        return 1
    fi
    if ! git log "$remote_rev" -1 >/dev/null 2>&1; then
        echo "Seems abc base revision $remote_rev not found in your local repo, maybe run 'repo sync -n .'?"
        return 1
    fi

    git diff --binary $(abc-repo-revision) | ssh $abc_host abc $xdebug build-request -m $method -d $(abc-repo-pwd) -b "$base_build" -p $repo_path "$@"
}

abc-repo-revision() {
    ssh $abc_host abc repo-revision -b "${base_build:-$(abc-base-build)}" -p "${repo_path:-$(abc-repo-path)}"
}

croot() {
    root_dir=$(lookup-file -e .repo/..)
    cd $root_dir
}

abc-base-build() {
    if test "$base_build"; then
        echo $base_build
        return
    fi
    (
        croot
        readlink -f ./.repo/manifest.xml|perl -npe 's,.*.repo/manifests/,,; s,\.xml$,,; s,/,%,g'
    )
}

abc-grep() {
    (
        croot
        echo "make: Entering directory \`$PWD'"
        ## start code-generator "^\\s *#\\s *"
        # generate-getopts -l e:entry
        ## end code-generator
        ## start generated code
        local entry=
        local OPTIND=1
        while getopts 'e:' opt; do
            case "$opt" in
                e)    entry=$OPTARG;;
                *)    echo Usage Error;;
            esac
        done
        shift $(($OPTIND - 1))

        ## end generated code

        if test -z "$entry" -a $# != 0; then
            entry=$1
            shift
        fi

        ssh $abc_host abc abc-files -b "$(abc-base-build)" "$(echo "$entry" | perl -npe 's/[^\w]/ /g')"|xargs -d \\n grep -H -n -e "$entry" "$@" /dev/null
    )
}

abc-tags() {
    (
        croot
        echo "make: Entering directory \`$PWD'"
        ## start code-generator "^\\s *#\\s *"
        # generate-getopts -l e:entry
        ## end code-generator
        ## start generated code
        local entry=
        local OPTIND=1
        while getopts 'e:' opt; do
            case "$opt" in
                e)    entry=$OPTARG;;
                *)    echo Usage Error;;
            esac
        done
        shift $(($OPTIND - 1))

        ## end generated code

        if test -z "$entry" -a $# != 0; then
            entry=$1
            shift
        fi

        ssh $abc_host abc abc-tags -b "$(abc-base-build)" "$(echo "$entry" | perl -npe 's/[^\w]/ /g')"
    )
}

abc-files() {
    (
        croot
        ssh $abc_host abc abc-files -b "$(abc-base-build)" "$(echo "$@" | perl -npe 's/[^\w]/ /g')"
    )
}

abc-repo-branch() {
    repo forall $(repo-project) -c 'echo $REPO_RREV'
    # fixme
}

abc-repo-path() {
    repo forall $(repo-project) -c 'echo $REPO_PATH'
}

abc-repo-pwd() {
    pwd=$(PWD= /bin/pwd)
    top=$(gettop)
    echo ${pwd:${#top}+1}
}

## start code-generator "^\\s *#\\s *"
# generate-getopts  h:abc_host xxdebug b:base_build
## end code-generator
## start generated code
abc_host=
xdebug=false
base_build=
OPTIND=1
while getopts 'h:xb:' opt; do
    case "$opt" in
        h)    abc_host=$OPTARG;;
        x)    xdebug=true;;
        b)    base_build=$OPTARG;;
        *)    echo Usage Error; exit 2;;
    esac
done
shift $(($OPTIND - 1))

## end generated code

if test -z "$abc_host"; then
    abc_host=abc@172.16.2.25
fi

if test $xdebug = true; then
    xdebug=-x
else
    xdebug=
fi

if test $# = 0; then
    abc mm
elif test "$1" = mm; then
    abc "$@"
elif test "$1" = sync-qc-oems; then
    ssh $abc_host abc "$@"
elif test "$1" = sync-simt-repos; then
    ssh -t $abc_host abc "$@"
elif test "$(type -t "$1")" = function; then
    "$@"
else
    abc "$@"
fi
