#!/bin/bash

declare -A maildir_file_map;


## start code-generator "^\\s *#\\s *"
# generate-getopt s:subject @:after='$(today -1)' @:before='$(today 1)' f:from
## end code-generator
## start generated code
TEMP=$(getopt -o f:s:h \
              --long from:,after:,subject:,before:,help \
              -n $(basename -- $0) -- "$@")
from=
after=$(today -1)
subject=
before=$(today 1)
eval set -- "$TEMP"
while true; do
    case "$1" in

        -f|--from)
            from=$2
            shift 2
            ;;
        --after)
            after=$2
            shift 2
            ;;
        -s|--subject)
            subject=$2
            shift 2
            ;;
        --before)
            before=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--after=AFTER'
            echo
            printf "%06s" " "
            printf %-24s '--before=BEFORE'
            echo
            printf %06s '-f, '
            printf %-24s '--from=FROM'
            echo
            printf %06s '-s, '
            printf %-24s '--subject=SUBJECT'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code
if [[ $after =~ ^[0-9]+$ ]]; then
    after=-$after
fi

if [[ $after =~ ^- ]]; then
    after=$(today $after)
fi

function handle-query-string() {
    export prefix=$1
    shift
    echo "$@" | perl -npe 'BEGIN{use Encode;} $_ = decode_utf8 $_; s/[^\w\p{CJK}]|_/ /g; s/([\w\p{CJK}]+)/$ENV{prefix}:$1/g; $_ = encode_utf8 $_;'
}

subject=$(handle-query-string subject $subject)
from=$(handle-query-string from $from)

mu find $subject $from date:$after..$before --fields 'l d f s' | (
    while read file info; do
        maildir_file_map[$info]=$file
    done

    saved_selected_info=$(
        select-args -a "All of the above! 老子想批处理一下！" -p "你想查看哪封邮件？" "$(for x in "${!maildir_file_map[@]}"; do echo "$x"; done|sort -r)" </dev/tty
                 )

    if test "$saved_selected_info"; then
        handle_all_files=false
        selected_files=(
            $(
                IFS=$'\n'
                for selected_info in $saved_selected_info; do
                    for x in "${!maildir_file_map[@]}"; do
                        if test "$x" = "$selected_info"; then
                            echo "${maildir_file_map[$x]}"
                        fi
                    done
                done
            )
        )
    fi

    action=$(
        select-args --select-from-history-too -o -p "你想执行什么操作？" "用 of 脚本打开此邮件" "打印每封 maildir 邮件的文件名" "用 editor 一封一封的打开我看一下" </dev/tty
          )
    if test "$action" = "用 of 脚本打开此邮件" && [[ $saved_selected_info =~ $'\n'.*[0-9] ]]; then
        while true; do
            selected_info=$(
                IFS=$'\n'
                select-args -p "你想看哪封邮件（或 Ctrl-C 退出）？" $saved_selected_info </dev/tty
                         )

            selected_files=(
                $(
                    IFS=$'\n'
                    for x in "${!maildir_file_map[@]}"; do
                        if test "$x" = "$selected_info"; then
                            echo "${maildir_file_map[$x]}"
                            exit
                        fi
                    done
                ))
            of "$selected_files"

        done
        exit
    fi

    for file in "${selected_files[@]}"; do
        case "$action" in
            "用 of 脚本打开此邮件")
                echo "of $file"
                of "$file"
                hint "请按回车键继续，或 Ctrl-C 退出" </dev/tty
                ;;
            "打印每封 maildir 邮件的文件名")
                echo "$file"
                ;;
            "用 editor 一封一封的打开我看一下")
                ew "$file"
                ;;
            *)
                if yes-or-no-p "用你输入的 $action 命令处理每一封邮件吗（比如rm -v: rm -v \"\$@\"）？" </dev/tty; then
                    if ! [[ $action =~ \$@ ]]; then
                        action="$action \$@"
                    fi
                    bash -c "$action" true "${selected_files[@]}"
                    exit
                fi
                ;;
        esac
    done
)
