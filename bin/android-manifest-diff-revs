#!/usr/bin/env perl

use strict;

use Getopt::Long;
my $program_to_run;
my $in_mirror;
GetOptions(
           "program=s" => \$program_to_run,
           "in-mirror!" => \$in_mirror,
    );

$program_to_run = "bash" unless $program_to_run;

my $f1 = shift @ARGV;
my $f2 = shift @ARGV;

die "Can't find $f1" unless -e $f1;
die "Can't find $f2" unless -e $f2;

sub debug(@) {
  print STDERR "@_\n";
}


my %path_rev1;
my %path_rev2;

open(my $F1, "-|", "repo-xml-sel -t -m //project -v \@path -o '=' -v \@name -o '=' -v \@revision -n $f1") or die "Error opening $f1\n";

while (<$F1>) {
  next unless m/^(.*?)\s*=\s*(.*?)\s*=\s*(.*)\s*$/;
  my $path = ($1 or $2);
  if ($in_mirror)  {
    $path = ("$2" or "$1") . ".git";
  }
  $path_rev1{$path} = $3;
}
close $F1;

open(my $F2, "-|", "repo-xml-sel -t -m //project -v \@path -o '=' -v \@name -o '=' -v \@revision -n $f2") or die "Error opening $f2\n";
while (<$F2>) {
    next unless m/^(.*?)\s*=\s*(.*?)\s*=\s*(.*)\s*$/;
    my $path = ($1 or $2);
    if ($in_mirror) {
      $path = ("$2" or "$1") . ".git";
    }
    $path_rev2{$path} = $3;
}
close $F2;

for my $path1 (sort {"$a" cmp "$b"} keys %path_rev1) {
  if ($path_rev1{$path1} eq $path_rev2{$path1}) {
    delete $path_rev2{$path1};
    next;
  }
  if (exists($path_rev2{$path1})) {
      chomp(my $rev1 = qx(repo-xml-sel -t -m //project -i "\@path='$path1'" -v \@revision $f1));
      chomp(my $up1 = qx(repo-xml-sel -t -m //project -i "\@path='$path1'" -v \@upstream $f1));
      chomp(my $rev2 = qx(repo-xml-sel -t -m //project -i "\@path='$path1'" -v \@revision $f2));
      chomp(my $up2 = qx(repo-xml-sel -t -m //project -i "\@path='$path1'" -v \@upstream $f2));
    if ($rev1) {
      $rev1 = "revision=\"$rev1\"";
    }

    if ($rev2) {
      $rev2 = "revision=\"$rev2\"";
    }
      printf('(cd %s; export REV1=%s; export REV2=%s; export UP1=%s; export UP2=%s; %s)' . "\n", $path1, $path_rev1{$path1}, $path_rev2{$path1}, $up1, $up2, $program_to_run) if $path1;
  } else {
    chomp(my $rev1 = qx(repo-xml-sel -t -m //project -i "\@path='$path1'" -v \@revision $f1));
    if ($rev1) {
      $rev1 = " revision=\"$rev1\"";
    }
    printf('1: <project path="%s" name="%s"%s />' . "\n", $path1, $path_rev1{$path1}, $rev1);
  }
  delete $path_rev2{$path1};
}

for my $path2 (sort {"$a" cmp "$b"} keys %path_rev2) {
  chomp(my $rev2 = qx(repo-xml-sel -t -m //project -i "\@path='$path2'" -v \@revision $f2));
  if ($rev2) {
    $rev2 = "revision=\"$rev2\"";
  }

  printf('2: <project path="%s" name="%s"%s />' . "\n", $path2, $path_rev2{$path2}, $rev2);
}
