#!/bin/bash


if test "$(basename -- "$BASH_SOURCE")" = "$(basename -- "$0")"; then # we are being executed

    function _cygwin_share_path() {
        FILE=$1
        host=$(echo "$FILE" | perl -npe 's/.*?:server=(.*?),.*/$1/')
        share=$(echo "$FILE" | perl -npe 's!.*?,share=(.*?)(/|$).*!$1!')
        path=$(echo "$FILE" | perl -npe 's!.*?,share=.*?(/|$)!!')
        FILE=//$host/$share/$path
        echo "$FILE"
    }

# redefine these functions
    function swp()
    {
        local isdir
        if [[ "$FILE" =~ ~/smb/ ]]; then
            if test -d "$FILE"; then
                isdir=\\
            fi
            FILE=`echo "$FILE"|perl -npe 's,^.*?/smb/,\\\\\\\\,; s,/,\\\\,g'`
            host=$(echo "$FILE" | perl -npe 's,^..(.*?)\\.*,$1,')
            if ! echo $host | grep -q -P "^\d+\.\d+\.\d+\d"; then
                host=$(ping-get-ip $host)
            fi
            path=$(echo "$FILE" | perl -npe 's,^..(.*?)(\\.*),$2,')
            FILE=$(printf '\\\\%s%s' $(ip-or-name $host) "$path")$isdir
        elif [[ "$FILE" =~ /smb-share:server ]]; then
             #smb-share:server=share.smartisan.cn,share=sanfranciscobuild
            FILE=$(_cygwin_share_path "$FILE")
            FILE=$(echo "$FILE" | perl -npe 's!/!\\!g')
        elif [[ "$FILE" =~ ^// ]]; then
            FILE=`echo "$FILE"|perl -npe 's,/,\\\\,g'`
        else
            FILE=z:$FILE
        fi
        echo -n "$FILE"
    }

    function sup()
    {
        if [[ "$FILE" =~ ~/smb/ ]]; then
            FILE=`echo "$FILE"|perl -npe 's,^.*?/smb/,smb://,g'`
        elif [[ "$FILE" =~ /smb-share:server ]]; then
            FILE=$(_cygwin_share_path "$FILE")
            FILE=smb:$FILE
        else
            FILE=z:$FILE
        fi
        printf %q "$FILE"
    }

    function ap()
    {
        if test "$ANDROID_TOP"; then
            relative-path "$FILE" $(readlink -f "$ANDROID_TOP")
        elif lookup-file -e .repo >/dev/null 2>&1; then
            relative-path "$FILE" $(readlink -f $(lookup-file .repo/..))/
        else
            relative-path "$FILE" ..
        fi
    }

    function gitp()
    {
        relative-path "$FILE" $(readlink -f $(dirname "$(lookup-file .git)"))/
    }

    function absp()
    {
        if test "${FILE:0:1}" = /; then
            echo $FILE
        else
            echo $(pwd)/$FILE
        fi
    }

    function wp()
    {
        if uname | grep cygwin -i -q; then
            cygpath -alw "$FILE"
            return
        fi
        if echo "$FILE" | grep -q '^/./'; then
            FILE=$(echo "$FILE" | perl -npe 's!^/(.)/!$1:/!')
        else
            FILE=z:$FILE
        fi
        echo -n "$FILE"|perl -npe 's,/,\\,g'
    }

    function wcp()
    {
        wp "$FILE" | perl -npe 's/\\/\\\\/g'
    }

    function realp()
    {
        readlink -f "$FILE"
    }

    function up()
    {
        printf %q "$FILE" | perl -npe 's#^$ENV{HOME}(/|$)#~$1#'
    }

    function rp()
    {
        echo -n "/scp:$USER@$LOCALIP:"
        up
    }


    function mp() #mail path
    {
        case $(uname) in
            CYGWIN*)
                wlp "$FILE"
                ;;
            *)
                echo -n "$FILE"
                ;;
        esac
    }

    function urlp() #file:///
    {
        echo -n "file://$(readlink -f "$FILE")"
    }

    function orgp() #[[file:///][basename]]
    {
        echo -n "[[file://$(readlink -f "$FILE")][$(basename "$FILE")]]"
    }

    function ipp() #http://bhj-win7/ -> http://10.125.206.165/
    {
        echo -n "$FILE" | perl -npe 's!//(.*?)([/:])!"//" . qx(ip-or-name $1) . "$2"!e'
    }

    function tmp() #tramp mail path
    {

        echo -n "/scp:`whoami`@$LOCALIP:$FILE"
    }

    export FILE=${1:-$PWD}
    export FILE=$(lookup-file "$FILE")
    if [[ "$FILE" =~ ^smb:// ]]; then
        export FILE=${FILE/smb:\/\//${HOME}/smb/}
    fi

    out=$($(basename -- $0) "$@")
    echo "$out"
    if test "$NO_PUTCLIP" = true; then
        return
    fi

    if is-in-emacs || is-tty-io; then
        echo "$out" | putclip
    fi
else # we are being sourced
    for x in swp sup gitp wp ap up rp mp tmp realp urlp orgp ipp; do
        eval 'function '$x'() {
            command '$x' "$@" || { renew-xauth; command '$x' "$@"; }
            if test "$NO_PUTCLIP" = true; then
                return
            fi
            FILE=${1:-`pwd`}
            FILE=`lookup-file "$FILE"`
            history -s '$x' "$(printf %q "$FILE")"
        }'
    done
fi
