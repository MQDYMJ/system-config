#!/usr/bin/env perl

use Getopt::Long qw(:config no_ignore_case);
use strict;
use String::ShellQuote;
use String::Approx 'adistr';
use IPC::Open2;

$ENV{'LANG'} = 'C';
$ENV{'LC_ALL'} = 'C'; # fix grep too slow when ignore_case and gbk file recognized as binary

delete $ENV{GREP_OPTIONS};

my $debug;
open($debug, ">", glob("~/.cache/system-config/logs/grep-beatags.log")) or
    open($debug, ">",  "/dev/null") or
    die "Can not open debug file even on /dev/null";

sub debug(@) {
  print $debug "@_\n";
}

open(my $log, ">>", glob("~/.beagrep.log")) or die "Error openning log";
print $log "$0 @ARGV in " . $ENV{PWD} . "\n";

debug "$0 @ARGV";
#gtags-cscope-grep regexp


my $lookup_needle = "hello_world";
my $arch = ".";
my $lookup_restrict_regexp;
my $path_matcher;
my $path_matcher_inv;
my $ignore_case = "";
my $type_re;
my $saved_type_re;
my $reverse_type_re;
my $do_dir;
my $silent;
my $do_component;
my $start_file;
my $working_file;
my $wild_card;
my $only_start_file;
my $member_lookup;
GetOptions(
    "e=s" => \$lookup_needle,
    "f=s" => \$working_file,
    "a=s" => \$arch,
    "d=s" => \$do_dir,
    "c!"  => \$do_component,
    "w!"  => \$wild_card,
    "s!"  => \$silent,
    "m!"  => \$member_lookup,
    "o!"  => \$only_start_file,
    "p=s" => sub {$path_matcher = qr($_[1])i},
    "v=s" => sub {$path_matcher_inv = qr($_[1])i},
    "i!"  => \$ignore_case,
    "t=s" => sub {$type_re = qr($_[1])i},
    "T=s" => sub {$type_re = qr($_[1])i; $reverse_type_re = 1},
    );

$saved_type_re = $type_re;

my $line_info;
if ($lookup_needle =~ /:\d+$/) {
    ($line_info = $lookup_needle) =~ s/.*:(\d+)$/$1/;
    $lookup_needle =~ s/:\d+$//;

}
if ($wild_card) {
    $lookup_needle = ".*";
}

if ($ignore_case) {
    $ignore_case = "-i";
}

my $lookup_needle_save;

if ($do_component) {
    $lookup_needle_save = $lookup_needle;
    $lookup_needle =~ s/.*\.//;
}

$lookup_needle =~ s/\+.*//;

my $start_dir = $ENV{PWD};
chomp($start_dir = qx/readlink -f "$start_dir"/);
debug "started grep in $start_dir\n";

my $db_dir = "$ENV{HOME}/.cache/system-config/for-code-reading$start_dir";
if ($do_dir) {
    chomp($do_dir = qx(readlink -f '$do_dir'));
    $db_dir = "$ENV{HOME}/.cache/system-config/for-code-reading$do_dir";
}

$start_file = $working_file || shell_quote($ENV{GTAGS_START_FILE} || ".");
chomp($start_file = qx/readlink -f $start_file/);
my $start_file_abs = $start_file;

if ($only_start_file and not $path_matcher) {
    $path_matcher = $start_file;
    $path_matcher =~ s,.*/,,;
    $path_matcher = qr(\Q$path_matcher\E);
}

debug "start_file: $start_file";
our $approx_dir = "ENV{HOME}/.cache/system-config/for-code-reading$ENV{GTAGS_START_FILE}";


while ( not -d "$db_dir/.beatags" and not "$db_dir" eq "/") {
    chomp($db_dir = `dirname "$db_dir"`);
}

if ($db_dir eq "/" or $db_dir eq glob("~")) {
    chomp($db_dir = `readlink ~/.gtags-dir`);
    print "db_dir is read from ~/.gtags-dir at $db_dir\n" unless $ENV{UNPACK_MACRO} or $silent;
} else {
    system("ln", '-sf', $db_dir, glob("~/.gtags-dir"), "-T") unless $silent;
}

$approx_dir = substr($approx_dir, length($db_dir));

sub is_qualified_by($$)
{
    my ($d1, $d2) = @_;
    if (length($d1) >= length($d2)) {
        return 0;
    }

    if (substr($d2, -length($d1)) eq $d1 and
        substr($d2, -length($d1) - 1, 1) =~ m/\.|:/) {
        return 1;
    }
    return 0;
}

my $filter_worked = 0;

sub is_binary($)
{
    if ($_[0] =~ m/\.jar$|\.dll$/i) {
        return 1;
    } else {
        return 0;
    }
}

sub parse_xref($)
{
    my ($grep) = @_;

    our %matches;
    our %matches_path_line;

    my $path_inv;
    if (-e ".grep-gtags-path-inv") {
        $path_inv = qx(cat .grep-gtags-path-inv);
        $path_inv = qr($path_inv)x;
    } elsif (-e glob("~/system-config/etc/.grep-gtags-path-inv")) {
        $path_inv = qx(cat ~/system-config/etc/.grep-gtags-path-inv);
        $path_inv = qr($path_inv)x;
    }

read_line:
    while (<$grep>) {
        chomp();
        debug "got $_";

        if ($lookup_restrict_regexp && not m/$lookup_restrict_regexp/i) {
            next;
        }

        m/(.*?)\s+(\S+)\s+(\d+)\s+(\S+)\s+(.*)/ or next;
        my ($def, $type, $line, $path, $str) = ($1, $2, $3, $4, $5);
        if (not -e "$path") {
            debug "ignore $path: not exist\n";
            next;
        }
        if ($arch ne "." and $path =~ m,(?:/|^)arch/, and $path !~ m,(?:/|^)arch/[^/]*$arch,) {
            debug "ignore $path because arch not matches";
            next;
        }

        if ($path_matcher and $path !~ m/$path_matcher/) {
            debug "ignore $path because of path matcher miss";
            $filter_worked++;
            next;
        }

        if ($path_matcher_inv and $path =~ m/$path_matcher_inv/) {
            debug "ignore $path because of inverted path matcher matched";
            $filter_worked++;
            next;
        }

        if ($type_re and ($reverse_type_re xor $type !~ m/$type_re/)) {
            debug "ignore $path:$line: $str because type mismatch: $type !~ $type_re, reverse_type_re is $reverse_type_re";
            $filter_worked++;
            next;
        }

        if (not $type_re and $type eq "prototype") {
            debug "ignore prototype for $str";
            $filter_worked++;
            next;
        }

        if ($lookup_needle_save and $def ne $lookup_needle_save) {
            debug "ignore $path because component not match";
            next;
        }

        if ( # we should extract this into a .conf!!
             $str =~ m/(?:^|:\t)#undef|^variable.*:\s+EXPORT_SYMBOL/ or
             $path_inv and $path =~ $path_inv) {
            debug "ignore because $path matches reverse pattern ($path_inv)";
            next;
        }

        $_ = "$path:$line:$def";

        if (not is_binary($path)) {
            my $loc = "$path:$line";
            $matches_path_line{$loc} = {} unless exists $matches_path_line{$loc};

            foreach my $elem (keys %{$matches_path_line{$loc}}) {
                debug "checking $elem against $def";
                if (is_qualified_by($def, $elem)) {
                    debug "$def is qualified by $elem";
                    next read_line;
                } elsif (is_qualified_by($elem, $def)) {
                    debug "$elem is qualified by $def, should delete $elem";
                    delete $matches_path_line{$loc}{$elem};
                    delete $matches{"$path:$line:$elem"};
                }
            }
            $matches_path_line{$loc}{$def} = 1;
        }
        $matches{$_} = {
            "path" => $path,
            "def"  => $def,
            "line" => $line,
            "str" => $str,
            "type", => $type,
        };
        debug "got matches: $path:$line: $str";
        my $x = $path;
        $x =~ s,.*/,,;
        $matches{$_}{"dist"} = (
            $silent
            ? $silent++
            : abs(adistr($matches{$_}{"path"}, $approx_dir))
              + abs(adistr($x, $lookup_needle)) / 2
              + ($x =~ m/\.xml$|\.jar$/ ? 1 : 0)
            );
    }
}

my $use_full_path = "";
sub do_cscope($$$) {
    $filter_worked = 0;
    debug "do_cscope @_";
    my ($db_dir, $lookup_needle, $lookup_restrict_regexp) = @_;
    my $lookup_needle_quote = shell_quote($lookup_needle);
    my $db_dir_quoted = shell_quote($db_dir);
    my $got_results = 0;
    my $code_dir = substr($db_dir, length("$ENV{HOME}/.cache/system-config/for-code-reading"));
    $code_dir =~ s,/+,/,g;

    chdir ($code_dir) or die "Can not change to $code_dir";

    my $grep;
    open($grep, "-|", "beatags -e $lookup_needle_quote $ignore_case");
    our %matches = ();

    parse_xref($grep);
    close($grep);

    if (not %matches and $filter_worked) {
        return 1 if $silent;
        print "Filter worked in $code_dir, and you got 0 matches! Will restart without filtering\n";
        $filter_worked = 0;
        $path_matcher = "";
        $path_matcher_inv = "";
        $type_re = ".*";
        do_cscope(@_);
        return 1;
    }

    our $approx_dir;

    if (substr($start_file, 0, length($code_dir)) eq $code_dir) {
        $start_file = substr($start_file, 1 + length($code_dir));
    } else {
        debug "$start_file not changed";
    }

    if (%matches and not $silent and not $use_full_path) {
        printf STDERR "Found total %d%s definitions: Entering directory \`%s'\n", scalar keys %matches, $filter_worked ? "/$filter_worked" : "", $code_dir;
    }

    for (sort {
        ($matches{$a}{"dist"} <=> $matches{$b}{"dist"})
            or
            ($matches{$a}{"line"} <=> $matches{$b}{"line"})
         } keys %matches) {

        debug "dist between $_ and $approx_dir is $matches{$_}{dist}";
        my ($file, $def, $line, $str) = @{$matches{$_}}{"path", "def", "line", "str"};

        if ($ENV{UNPACK_MACRO} and $str =~ m/^\s*#define\s+$lookup_needle\s+(\S+)$/) {
            unless ($1 eq $lookup_needle or $ENV{UNPACK_MACRO} >= 5) {
                my $UNPACK_MACRO = $ENV{UNPACK_MACRO} + 1;
                print "need to lookup the $1 'cause you are probably not interested in '$str'\n" unless $silent;
                system("UNPACK_MACRO=$UNPACK_MACRO $0 -e $1");
            }
        }
        if ($str =~ m/:\t\s*typedef (?:struct|enum)\s+(.*)\s+$lookup_needle/) { # need look up the $1 instead
            unless ($1 eq $lookup_needle or $ENV{UNPACK_MACRO} >= 5) {
                my $UNPACK_MACRO = $ENV{UNPACK_MACRO} + 1;
                print "need to lookup the $1 'cause you are probably not interested in '$str'\n" unless $silent;
                system("UNPACK_MACRO=$UNPACK_MACRO $0 -e $1");
            }
        }
        $str =~ s,:\t,: <$def> : ,;
        if ($line == 1 and $line_info) {
            $line = $line_info;
        }
        print "$use_full_path$file:$line: $str\n";
        $got_results = 1;
        if (keys %matches < 5 and not $silent and not is_binary($file) and -e "$code_dir/$file") { # this will be nice!
            system("ctags-show-definition $code_dir/$file $line $lookup_needle");
        }
    }

    return $got_results;
}

my @java_fallback_dir = ();
if (do_cscope($db_dir, $lookup_needle, $lookup_restrict_regexp)) {
    exit;
} elsif (-e "$db_dir/custom-gtags.sh") {
    system("$db_dir/custom-gtags.sh", $lookup_needle);
}
