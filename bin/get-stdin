#!/bin/bash
set -e


## start code-generator "^\\s *#\\s *"
# generate-getopt p:prompt m:mode eempty-ok @:init-text
## end code-generator
## start generated code
TEMP=$( getopt -o em:p:h \
               --long empty-ok,init-text:,mode:,prompt:,help,no-empty-ok \
               -n $(basename -- $0) -- "$@")
declare empty_ok=false
declare init_text=
declare mode=
declare prompt=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -e|--empty-ok|--no-empty-ok)
            if test "$1" = --no-empty-ok; then
                empty_ok=false
            else
                empty_ok=true
            fi
            shift

            ;;
        --init-text)
            init_text=$2
            shift 2

            ;;
        -m|--mode)
            mode=$2
            shift 2

            ;;
        -p|--prompt)
            prompt=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-e, '
            printf %-24s '--[no-]empty-ok'
            echo
            printf "%06s" " "
            printf %-24s '--init-text=INIT_TEXT'
            echo
            printf %06s '-m, '
            printf %-24s '--mode=MODE'
            echo
            printf %06s '-p, '
            printf %-24s '--prompt=PROMPT'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "$mode"; then
    mode=org
fi

test $# = 0 -o $# = 1
tmp=/tmp/`basename $0`.$$

. atexit rm -f "$tmp"
touch $tmp

if test "$prompt"; then
    cat <<EOF >> $tmp
$init_text
###start of comment###
"$prompt"$(if test $empty_ok = true; then echo "（空白输入 OK）"; fi)

# Local variables:
# whitespace-cleanup-mode: nil
# mode : $mode
# End:
EOF
else
    echo "${init_text}" > $tmp
fi

if ! grep "" -q $tmp; then
    cat <<EOF >> $tmp

EOF
fi

echo -n Edit it... 1>&2

if test -z "${REMOTEIP}"; then
    emacsclient -e "
; {%emacs-lisp-mode%}
(progn
  (find-file \"$tmp\")
  (activate-input-method \"sdim\"))
; {%/emacs-lisp-mode%}
" >/dev/null 2>&1
fi

edit-wait $tmp >/dev/null 2>&1

if test -z "${REMOTEIP}"; then
    emacsclient -e "
; {%emacs-lisp-mode%}
(progn
  (find-file \"$tmp\")
  (kill-buffer))
; {%/emacs-lisp-mode%}" >/dev/null 2>&1
fi

echo " done" 1>&2
function get-rid-of-comment() {
    cat "$@" | perl -ne "$(
cat <<'EOF2daa3be0838b'
# {%perl-mode%}
if (m/###start of comment###/) { $comment = 1; }
if (not $comment) {
    print;
}
# {%/perl-mode%}
EOF2daa3be0838b

)"
}
if test $empty_ok = false -a "`get-rid-of-comment $tmp | perl -npe 's/\s//g' | wc -c`" == 0; then
    if ! ps.pl emacs.mm >/dev/null 2>&1; then
        exit -1
    fi
    if EMACS=t yes-or-no-p -y "Error: input can not be empty, try again?"; then
        exec get-stdin --init-text "$(cat $tmp)"
    fi
fi
get-rid-of-comment $tmp | rm-last-nl
rm $tmp
