#!/usr/bin/env perl

# this is a script to fix the subtitle

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl \
# @:delay '?"how many secs to delay the subtitle, if not specified, calculate from (OLD|NEW)-(T1|T2)"' \
# @:old-t1 '?"old timestamp 1 (to be changed to new timestamp 1)"' \
# @:old-t2 '?"old timestamp 2"' \
# @:new-t1 '?"new timestamp 1"' \
# @:new-t2 '?"new timestamp 2"' \
# @:ratio=1 '?"The ratio (make the subtitles to go slower or faster if != 1)"' \
# i:srt-file '?"Which srt file to edit"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $delay = "";
my $new_t1 = "";
my $new_t2 = "";
my $old_t1 = "";
my $old_t2 = "";
my $ratio = 1;
my $srt_file = "";

my $handler_help = sub {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '';
  printf "%-24s", '--delay=DELAY';
  if (length('--delay=DELAY') > 24 and length("how many secs to delay the subtitle") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "how many secs to delay the subtitle";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--new-t1=NEW-T1';
  if (length('--new-t1=NEW-T1') > 24 and length("new timestamp 1") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "new timestamp 1";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--new-t2=NEW-T2';
  if (length('--new-t2=NEW-T2') > 24 and length("new timestamp 2") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "new timestamp 2";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--old-t1=OLD-T1';
  if (length('--old-t1=OLD-T1') > 24 and length("old timestamp 1 (to be changed to new timestamp 1)") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "old timestamp 1 (to be changed to new timestamp 1)";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--old-t2=OLD-T2';
  if (length('--old-t2=OLD-T2') > 24 and length("old timestamp 2") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "old timestamp 2";
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--ratio=RATIO';
  if (length('--ratio=RATIO') > 24 and length("The ratio (make the subtitles to go slower or faster if != 1)") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "The ratio (make the subtitles to go slower or faster if != 1)";
  print "\n";
  printf "%6s", '-i, ';
  printf "%-24s", '--srt-file=SRT-FILE';
  if (length('--srt-file=SRT-FILE') > 24 and length("Which srt file to edit") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "Which srt file to edit";
  print "\n";

  exit(0);
};

GetOptions (
            'delay=s' => \$delay,
            'new-t1=s' => \$new_t1,
            'new-t2=s' => \$new_t2,
            'old-t1=s' => \$old_t1,
            'old-t2=s' => \$old_t2,
            'ratio=s' => \$ratio,
            'srt-file|i=s' => \$srt_file,
            'help|h!' => \&$handler_help,
           );


## end generated code


use strict;

sub timetag_human_to_sec($)
{
    my ($tag) = @_;

    if ($tag =~ m/(\d+):(\d+):(\d+),(\d+)/) {
        return $1 * 3600 + $2 * 60 + $3 + "0.$4";
    } else {
        warn "$tag not match";
    }
    return $tag;
}

sub debug(@) {
    print STDERR "@_\n";
}

sub timetag_sec_to_human($)
{
    my ($sec) = @_;
    my ($subsec, $min, $hour);

    if ($sec < 0) {
        $sec = 0;
    }
    $sec *= 1000;
    $sec = int($sec);
    $subsec = $sec % 1000;
    $sec = int($sec/1000);
    $hour = int($sec / 3600);
    $min = int(($sec - $hour * 3600) / 60);
    $sec %= 60;
    return sprintf "%02d:%02d:%02d,%03d", $hour, $min, $sec, $subsec;
}

if (not $delay) {
  my ($x1, $y1, $x2, $y2) = map {timetag_human_to_sec $_} ($old_t1, $new_t1, $old_t2, $new_t2);
  $ratio = ($y2 - $y1) / ($x2 - $x1);
  $delay = $y1 - $a * $x1;
}

use File::Slurp;

my $new_srt_file = "$srt_file.new";
write_file($new_srt_file, "");

for (read_file($srt_file)) {
    chomp;
    s/\r//g;
    if (m/^(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/) {
        my ($tag1, $tag2) = map {timetag_human_to_sec $_} ($1, $2);
        $tag1 = $ratio * $tag1 + $delay;
        $tag2 = $ratio * $tag2 + $delay;
        append_file $new_srt_file, sprintf("%s --> %s\n", map {timetag_sec_to_human $_} ($tag1, $tag2));
    } else {
        append_file $new_srt_file, "$_\n";
    }
}
