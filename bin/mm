#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

default_keep_building=false
if test "$b0" = mma; then
    default_keep_building=true
fi


## start code-generator "^\\s *#\\s *"
# generate-getopt "?\$b0' [OPTIONS]... [TARGETS]...\n使用安卓提供的模块化编译，节省编译时间。\nmma 编译当前目录下的所有模块（或指定 TARGETS）及其依赖\nmm 编译当前目录下所有模块（或指定的 TARGETS），但不编译其依赖（如果某依赖模块尚未编译，mm 会出错）\n如果不指定 TARGETS，默认的 TARGET 是 all_modules（当前目录下所有模块）'" \
    # vverbose='("" showcommands)' '?编译的时候打印所使用的详细编译命令' \
    # j:jobs '?使用多少个线程进行编译（默认是你的机器的 CPU 线程数）' \
    # kkeep-building='$default_keep_building' '?即使出错了，也继续编译没有出错的模块' \
    # f:make-flags '?其他想要传给make命令的标志和参数' \
    # qquick '?不要初始化安卓编译环境（. build/envsetup.sh），节省时间（system-config 下编译环境会保存在安卓顶层目录下的 buildspec.mk 文件中）'
## end code-generator
## start generated code
TEMP=$( getopt -o j:kf:qvh \
               --long jobs:,keep-building,make-flags:,quick,verbose,help,no-keep-building,no-quick,no-verbose \
               -n $(basename -- $0) -- "$@")
jobs=
keep_building=$default_keep_building
make_flags=
quick=false
verbose=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -j|--jobs)
            jobs=$2
            shift 2
            ;;
        -k|--keep-building|--no-keep-building)
            if test "$1" = --no-keep-building; then
                keep_building=false
            else
                keep_building=true
            fi
            shift
            ;;
        -f|--make-flags)
            make_flags=$2
            shift 2
            ;;
        -q|--quick|--no-quick)
            if test "$1" = --no-quick; then
                quick=false
            else
                quick=true
            fi
            shift
            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=
            else
                verbose=showcommands
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo -e $b0' [OPTIONS]... [TARGETS]...\n使用安卓提供的模块化编译，节省编译时间。\nmma 编译当前目录下的所有模块（或指定 TARGETS）及其依赖\nmm 编译当前目录下所有模块（或指定的 TARGETS），但不编译其依赖（如果某依赖模块尚未编译，mm 会出错）\n如果不指定 TARGETS，默认的 TARGET 是 all_modules（当前目录下所有模块）'
            echo
            echo Options and arguments:
            printf %06s '-j, '
            printf %-24s '--jobs=JOBS'
            echo '使用多少个线程进行编译（默认是你的机器的 CPU 线程数）'
            printf %06s '-k, '
            printf %-24s '--[no-]keep-building'
            echo '即使出错了，也继续编译没有出错的模块'
            printf %06s '-f, '
            printf %-24s '--make-flags=MAKE_FLAGS'
            echo '其他想要传给make命令的标志和参数'
            printf %06s '-q, '
            printf %-24s '--[no-]quick'
            echo '不要初始化安卓编译环境（. build/envsetup.sh），节省时间（system-config 下编译环境会保存在安卓顶层目录下的 buildspec.mk 文件中）'
            printf %06s '-v, '
            printf %-24s '--[no-]verbose'
            echo '编译的时候打印所使用的详细编译命令'
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test "$keep_building" = true; then
    keep_building=-k
else
    keep_building=
fi

if test -z "$jobs"; then
    jobs=-j$(cat /proc/cpuinfo |grep ^processor|wc -l)
fi

unset CLASSPATH

time (
    set -e
    if test "$SC_DEBUG" = true; then
        set -x
    fi
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    oldpwd=$PWD
    if test "$(ap .git/..)" = bootable/bootloader/lk; then
        exec android-make lk
    fi
    cd $top_dir/
    if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT" -a ! -e buildspec.mk; then
        echo Set product to $TARGET_PRODUCT-$TARGET_BUILD_VARIANT at $PWD
        android-set-product $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
    elif test ! -e buildspec.mk; then
        hint "你还没有设置过安卓编译产品与类型，请现在设置"
        android-set-product
    elif test ! -e out; then
        if test -L out; then
            mkdir -p $(readlink out)
        else
            mkdir out
        fi
    fi

    . build/envsetup.sh
    if test "$quick" = false; then
        set_stuff_for_environment
        BHJ_OUT_DIR=${OUT%target/*}
    else
        BHJ_OUT_DIR=$(lookup-file .repo/../)/out
    fi
    cd $oldpwd

    cd "$(dirname $(lookup-file Android.mk))"
    export MY_ONE_SHOT_MAKEFILE=$(ap)/Android.mk
    project=$(ap)

    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file .repo/..)'"
        if test -e $BHJ_OUT_DIR/.buildenv.sh; then
            . $BHJ_OUT_DIR/.buildenv.sh
        fi
        . ~/system-config/etc/.fix-java-version
        if test "$(type -t $b0)" = function; then
            $b0 -j $jobs $verbose $keep_building $make_flags "$@" &&
                echo $b0 build is ok
        else
            echo Error: $b0 is not a function\!
        fi
    ) 2>&1 | (
        cd $top_dir
        tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
    ) || true

    cd $top_dir/
    grep "$b0 build is ok" $BHJ_OUT_DIR/$b0.log
)
