#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

default_keep_building=false
if test "$b0" = mma; then
    default_keep_building=true
fi


## start code-generator "^\\s *#\\s *"
# generate-getopt "?\$b0' [OPTIONS]... [TARGETS]...\n使用安卓提供的模块化编译，节省编译时间。\nmma 编译当前目录下的所有模块（或指定 TARGETS）及其依赖\nmm 编译当前目录下所有模块（或指定的 TARGETS），但不编译其依赖（如果某依赖模块尚未编译，mm 会出错）\n如果不指定 TARGETS，默认的 TARGET 是 all_modules（当前目录下所有模块）'" \
    # vverbose='("" showcommands)' '?编译的时候打印所使用的详细编译命令' \
    # j:jobs '?使用多少个线程进行编译（默认是你的机器的 CPU 线程数）' \
    # kkeep-building='$default_keep_building' '?即使出错了，也继续编译没有出错的模块' \
    # f:make-flags '?其他想要传给 make 命令的标志和参数' \
    # nwith-ninja '?使用 ninja，快速调用 out/mm.log 里记录的上次 mm 编译时使用的 ninja 编译命令进行重编' \
    # qquick '?不要初始化安卓编译环境（. build/envsetup.sh），节省时间（system-config 下编译环境会保存在安卓顶层目录下的 buildspec.mk 文件中）' \
    # @debug '?调试此脚本' \
    # o:only-module='()' '?只编这一个模块，不要编当前目录下所有模块。可以指定多次，以编译多个模块'
## end code-generator
## start generated code
TEMP=$( getopt -o j:kf:o:qvnh \
               --long debug,jobs:,keep-building,make-flags:,only-module:,quick,verbose,with-ninja,help,no-debug,no-keep-building,no-quick,no-verbose,no-with-ninja \
               -n $(basename -- $0) -- "$@")
debug=false
jobs=
keep_building=$default_keep_building
make_flags=
only_module=()
quick=false
verbose=
with_ninja=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift
            ;;
        -j|--jobs)
            jobs=$2
            shift 2
            ;;
        -k|--keep-building|--no-keep-building)
            if test "$1" = --no-keep-building; then
                keep_building=false
            else
                keep_building=true
            fi
            shift
            ;;
        -f|--make-flags)
            make_flags=$2
            shift 2
            ;;
        -o|--only-module)
            only_module=("${only_module[@]}" "$2")
            shift 2
            ;;
        -q|--quick|--no-quick)
            if test "$1" = --no-quick; then
                quick=false
            else
                quick=true
            fi
            shift
            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=
            else
                verbose=showcommands
            fi
            shift
            ;;
        -n|--with-ninja|--no-with-ninja)
            if test "$1" = --no-with-ninja; then
                with_ninja=false
            else
                with_ninja=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo -e $b0' [OPTIONS]... [TARGETS]...\n使用安卓提供的模块化编译，节省编译时间。\nmma 编译当前目录下的所有模块（或指定 TARGETS）及其依赖\nmm 编译当前目录下所有模块（或指定的 TARGETS），但不编译其依赖（如果某依赖模块尚未编译，mm 会出错）\n如果不指定 TARGETS，默认的 TARGET 是 all_modules（当前目录下所有模块）'
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]debug'
            echo '调试此脚本'
            printf %06s '-j, '
            printf %-24s '--jobs=JOBS'
            echo '使用多少个线程进行编译（默认是你的机器的 CPU 线程数）'
            printf %06s '-k, '
            printf %-24s '--[no-]keep-building'
            echo '即使出错了，也继续编译没有出错的模块'
            printf %06s '-f, '
            printf %-24s '--make-flags=MAKE_FLAGS'
            echo '其他想要传给 make 命令的标志和参数'
            printf %06s '-o, '
            printf %-24s '--only-module=ONLY_MODULE'
            echo
            printf "%30s" ""
            echo '只编这一个模块，不要编当前目录下所有模块。可以指定多次，以编译多个模块'
            printf %06s '-q, '
            printf %-24s '--[no-]quick'
            echo '不要初始化安卓编译环境（. build/envsetup.sh），节省时间（system-config 下编译环境会保存在安卓顶层目录下的 buildspec.mk 文件中）'
            printf %06s '-v, '
            printf %-24s '--[no-]verbose'
            echo '编译的时候打印所使用的详细编译命令'
            printf %06s '-n, '
            printf %-24s '--[no-]with-ninja'
            echo '使用 ninja，快速调用 out/mm.log 里记录的上次 mm 编译时使用的 ninja 编译命令进行重编'
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test "$with_ninja" = true; then
    (
        cd $(lookup-file-dir .repo)
        if test ! -e out/mm.log; then
            die "你的 out/ 目录下没有 mm.log 文件，因此无法确定如何调用 ninja。请先用 mm -v 编译一次以生成这个文件"
        fi

        ninja_command=$(
            grep -P -o '\[prebuilts/build-tools/linux-x86/bin/ninja.*\]' out/mm.log | tr -d '[]'
                     )

        if test -z "$ninja_command"; then
            die "无法从 out/mm.log 中找到 ninja 的使用方法，无法用 mm -n 快速编译"
        fi

        echo -e "重新调用 ninja 快速编译： \n\n    $ninja_command\n\n（如有错误，请自己手动调用——参考 workflow.html#fast-mm）"
        CCACHE_DISABLE=true time $ninja_command
    )
    exit
fi

if test "$keep_building" = true; then
    keep_building=-k
else
    keep_building=
fi

if test -z "$jobs"; then
    jobs=$(cat /proc/cpuinfo |grep ^processor|wc -l)
fi

unset CLASSPATH

time (
    set -e
    if test "$SC_DEBUG" = true; then
        set -x
    fi
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    oldpwd=$PWD
    if test "$(ap .git/..)" = bootable/bootloader/lk; then
        exec android-make lk
    fi
    cd $top_dir/
    if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT" -a ! -e buildspec.mk; then
        echo Set product to $TARGET_PRODUCT-$TARGET_BUILD_VARIANT at $PWD
        android-set-product $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
    elif test ! -e buildspec.mk; then
        hint "你还没有设置过安卓编译产品与类型，请现在设置"
        android-set-product
    elif test ! -e out; then
        if test -L out; then
            mkdir -p $(readlink out)
        else
            mkdir out
        fi
    fi

    . build/envsetup.sh
    if test "$quick" = false; then
        set_stuff_for_environment
        BHJ_OUT_DIR=${OUT%target/*}
    else
        BHJ_OUT_DIR=$(lookup-file .repo/../)/out
        if test -e "$top_dir"/.buildspec.sc; then
            . "$top_dir"/.buildspec.sc;
        fi
    fi
    cd $oldpwd

    cd "$(dirname $(lookup-file Android.mk))"
    export MY_ONE_SHOT_MAKEFILE=$(ap)/Android.mk
    project=$(ap)

    if test "$only_module"; then

        if ! mk_file=$(lookup-file -e Android.mk); then
            die "没有找到 Android.mk 文件"
        fi
        cd "$(dirname "$mk_file")"
        mk_dir=$(ap)

        cd $top_dir
        set -o pipefail
        extra_arg="$mk_dir:$(string-join , "${only_module[@]}")"
        echo "在安卓 8.1 上 mm 命令不支持单编某个模块，但是 mmm 命令支持，现在自动统一帮你改成用 mmm 命令（mmm $extra_arg）"
        mmm -j$jobs $keep_building $make_flags $verbose "$@" "$extra_arg" 2>&1|tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
        echo "$b0 build is ok"
        exit
    fi



    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file .repo/..)'"
        . ~/system-config/etc/.fix-java-version
        if test "$(type -t $b0)" = function; then
            if test "$debug" = true; then
                type $b0
                type make
            fi
            $b0 -j$jobs $keep_building $make_flags $verbose "$@" &&
                echo $b0 build is ok
        else
            echo Error: $b0 is not a function\!
            echo Please report a bug to Bao Haojun.
        fi
    ) 2>&1 | (
        cd $top_dir
        tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
    ) || true

    cd $top_dir/
    grep "$b0 build is ok" $BHJ_OUT_DIR/$b0.log
)
