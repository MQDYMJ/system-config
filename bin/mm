#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)


## start code-generator "^\\s *#\\s *"
# generate-getopt vverbose j:jobs t:target
## end code-generator
## start generated code
TEMP=$(getopt -o vj:t: --long "verbose,jobs:,target:"  -n $(basename -- $0) -- "$@")
verbose=false
jobs=
target=
eval set -- "$TEMP"
while true; do
    case "$1" in
        -v|--verbose)
            verbose=true
            shift
            ;;
        -j|--jobs)
            jobs=$2
            shift 2
            ;;
        -t|--target)
            target=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

## end generated code

if test -z "$jobs"; then
    jobs=-j8
fi

if test "$verbose" = true; then
    verbose=showcommands
else
    verbose=
fi

if test -z "$target"; then
    target=all_modules
fi

unset CLASSPATH

time (
    set -e
    if test "$SC_DEBUG" = true; then
        set -x
    fi
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    oldpwd=$PWD
    if test "$(ap .git/..)" = bootable/bootloader/lk; then
        exec android-make lk
    elif test "$(ap .git/..)" = device/qcom/sepolicy; then
        if test "$DOING_SEPOLICY_HACK" != true; then
            export DOING_SEPOLICY_HACK=true
            cd $(lookup-file -e .git/..)
            cat <<'EOF' >> Android.mk
LOCAL_PATH:= $(call my-dir)
ifeq (${ONE_SHOT_MAKEFILE},${LOCAL_PATH}/Android.mk)
$(info including the main sepolicy file)
ONE_SHOT_MAKEFILE := external/sepolicy/Android.mk
include external/sepolicy/Android.mk
CUSTOM_MODULES := $(sort $(call get-tagged-modules,$(ALL_MODULE_TAGS)))
$(info CUSTOM_MODULES are ${CUSTOM_MODULES})
endif
EOF
            command mm
            android-make ramdisk-nodeps
            exec android-make bootimage-nodeps
        fi
    fi
    cd $top_dir/
    if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT" -a ! -e buildspec.mk; then
        echo Set product to $TARGET_PRODUCT-$TARGET_BUILD_VARIANT at $PWD
        android-set-product $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
    fi
    . build/envsetup.sh
    set_stuff_for_environment
    BHJ_OUT_DIR=${OUT%target/*}
    cd $oldpwd

    cd "$(dirname $(lookup-file Android.mk))"
    MY_ONE_SHOT_MAKEFILE=$(readlink -f $PWD/Android.mk)
    export MY_ONE_SHOT_MAKEFILE=${MY_ONE_SHOT_MAKEFILE:1+${#top_dir}}
    project=$(ap)

    cd $top_dir

    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file .repo/..)'"
        if test -e $BHJ_OUT_DIR/.buildenv.sh; then
            . $BHJ_OUT_DIR/.buildenv.sh
        fi
        if grep -q 'required_version := "1.7.x"' build/core/main.mk; then
            PATH=/usr/lib/jvm/java-7-openjdk-amd64/bin:$PATH
            echo using java 1.7
        else
            echo using java 1.6
        fi

        if test "$(basename $0)" = mm; then
            ONE_SHOT_MAKEFILE=$MY_ONE_SHOT_MAKEFILE make -j $jobs $verbose $target "$@" 2>&1
        elif test "$(basename $0)" = mma; then
            make $jobs $verbose -f build/core/main.mk $@ $target BUILD_MODULES_IN_PATHS="$project" 2>&1
        fi
        echo $b0 build is ok
    ) | tee ~/.cache/system-config/logs/$b0.log.$$

    cd $top_dir/
    mv ~/.cache/system-config/logs/$b0.log.$$ $BHJ_OUT_DIR/$b0.log
    grep "$b0 build is ok" $BHJ_OUT_DIR/$b0.log
)
