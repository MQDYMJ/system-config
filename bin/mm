#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)


## start code-generator "^\\s *#\\s *"
# generate-getopt vverbose j:jobs t:target qquick
## end code-generator
## start generated code
TEMP=$(getopt -o qj:t:vh \
              --long quick,jobs:,target:,verbose,help,no-quick,no-verbose \
              -n $(basename -- $0) -- "$@")
quick=false
jobs=
target=
verbose=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -q|--quick|--no-quick)
            if test "$1" = --no-quick; then
                quick=false
            else
                quick=true
            fi
            shift
            ;;
        -j|--jobs)
            jobs=$2
            shift 2
            ;;
        -t|--target)
            target=$2
            shift 2
            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=false
            else
                verbose=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-j, '
            printf %-24s '--jobs=JOBS'
            echo
            printf %06s '-q, '
            printf %-24s '--[no-]quick'
            echo
            printf %06s '-t, '
            printf %-24s '--target=TARGET'
            echo
            printf %06s '-v, '
            printf %-24s '--[no-]verbose'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code

if test -z "$jobs"; then
    jobs=-j$(cat /proc/cpuinfo |grep ^processor|wc -l)
fi

if test "$verbose" = true; then
    verbose=showcommands
else
    verbose=
fi

if test -z "$target"; then
    target=all_modules
fi

unset CLASSPATH

time (
    set -e
    if test "$SC_DEBUG" = true; then
        set -x
    fi
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    oldpwd=$PWD
    if test "$(ap .git/..)" = bootable/bootloader/lk; then
        exec android-make lk
    fi
    cd $top_dir/
    if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT" -a ! -e buildspec.mk; then
        echo Set product to $TARGET_PRODUCT-$TARGET_BUILD_VARIANT at $PWD
        android-set-product $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
    else
        hint "你还没有设置过安卓编译产品与类型，请现在设置"
        android-set-product
    fi
    if test "$quick" = false; then
        . build/envsetup.sh
        set_stuff_for_environment
        BHJ_OUT_DIR=${OUT%target/*}
    else
        BHJ_OUT_DIR=$(lookup-file .repo/../)/out
    fi
    cd $oldpwd

    cd "$(dirname $(lookup-file Android.mk))"
    export MY_ONE_SHOT_MAKEFILE=$(ap)/Android.mk
    project=$(ap)

    cd $top_dir

    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file .repo/..)'"
        if test -e $BHJ_OUT_DIR/.buildenv.sh; then
            . $BHJ_OUT_DIR/.buildenv.sh
        fi
        . ~/system-config/etc/.fix-java-version
        if test "$(basename $0)" = mm; then
            ONE_SHOT_MAKEFILE=$MY_ONE_SHOT_MAKEFILE make -j $jobs $verbose $target "$@"
        elif test "$(basename $0)" = mma; then
            make $jobs $verbose -f build/core/main.mk $@ $target BUILD_MODULES_IN_PATHS="$project"
        fi && echo $b0 build is ok
    ) 2>&1 | tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log || true

    cd $top_dir/
    grep "$b0 build is ok" $BHJ_OUT_DIR/$b0.log
)
