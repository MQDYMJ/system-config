#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

saved_args=("$@")
saved_pwd=$PWD

default_keep_building=false
if test "$b0" = mma; then
    default_keep_building=true
fi

quick-help() {
    cat <<EOF | indent-stdin -n 30 -s
快速编译（system-config 自定义优化选项，如怀疑功能有任何问题，请及时停止使用）
所做的优化有两个：
  1. 不要每次都初始化安卓编译环境（. build/envsetup.sh），使用 buildspec.mk
  2. 如果安卓版本支持并且发现相关的 ninja 文件，直接使用 ninja
在这几种情况下请勿使用此选项：
  1. 修改了 Android.mk 或其他 makefile 文件
  2. 修改了跟编译相关的环境变量（以上两种都可能需要重新生成 .ninja 文件）
  3. 不清楚是不是因为使用此编译优化而导致你的代码有编译、运行或任何其他问题时
EOF
}

mm-help() {
    cat<<EOF
使用安卓提供的模块化编译，节省编译时间。

用法：$b0 [OPTIONS]... [TARGETS]...

mma：编译当前目录下的所有模块（或指定 TARGETS）及其依赖
mm： 编译当前目录下所有模块（或指定的 TARGETS），但不编译其依赖（如果
     某依赖模块尚未编译，mm 会出错）

如果不指定 TARGETS，默认的 TARGET 是 all_modules（当前目录下所有模块），
这有时候会导致整编 system.img 时碰不到的编译错误。

EOF
}

mm-o-help() {
    if test "$b0" = mm; then
        echo "（mm 专属参数）只编指定的模块，不要编当前目录下所有模块。可以指定多次，以编译多个模块"
    else
        echo "（mma 命令不支持此参数）"
    fi
}


## start code-generator "^\\s *#\\s *"
# generate-getopt '?"$(mm-help)"' \
    # vverbose='("" showcommands)' '?"编译的时候打印所使用的详细编译命令"' \
    # j:jobs '?"使用多少个线程进行编译（默认是你的机器的 CPU 线程数）"' \
    # kkeep-building='$default_keep_building' '?"即使出错了，也继续编译没有出错的模块"' \
    # f:make-flags '?"其他想要传给 make 命令的标志和参数"' \
    # qquick '?"$(quick-help)"' \
    # @debug '?"调试此脚本"' \
    # o:only-module='()' '?"$(mm-o-help)"'
## end code-generator
## start generated code
TEMP=$( getopt -o j:kf:o:qvh \
               --long debug,jobs:,keep-building,make-flags:,only-module:,quick,verbose,help,no-debug,no-keep-building,no-quick,no-verbose \
               -n $(basename -- $0) -- "$@")
declare debug=false
declare jobs=
declare keep_building=$default_keep_building
declare make_flags=
declare -a only_module=()
declare quick=false
declare verbose=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift

            ;;
        -j|--jobs)
            jobs=$2
            shift 2

            ;;
        -k|--keep-building|--no-keep-building)
            if test "$1" = --no-keep-building; then
                keep_building=false
            else
                keep_building=true
            fi
            shift

            ;;
        -f|--make-flags)
            make_flags=$2
            shift 2

            ;;
        -o|--only-module)
            only_module=("${only_module[@]}" "$2")
            shift 2

            ;;
        -q|--quick|--no-quick)
            if test "$1" = --no-quick; then
                quick=false
            else
                quick=true
            fi
            shift

            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=
            else
                verbose=showcommands
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e "$(mm-help)"
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]debug'
            echo "调试此脚本"
            printf %06s '-j, '
            printf %-24s '--jobs=JOBS'
            echo "使用多少个线程进行编译（默认是你的机器的 CPU 线程数）"
            printf %06s '-k, '
            printf %-24s '--[no-]keep-building'
            echo "即使出错了，也继续编译没有出错的模块"
            printf %06s '-f, '
            printf %-24s '--make-flags=MAKE_FLAGS'
            echo "其他想要传给 make 命令的标志和参数"
            printf %06s '-o, '
            printf %-24s '--only-module=ONLY_MODULE'
            echo
            printf "%30s" ""
            echo "$(mm-o-help)"
            printf %06s '-q, '
            printf %-24s '--[no-]quick'
            echo "$(quick-help)"
            printf %06s '-v, '
            printf %-24s '--[no-]verbose'
            echo "编译的时候打印所使用的详细编译命令"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "$b0" = mma -a "${only_module}" -a "$quick" = false; then
    die "mma 命令不支持 -o 参数，如果当前目录下有些模块会出错的话，建议使用 -k 参数，确保编译所有 *能够* 成功编译的模块"
fi

ap() {
    (
        if test "$1"; then
            cd "$1"
        fi
        relative-path "$PWD" "$(lookup-file-dir bionic)"
    )
}

export ap

if test "$b0" = mma -a ${#saved_args[@]} = 0 -a "$PWD" != "$(PWD= pwd -P)"; then
    hint "当前目录是一个软链接？需要帮你把 mma 改成用 mmma 编译"
    ap=$(ap)
    cd $(lookup-file-dir -e .repo)
    mmma -j$jobs ${ap}
    exit
fi

if test "$keep_building" = true; then
    keep_building=-k
else
    keep_building=
fi

if test -z "$jobs"; then
    jobs=$(cat /proc/cpuinfo |grep ^processor|wc -l)
fi

unset CLASSPATH

time (
    set -e
    if test "$SC_DEBUG" = true; then
        set -x
    fi
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    oldpwd=$PWD
    if test "$(ap .git/.. 2>/dev/null)" = bootable/bootloader/lk; then
        exec android-make lk
    fi
    cd $top_dir/
    if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT" -a ! -e buildspec.mk; then
        echo Set product to $TARGET_PRODUCT-$TARGET_BUILD_VARIANT at $PWD
        android-set-product $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
    elif test ! -e buildspec.mk; then
        hint "你还没有设置过安卓编译产品与类型，请现在设置"
        android-set-product
    elif test ! -e out; then
        if test -L out; then
            mkdir -p $(readlink out)
        else
            mkdir out
        fi
    fi

    . build/envsetup.sh
    if test "$quick" = false; then
        set_stuff_for_environment
        BHJ_OUT_DIR=${OUT%target/*}
    else
        BHJ_OUT_DIR=$(lookup-file-dir .repo/)/out
        if test -e "$top_dir"/.buildspec.sc; then
            . "$top_dir"/.buildspec.sc;
        fi
    fi
    cd $oldpwd

    cd "$(dirname $(lookup-file Android.mk))"
    export MY_ONE_SHOT_MAKEFILE=$(ap)/Android.mk

    project=$(ap)
    if test "$quick" = true; then
        (
            if test -z "${only_module}"; then
                only_module=(
                    MODULES-IN-${project//\//-}
                )
            fi

            if test "$verbose"; then
                verbose=-v
            fi

            if test "$keep_building"; then
                keep_building='-k 0'
            fi
            cd $(lookup-file-dir .repo)

            if test "$b0" = mm; then
                mm_ninja_suffix=$(
                    echo -n -$TARGET_PRODUCT-$(echo ${MY_ONE_SHOT_MAKEFILE} | perl -npe 's,/,_,g')
                               )
                if test "${#mm_ninja_suffix}" -gt 64; then
                    mm_ninja_suffix=-$(echo -n "$mm_ninja_suffix" | md5sum | pn 1)
                fi


                ninja_file=out/combined$mm_ninja_suffix.ninja
            elif test "$b0" = mma; then
                ninja_file=out/combined-$TARGET_PRODUCT.ninja
            fi

            if test -e "${ninja_file}"; then
                set -o pipefail
                time wrapped-run -C 'echo "你指定了 --quick 的编译方式，请自己确认这个优化编译是安全的"' \
                            android-ninja "${only_module[@]}" -j $jobs -f "$ninja_file" $verbose |
                    tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
            else
                cd "$saved_pwd"
                wrapped-run -C 'echo "你指定了 --quick 的编译方式，但没有找到 ninja 文件（$ninja_file），因此自动调用 --no-quick 的方式进行编译"' \
                            $b0 "${saved_args[@]}" --no-quick
            fi
        )
        exit
    fi

    if test "$only_module"; then

        if ! mk_file=$(lookup-file -e Android.mk); then
            die "没有找到 Android.mk 文件"
        fi
        cd "$(dirname "$mk_file")"
        mk_dir=$(ap)

        cd $top_dir
        set -o pipefail
        extra_arg="$mk_dir:$(string-join , "${only_module[@]}")"
        echo "在安卓 8.1 上 mm 命令不支持单编某个模块，但是 mmm 命令支持，现在自动统一帮你改成用 mmm 命令（mmm $extra_arg）"
        mmm -j$jobs $keep_building $make_flags $verbose "$@" "$extra_arg" 2>&1|tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
        echo "$b0 build is ok"
        exit
    fi



    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file-dir .repo)'"
        . ~/system-config/etc/.fix-java-version
        if test "$(type -t $b0)" = function; then
            if test "$debug" = true; then
                type $b0
                type make
            fi
            $b0 -j$jobs $keep_building $make_flags $verbose "$@" &&
                echo $b0 build is ok
        else
            echo Error: $b0 is not a function\!
            echo Please report a bug to Bao Haojun.
        fi
    ) 2>&1 | (
        cd $top_dir
        tee $BHJ_OUT_DIR/$b0.log $BHJ_OUT_DIR/build.log
    ) || true

    cd $top_dir/
    if ! grep "$b0 build is ok" $BHJ_OUT_DIR/$b0.log; then
        echo "$b0 编译失败！"
        if test -e ~/src/github/smartcm/scm-helpers/warn-mm-or-mma; then
            ~/src/github/smartcm/scm-helpers/warn-mm-or-mma
        fi
        exit 1
    else
        exit 0
    fi
)
