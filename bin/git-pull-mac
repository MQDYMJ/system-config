#!/bin/bash

set -e
. ~/system-config/bin/.gitx

function is-fetch-only() {
    if is-cron || test "$FETCH_ONLY" = true; then
        echo true;
    fi
}

## start code-generator "^\\s *#\\s *"
# generate-getopt ffetch-only=\$"(is-fetch-only)"
## end code-generator
## start generated code
TEMP=$(getopt -o fh \
              --long fetch-only,help,no-fetch-only \
              -n $(basename -- $0) -- "$@")
fetch_only=$(is-fetch-only)
eval set -- "$TEMP"
while true; do
    case "$1" in

        -f|--fetch-only|--no-fetch-only)
            if test "$1" = --no-fetch-only; then
                fetch_only=false
            else
                fetch_only=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-f, '
            printf %-24s '--[no-]fetch-only'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


## end generated code
export FETCH_ONLY=$fetch_only


test $PWD = ~ && cd ~/system-config/
if test $PWD = ~/system-config -a -d ~/src/github/private-config/.git; then
    (
        cd ~/src/github/private-config
        if test "$FETCH_ONLY"; then
            git fetch $(repo-remote)
        fi
    ) >/dev/null 2>&1
fi
cd "$(dirname "$(lookup-file .git)")"
origin=$(repo-remote)
if git config remote.$origin.url; then
    git config remote.$origin.url $(git config remote.$origin.url | perl -npe 's,^git://github.com,https://github.com,')
else
    # for git svn
    git pull
    exit
fi

if test "$FETCH_ONLY" = false && ! git fetch $origin >/dev/null 2>&1; then
    die "failed to fetch $origin: $PWD"
fi

if test "$FETCH_ONLY" != true; then
    for x in remotes/$(git-remote-branch); do
        remote=$(echo $x|awk -F/ '{print $2}')
        branch=$(echo $x|perl -npe 's/.*?from-mac/from-mac/')
        if git-is-ancestor $x HEAD; then
            echo no need to merge $branch, it is already '*contained*' in HEAD
            continue;
        else
            git merge $x >/dev/null 2>&1 || {
                echo $remote/$branch merge failed
                exit -1
            }
        fi
    done
fi

(
    git submodule init
    git submodule update
) >/dev/null 2>&1

if test "$FETCH_ONLY" = true; then
    git fetch $origin >/dev/null 2>&1;
    git submodule foreach 'bash -c "git-pull-mac"'
    exit 0
fi

git submodule foreach 'bash -c "
    function do-git-pull-mac-twice() {
        git-pull-mac ||
            (
                export http_proxy=http://localhost:8087
                export https_proxy=http://localhost:8087
                git-pull-mac
            )
    }

    if ! do-git-pull-mac-twice; then
        echo git-pull-mac failed in $PWD;
    fi&"' | grep -v '^Entering '|grep 'failed in' || true # wait...
if git config --global user.email| grep -q baohaojun; then
    git submodule foreach 'git config user.email baohaojun@gmail.com'
    git config user.email baohaojun@gmail.com
fi >/dev/null 2>&1&
if test "$PWD" = ~/system-config; then
    echo run after-co-ln-s.sh again...
    ~/system-config/bin/after-co-ln-s.sh >/dev/null 2>&1 </dev/null &
fi
mkdir -p ~/.cache/system-config/for-code-reading/$HOME/system-config
touch ~/.cache/system-config/for-code-reading/$HOME/system-config/.for-code-reading
rm -f ~/system-config/.for-code-reading
