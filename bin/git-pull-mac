#!/bin/bash

set -e
. ~/system-config/bin/.gitx

test $PWD = ~ && cd ~/system-config/
cd "$(dirname "$(lookup-file .git)")"
origin=$(repo-remote)
if git config remote.$origin.url; then
    git config remote.$origin.url $(git config remote.$origin.url | perl -npe 's,^git://github.com,https://github.com,')
else
    # for git svn
    git pull
    exit
fi
if ! git fetch $origin -v; then
    die "failed to fetch $origin: $PWD"
fi
for x in remotes/$(git-remote-branch); do
    remote=$(echo $x|awk -F/ '{print $2}')
    branch=$(echo $x|perl -npe 's/.*?from-mac/from-mac/')
    if git-is-ancestor $x HEAD; then
        echo no need to merge $branch, it is already '*contained*' in HEAD
        continue;
    elif test "$FETCH_ONLY" != true; then
        git merge $x >/dev/null 2>&1 || {
            echo $remote/$branch merge failed
            exit -1
        }
    fi
done

if which crontab >/dev/null 2>&1 && test -e ~/.crontab.$USER -a "$FETCH_ONLY" != true; then
    crontab ~/.crontab.$USER
fi

git submodule init
git submodule update

if test "$FETCH_ONLY" = true; then
    git submodule foreach 'bash -c "git-pull-mac"'
    exit 0
fi
git submodule foreach 'bash -c "git-pull-mac&"' | grep .
if git config --global user.email| grep -q baohaojun; then
    git submodule foreach 'git config user.email baohaojun@gmail.com'
    git config user.email baohaojun@gmail.com
fi
if test "$PWD" = ~/system-config; then
    echo run after-co-ln-s.sh again...
    ~/system-config/bin/after-co-ln-s.sh >/dev/null 2>&1 </dev/null &
fi
mkdir -p ~/.cache/system-config/for-code-reading/$HOME/system-config
touch ~/.cache/system-config/for-code-reading/$HOME/system-config/.for-code-reading
rm -f ~/system-config/.for-code-reading
