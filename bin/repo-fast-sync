#!/bin/bash

set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt -p rfs -e @sync=true @do-reset=true @:reset-style=--soft @:jobs=10
## end code-generator
## start generated code
TEMP=$( getopt -o h \
               --long do-reset,jobs:,reset-style:,sync,help,no-do-reset,no-sync \
               -n $(basename -- $0) -- "$@")
rfs_do_reset=${rfs_do_reset:-true}
rfs_jobs=${rfs_jobs:-10}
rfs_reset_style=${rfs_reset_style:---soft}
rfs_sync=${rfs_sync:-true}
eval set -- "$TEMP"
while true; do
    case "$1" in

        --do-reset|--no-do-reset)
            if test "$1" = --no-do-reset; then
                rfs_do_reset=false
            else
                rfs_do_reset=true
            fi
            shift
            ;;
        --jobs)
            rfs_jobs=$2
            shift 2
            ;;
        --reset-style)
            rfs_reset_style=$2
            shift 2
            ;;
        --sync|--no-sync)
            if test "$1" = --no-sync; then
                rfs_sync=false
            else
                rfs_sync=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]do-reset'
            echo
            printf "%06s" " "
            printf %-24s '--jobs=JOBS'
            echo
            printf "%06s" " "
            printf %-24s '--reset-style=RESET_STYLE'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]sync'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done


export rfs_do_reset
export rfs_jobs
export rfs_reset_style
export rfs_sync

## end generated code

if test "$rfs_sync" = true; then
    repo sync -j4 -n -c
fi

if test ! -d ~/src/empty-git/.git; then
    mkdir -p ~/src/empty-git;
    (
        cd ~/src/empty-git
        git init .
    )
fi

function fast-init-git-repo() {
    skipping=$1
    dir=$2
    if test "$skipping" = skipping -a "$dir"; then
        mkdir -p "$dir"
        (
            cd "$dir"
            repo_info=$(repo forall . -c 'echo $REPO_PROJECT $REPO_LREV')
            repo_lrev=${repo_info#* }
            repo_project=${repo_info% *}
            if test "$repo_project" = "$(cat .git/repo-project 2>/dev/null)"; then
                echo no need to init $PWD
            else
                rm .git -rf
                cp ~/src/empty-git/.git . -al

                repo_path=$(ap)
                (
                    cd .git
                    tolink=()
                    for x in description hooks info objects rr-cache svn config logs packed-refs refs shallow; do
                        rm -rf $x
                        source=$(lookup-file -e .repo)/projects/$repo_path.git/$x
                        if test -e "$source"; then
                            tolink=($(readlink -f "$source") ${tolink[@]})
                        fi
                    done
                    relative-link ${tolink[@]} .
                    echo "$repo_project" > repo-project
                )
            fi
            if test "$rfs_do_reset" = true; then
                echo reset $PWD
                git reset $rfs_reset_style -q ${repo_lrev}
            fi
        )
    fi
}

export -f fast-init-git-repo

repo forall -c 'echo skipping $PWD' 2>&1 | xargs -d \\n -P $rfs_jobs -n 1 bash -c 'set -e; if ! fast-init-git-repo $@; then echo $@ failed; exit -1; fi' true
