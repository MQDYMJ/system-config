#!/bin/bash
set -e

. aterr log "Failed to run org-export $*"

tmp_el=/tmp/$(basename $0).$$

function die() {
    echo Error: "$@"
    exit -1
}

function debug() {
    echo "$@" 1>&2
}

export START_DIR=$(readlink -f .)
. ~/system-config/bin/org-export.func
link=true
TEMP=$(getopt -o L --long no-link -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
        -L|--no-link)
        link=false
        shift
        ;;
        --)
        shift
        break
        ;;
        *)
        die "internal error: $(. bt; echo; bt | indent-stdin)"
        ;;
    esac
done

orgs=(
    $(
        find blog -name '*.org'|
            grep -v '\.#'|
            sort -n|
            xargs -d \\n bash -c 'for x in "$@"; do readlink -f "$x"; done' true
    )
)

function find-curr() {
    local curr=0
    needle=$(readlink -f "$1")
    for org in "${orgs[@]}"; do
        if test "$org" = "$needle"; then
            echo $curr
        fi
        ((curr++)) || true
    done
}

(
    cat <<EOF
(progn
(let ((old-theme (car custom-enabled-themes)))
(setenv "START_DIR" "$START_DIR")
EOF
    next=0
    export title
    for x in "$@"; do
        # echo working with $x 1>&2
        # ps.tree $$.org-export 1>&2
        if ! grep -e '^#+title:' -i "$x" -q; then
            (
                title=$(basename "$x" | perl -npe 's/_/\\_/g;')
                cat <<EOF
#+TITLE: ${title/%.org/}

EOF
                cat "$x"
            ) > "$x".$$
            mv "$x".$$ "$x"
        fi
    done

    for x in "$@"; do
        curr=$(find-curr "$x")
        debug curr is $curr for $x
        ((next=curr+1)) || true
        ((prev=curr-1)) || true



        export ORG_FILE_NAME=$(readlink -f $x);
        test -e $x
        tf=/tmp/org-export-$(basename $x).$$ # temp file
        (
            if test $link = false; then
                cat $x
                exit 0
            fi

            export curr_title=$(grep -e '^#+title:' -i "${orgs[$curr]}"|perl -npe 's/.*?:\s+//')
            export curr_url=${orgs[$curr]/%.org/.html}

            if test $prev -lt 0; then
                prev_title=Archive
                prev_url=meta/Archive.html
            else
                prev_title=$(grep -e '^#+title:' -i "${orgs[$prev]}"|perl -npe 's/.*?:\s+//')
                prev_url=${orgs[$prev]/%.org/.html}
                if grep -q -e 'Archive <!-- next-title -->' $prev_url; then
                    org-export ${orgs[$prev]} 1>&2
                fi
            fi

            if test $next -ge ${#orgs[@]}; then
                next_title=Archive
                next_url=meta/Archive.html
            else
                next_title=$(grep -e '^#+title:' -i "${orgs[$next]}"|perl -npe 's/.*?:\s+//')
                next_url=${orgs[$next]/%.org/.html}
            fi

            rel_prev_url=$(relative_url $prev_url $curr_url)
            rel_next_url=$(relative_url $next_url $curr_url)
            cat "$x"
            cat <<EOF
#+BEGIN_EXPORT html
      <nav>
        <ul id="prev_next_posts">
          <li class="prev_post">
            <a href="$rel_prev_url"> <!-- prev-url -->
              <i class="icon-chevron-left">《</i>
              $prev_title <!-- prev-title -->
            </a>
          </li>
          <li class="next_post" style="text-align: right;">
            <a href="$rel_next_url"> <!-- next-url -->
              $next_title <!-- next-title -->
              <i class="icon-chevron-right">》</i>
            </a>
          </li>
        </ul>
      </nav>
#+END_EXPORT
EOF
        ) > $tf.org


        org-export.help $tf.org
    done
    echo "))"
) > $tmp_el

(
    cd /tmp
    find-or-exec emacs
    emacsclient -e "(load \"$tmp_el\")"
)

for x in "$@"; do
    tf=/tmp/org-export-$(basename $x).$$
    perl -npe 's,\bfile:////([^/]),file://///$1,g' -i $tf.html
    x=${x%.org}

    export ORG_TEMPFILE_BASENAME=$(basename "$tf")
    export ORG_ORIGFILE_BASENAME=$(basename "$x")

    perl -npe 's|\Q$ENV{ORG_TEMPFILE_BASENAME}\E|$ENV{ORG_ORIGFILE_BASENAME}|g' $tf.html > "$x".html

    (
        cd $(dirname "$x")
        if test ! -e emojis; then
            relative-link $(readlink -f $(lookup-file -e ".git/../emojis")) .
        fi
        # save.-to-git -m "before org2html $x"
        org2html --fix-emojis-only "$(basename "$x".html)"
        (
            cd emojis
            git add .
        ) >/dev/null 2>&1 || true
    )

    if test $# = 1 -a "$RUN_IN_PARALLEL" != true; then
        of "$x".html&
    fi
    rm $tf.*
done
