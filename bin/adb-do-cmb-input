#!/bin/bash
if test $# = 0; then
    set -- "$(sawfish-ask-for-input -s)"
fi
set -e

declare -A layout
declare -A row_click_y

top_activity=$(adb-top-activity)


if [[ $top_activity =~ ^com.ecitic.bank.mobile/ ]]; then
    bank=zhongxin
    layout[lc-1]='(1 2 3 4 5 6 7 8 9 0)'
    layout[lc-2]='(q w e r t y u i o p)'
    layout[lc-3]='(a s d f g h j k l bs)'
    layout[lc-4]='(lc-uc z x c v b n m lc-sym lc-num)'

    layout[sym-1]='(\~ \` \! \@ \# \$ \% \^ \& \*)'
    layout[sym-2]='(\( \) _ - + = \{ \} \[ \])'
    layout[sym-3]='(\| \\ \: \; \" "'\''" \< \, \>)'
    layout[sym-4]='(sym-num sym-abc \? . \  \  / £ € ¥)'

    single_row_height=$(((1880 - 1260) / 3))
    lowest_row_bottom_y=2055
    total_rows=4
    current_panel=lc
elif [[ $top_activity =~ ^cmb.pb/ ]]; then
    bank=zhaoshang
    current_panel=num
    layout[lc-1]='(q w e r t y u i o p)'
    layout[lc-2]='(a s d f g h j k l)'
    layout[lc-3]='(lc-uc z x c v b n m lc-sym)'
    layout[lc-4]='(lc-num lc-num space space space space space lc-sym lc-sym)'

    layout[sym-1]='(\! \@ \# \$ \% \^ \& \* \( \))'
    layout[sym-2]='("'\''" \" = _ \: \; \? \~ \| ·)'
    layout[sym-3]='(\+ - \\ / \[ \] \{ \} sym-bs)'
    layout[sym-4]='(sym-num , . \< \> € £ ¥ sym-abc)'

    layout[num-1]='(1 2 3)'
    layout[num-2]='(4 5 6)'
    layout[num-3]='(7 8 9)'
    layout[num-4]='(num-abc 0 num-bs)'

    single_row_height=$(((2160 - 1620) / 4))
    total_rows=4
    lowest_row_bottom_y=2160
fi

for i in $(seq 1 4); do
    row_click_y[$i]=$(((lowest_row_bottom_y - single_row_height * ((4 - i) * 2 + 1) / 2) * 1920 / 2160))
done

declare -A char_panel
declare -A char_row
declare -A char_col
declare -A char_layout

for l in "${!layout[@]}"; do
    eval row="${layout[$l]}"
    col=0
    for char in "${row[@]}"; do
        char_col[$char]=$((++col)) || true
        char_row[$char]=${l#*-}
        char_panel[$char]=${l%-*}
        char_layout[$char]=$l
    done
done

for char in {A..Z}; do
    char_col[$char]=${char_col[${char,,}]}
    char_row[$char]=${char_row[${char,,}]}
    char_panel[$char]=uc
    char_layout[$char]=${char_layout[${char,,}]}
done

function click-char() {
    local char=$1
    local row=${char_row[$char]}
    local col=${char_col[$char]}

    local layout_n_items=$(
        eval line="${layout[${char_layout[$char]}]}"
        echo ${#line[@]}
          )

    local y=${row_click_y[$row]}
    if test "$layout_n_items" = 10; then
        local x=$(((1080 - 0) / 20 * (col * 2 - 1)))
    elif test "$layout_n_items" = 9; then
        local x=$(((1080 - 0) / 20 * (col * 2)))
    elif test "$layout_n_items" = 3; then
        local x=$(((1080 - 0) / 6 * (col * 2 - 1)))
    fi
    adb-tap $x $y
}

IFS=$'\n'



function go-back-to-lc() {
    if test "$current_panel" = uc; then
        click-char lc-uc
    elif test "$current_panel" = sym; then
        click-char sym-abc
    elif test "$current_panel" = num; then
        click-char num-abc
    fi
    current_panel=lc
}

function go-to-panel() {
    if test "$1" = uc; then
        click-char lc-uc
    elif test "$1" = sym; then
        click-char lc-sym;
    fi
    current_panel=$1
}

for char in $(
    perl -e 'use Encode; for (@ARGV) {
        $_ = decode_utf8($_);
        for (split(//, $_)) {
            $_ = encode_utf8($_);
            print "$_\n";
        }
    }' "$@"); do
    panel=${char_panel[$char]}
    if test -z "$panel"; then
        die "Can't do $char: no panel"
    fi
    if test "$panel" != "$current_panel"; then
        if test "$current_panel" != lc; then
            go-back-to-lc
        fi
        go-to-panel "$panel"
        sleep .5
    fi
    click-char "$char"
done
