;; -*- mode: sawfish -*-

(require 'sawfish.wm.util.keymap)
(require 'sawfish.wm.state.maximize)
(require 'rep.data.ring)

(load-file "~/system-config/.sawfish/bhj-draw-wininfo.jl")
(load-file "~/system-config/.sawfish/bhj-draw-notification.jl")
(require 'bhj-draw-notification)
(require 'bhj-run-application)
(require 'bhj-draw-wininfo)
(require 'sawfish.wm.commands.move-cursor)
(defun bind-both-global&window-keymaps (key map)
  (bind-keys global-keymap key map)
  (bind-keys window-keymap key map))
(defun unbind-both-global&window-keymaps (key)
  (unbind-keys global-keymap key)
  (unbind-keys window-keymap key))

(bind-both-global&window-keymaps "C-F23" '(move-cursor-left))
(bind-both-global&window-keymaps "C-F24" '(move-cursor-right))
(bind-both-global&window-keymaps "Super-F23" '(move-cursor-up))
(bind-both-global&window-keymaps "Super-F24" '(move-cursor-down))

(setq bhj-is-gnome? nil)
(setq warp-to-window-offset 50
      warp-to-window-enabled t)

(setq s-h-keymap (make-keymap)
      print-keymap (make-keymap)
      c-x-esc-keymap (make-keymap)
      c-x-map (make-keymap)
      esc-map (make-keymap)
      esc-g-map (make-keymap))

(defun do-esc-map ()
  (let* ((event (read-event "ESC"))
         (key (event-name event))
         (binding (let ((global-keymap esc-map))
                    (lookup-event-binding event))))
    (when binding
      (apply-command (car binding) (cdr binding)))))

(defun do-esc-g-map ()
  (let* ((event (read-event "ESC g"))
         (key (event-name event))
         (binding (let ((global-keymap esc-g-map))
                    (lookup-event-binding event))))
    (when binding
      (apply-command (car binding) (cdr binding)))))

(defun do-c-x-map ()
  (let* ((event (read-event "C-x"))
         (key (event-name event)))
    (when (let ((global-keymap c-x-map))
            (lookup-event-binding event))

        (synthesize-event-gnome? key (input-focus)))))

(bind-keys s-h-keymap "ESC" '(let ((key (concat "M-" (event-name (read-event "M-")))))
                               (synthesize-event-gnome? key (input-focus))))

(setq esc-g-remap-alist
      '(("M-g g" . '((t "C-g") (qpdfview "C-j") (acroread "M-v" "g" "p"))))) ; go to page in acroread



(defun multi-bind-keys (map what &rest keys)
  "for each key in KEYS, bind it in MAP to do WHAT"
  (mapc (lambda (key)
          (bind-keys map key what))
        keys))
(setq move-lock-when-maximized nil)


(load-file "~/system-config/.sawfish/iswitch-window.jl")

(defun bhj-global-cycle-class (window)
  (let ((class (window-class window)))
    (cond
     ((string-match im-class class 0 t)
      im-class)
     ((string-match br-class class 0 t)
      br-class)
     ((string-match dc-class class 0 t)
      dc-class)
     (t
      class))))

(defun bhj-window-class (window)
  (window-class window))

(bind-keys s-h-keymap "s"  '(system "EMACS=t s&"))
(bind-keys s-h-keymap "F1"  '(system "EMACS=t s&"))
(bind-keys s-h-keymap "F2"  '(system "EMACS=t s&"))
(bind-keys s-h-keymap "F3"  '(system "EMACS=t s&"))
(bind-keys s-h-keymap "S"  '(system "os&"))
(bind-keys s-h-keymap "n"  '(system "douban next&"))
(bind-both-global&window-keymaps "KP_Multiply" '(system "douban like&"))
(bind-both-global&window-keymaps "Super-KP_Multiply" '(system "douban loop-same-author&"))
(bind-both-global&window-keymaps "KP_Divide" '(system "douban unlike&"))
(bind-both-global&window-keymaps "Super-Down"  '(system "douban info&"))
(bind-both-global&window-keymaps "Super-Up" '(system "douban ba&"))
(bind-both-global&window-keymaps "Super-Right"  '(system "douban next&"))
(bind-both-global&window-keymaps "Super-Left"  '(system "douban prev&"))
(bind-both-global&window-keymaps "Super-S-Right"  '(system "douban forth&"))
(bind-both-global&window-keymaps "Super-S-Left"  '(system "douban back&"))
(bind-both-global&window-keymaps "XF86AudioNext"  '(system "douban next&"))
(bind-both-global&window-keymaps "XF86AudioPrev"  '(system "douban prev&"))
(bind-both-global&window-keymaps "Super-KP_Right"  '(system "douban jump-forth&"))
(bind-both-global&window-keymaps "Super-KP_Left"  '(system "douban jump-back&"))
(bind-both-global&window-keymaps "Super-XF86AudioPlay"  '(system "douban info&"))
(bind-both-global&window-keymaps "XF86AudioPlay"  '(system "douban pause&"))
(bind-both-global&window-keymaps "C-XF86AudioPlay"  '(system "douban lyrics&"))

(bind-keys s-h-keymap "p"  '(system "emacs-get-android-clipboard&"))
(bind-keys s-h-keymap "P"  '(system "emacs-get-android-phone&"))
(bind-both-global&window-keymaps "XF86Launch5" '(system "EMACS=t do-capture&"))
(bind-both-global&window-keymaps "XF86Launch6" '(system "find-or-exec 'Wrench V%Wrench' Wrench.sh&"))
(bind-both-global&window-keymaps "XF86Launch7" '(system "find-or-exec gjiten gjiten&"))
(bind-both-global&window-keymaps "XF86Launch8" '(system "custom-command&"))
(bind-both-global&window-keymaps "XF86Launch9" '(system "EMACS=t ssssh&"))
(bind-both-global&window-keymaps "Super-F5" '(system "EMACS=t ssssh&"))

(bind-both-global&window-keymaps "Super-XF86KbdBrightnessUp"  '(system "switch-touchpad enable&")) ; for mac
(bind-both-global&window-keymaps "Super-XF86KbdBrightnessDown"  '(system "switch-touchpad enable&")) ; for mac
(bind-keys s-h-keymap "Super-i" '(read-event (format nil "Window is %s;\n\n WM_CLASS is: %s;\n\n and Window class is: %s\n\n and Window name is %s\n\nPress any key to continue..."
                                                     (input-focus)
                                                     (translate-string (substring (caddr (get-x-property (input-focus) (quote WM_CLASS))) 0) "|")
                                                     (window-class (input-focus))
                                                     (window-name (input-focus)))))
(bind-keys s-h-keymap "i" '(system "indent-clipboard&"))
(bind-keys s-h-keymap "I" '(system "deindent-clipboard&"))
(bind-keys s-h-keymap "Insert" '(system "sync-x-clip&"))

(defun bhj-activate-window (window)
  (if (window-iconified-p window)
      (uniconify-window window))
  (activate-window window)
  (let* ((focus window)
         (width (car (window-dimensions focus)))
         (height (cdr (window-dimensions focus))))
    (warp-cursor-to-window (input-focus) (quotient width 2) (quotient height 2))))

(defun window-exists-p (wclass)
  (if (eq 'wFound
          (catch 'wFound
            (mapc (lambda (window)
                    (when (string-match wclass (bhj-window-class window) 0 t)
                      (throw 'wFound 'wFound)))
                  (stacking-order))))
      t
    nil))

(defun find-window-or-exec (wclass-or-lambda #!optional wcommand)
  (if (eq (catch 'wFound
            (mapc (lambda (window)
                    (when (if (stringp wclass-or-lambda)
                              (if (string-match "%" wclass-or-lambda)
                                  (and (string-match (string-replace "%.*" "" wclass-or-lambda) (window-name window) 0 t)
                                       (string-match (string-replace ".*%" "" wclass-or-lambda) (bhj-window-class window) 0 t))
                                (string-match wclass-or-lambda (bhj-window-class window) 0 t))
                            (when functionp wclass-or-lambda
                                  (wclass-or-lambda window)))
                      (bhj-activate-window window)
                      (throw 'wFound 'wFound)))
                  (stacking-order)))
          'wFound)
      (when  (and (current-event)
                  (string-equal (event-name (current-event)) "Super-n"))
        (eat-a-key-release "n"))
    (if wcommand
        (system (concat wcommand "&")))
    nil))

(mapc
 (lambda (args)
   (let ((key (car args))
         (wclass (cadr args))
         (wcommand (caddr args)))
     (bind-keys s-h-keymap key
                (lambda ()
                  (find-window-or-exec (eval wclass) wcommand)))))
 '(
   ("Super-m"          "Emacs" "emacs.bhj")
   ("v"                "adjust-volume" "adjust-volume")
   ("C-,"              "hello world no such thing" "firefox pop")
   ("C-."              "hello world no such thing" "firefox push")
   ("Super-n"          "iceweasel|firefox|chromium|google-chrome" "firefox")
   ("Super-t"          (lambda (w) (and
                               (string-match "konsole|xfce4-terminal" (bhj-window-class w) 0 t)
                               (not (string= "emacs" (window-name w))))) "konsole.bhj")
   ("d"                "hello world no such thing" "my-dict")
   ("Meta-Scroll_Lock" "hello world no such thing" "lock-screen")
   ("Super-XF86AudioRaiseVolume" "hello world no such thing" "lock-screen")
   ("Super-x" "xcalc" "xcalc")
   ("XF86Switch_VT_12" "konsole" "konsole -e ~/system-config/bin/myscr")
   ("Shift-ESC" "konsole" "konsole --hide-menubar -e ~/system-config/bin/myscr")))

; (bind-both-global&window-keymaps "Super-Button1-Click"  '(system "xdotool-when-keyboard-clear keydown Control click 1 keyup Control&"))
(bind-both-global&window-keymaps "XF86Search" '(system "find-or-exec Search beagle-search&"))

(bind-both-global&window-keymaps "C-S-XF86PowerOff"  '(system "lock-screen&"))
(bind-both-global&window-keymaps "C-S-DEL"  '(system "lock-screen&"))

(bind-both-global&window-keymaps "XF86AudioRaiseVolume"  '(system "adjust-volume&"))
(bind-both-global&window-keymaps "XF86AudioLowerVolume"  '(system "adjust-volume&"))

(defun classed-key-synthesize (from to)
  (when (eq (car to) 'quote)
    (setq to (cadr to)))
  (let* ((fw (input-focus))
         (class (window-class fw))
         (map-to (or
                  (cdr (or (assoc (intern class) to)
                           (assoc t to)))
                  from)))
    (mapc (lambda (map-1)
            (synthesize-event-gnome? map-1 (input-focus)))
          map-to)
    (when (and (string-equal ">" (event-name (current-event)))
               (string-equal "Firefox" class))
      (eat-a-key-release ">" "Release->$|Release-\\.$"))))

(defun get-window-map (window-map-assoc class)
  (setq window-map-assoc (cadr window-map-assoc))
  (cadr (or (assoc class window-map-assoc)
            (assoc t window-map-assoc))))

(defun bind-keys-nil-unbind (keymap key action)
  (if action
      (progn
        (when (eq keymap global-keymap)
          (bind-keys window-keymap key action))
        (bind-keys keymap key action))
    (unbind-keys keymap key)
    (when (eq keymap global-keymap)
      (unbind-keys window-keymap key))))

(setq emacs-style-window-class-re "rdesktop|wrench|emacs|xfce4-terminal|konsole|gnome-terminal|urxvt|krdc|vncviewer|wine")
(defvar global-remap-alist nil
  "Window specific remap list")

(setq global-remap-alist
      '(("C-a" . '((t "Home")))
        ("C-z" . '((Xfce4-terminal "C-z" "z")))
        ("Super-z" . '((Xfce4-terminal "C-z" "z") (t "C-z")))
        ("Super-SPC" . '((Xfce4-terminal "C-z") (t "next")))
        ("C-g" . '((Firefox "C-g") (Iceweasel "C-g") (t "ESC")))
        ("Next" . '((Firefox "C-v") (Iceweasel "C-v") (qpdfview "SPC")))
        ("Prior" . '((Firefox "ESC" "v") (Iceweasel "ESC" "v") (qpdfview "BS")))
        ("C-d" . '((t "DEL")))
        ("C-e" . '((t "End")))
        ("C-b" . '((Firefox "C-b") (Iceweasel "C-b") (t "Left")))
        ("C-y" . '((Firefox "C-y") (Iceweasel "C-y") (t "C-v")))
        ("C-f" . '((Firefox "C-f") (Iceweasel "C-f") (t "Right")))
        ("M-b" . '((t "C-Left"))) ; this is for Escape only, not Alt
        ("M-f" . '((t "C-Right")))
        ("M-B" . '((t "C-S-Left")))
        ("M-F" . '((t "C-S-Right")))
        ("F11" . '((Emacs "C-C-c" "M-j" "s")))
        ("F12" . '((Emacs "C-c" "M-j" "d")))
        ("S-F12" . '((Emacs "C-c" "M-j" "D")))
        ("S-F11" . '((Emacs "C-c" "M-j" "D")))
        ("C-s" . '((Firefox "C-s")
                   (Iceweasel "C-s")
                   (Okular "F3")
                   (Gjiten "M-s" "ISO_Left_Tab" "ISO_Left_Tab" "ISO_Left_Tab" "ISO_Left_Tab" "ISO_Left_Tab" "Home" "S-End" "RET")
                   (t "C-g")))
        ("C-v" . '((qpdfview "SPC") (t "Next")))
        ("SPC" . '((Fbreader "Next")))
        ("BS" . '((Fbreader "Prior")))
        ("C-." . '((Xfce4-terminal "ESC" ".")))
        ("C-," . '((Xfce4-terminal "ESC" ",")))
        ("C-?" . '((Xfce4-terminal "ESC" "?")))
        ("M-v" . '((qpdfview "BS") (t "Prior")))
        ("M-<" . '((qpdfview "Home")
                   (t "C-Home")))
        ("M-d" . '((t "C-S-Right" "DEL")))
        ("M->" . '((qpdfview "End")
                   (t "C-End")))
        ("C-r" . '((Firefox "C-r") (Iceweasel "C-r") (Okular "S-F3") (t "C-S-g")))
        ("C-k" . '((t "S-End" "Del")))
        ("M-BS" . '((t "C-BS")))
        ("C-p" . '((t "Up")))
        ("C-n" . '((t "Down")))
        ("M-Left" . '((qpdfview "C-RET")
                      (t nil)))
        ("M-Right" . '((qpdfview "C-S-RET")))
        ("C-x" . '((Firefox "C-x") (Iceweasel "C-x") (t do-c-x-map)))
        ("Super-&" . '((Wrench "Meta-&")))
        ("o" . '((Wine "s")))
        ("F1" . '((Wine mm6-save)))
        ("F2" . '((Wine mm6-load)))
        ("F3" . '((Wine mm6-bless)))
        ("F4" . '((Wine mm6-heroism)))
        ("F5" . '((Wine mm6-dragon-fly)))
        ("F6" . '((Wine mm6-wizard-eye)))
        ("F7" . '((Wine mm6-torch)))
        ("F8" . '((Wine mm6-cure-weakness)))
        ("F9" . '((Wine mm6-stone-skin)))
        ("F10" . '((Wine mm6-regeneration)))
        ("&" . '((Wine mm8-1)))
        ("[" . '((Wine mm8-2)))
        ("{" . '((Wine mm8-3)))
        ("}" . '((Wine mm8-4)))
        ("(" . '((Wine mm8-5)))
        ("Super-*" . '((Wrench "Meta-*") (Firefox "Meta-*") (Iceweasel "Meta-*")))))

(defun mm6-dragon-fly ()
  (system "mm8 cast air.fly&"))

(defun mm6-bless ()
  (system "mm8 cast bless&"))

(defun mm6-regeneration ()
  (system "mm8 cast regeneration&"))

(defun mm6-shield ()
  (system "mm8 cast shield&"))

(defun mm6-stone-skin ()
  (system "mm8 cast stone.skin&"))

(defun mm6-heroism ()
  (system "mm8 cast heroism&"))

(defun mm6-wizard-eye ()
  (system "mm8 cast eye&"))

(defun mm6-torch ()
  (system "mm8 cast torch&"))

(defun mm6-cure-weakness ()
  (system "mm8 cast cure.weakness&"))

(defun mm8-1 ()
  (system "mm8 1&"))

(defun mm8-2 ()
  (system "mm8 2&"))

(defun mm8-3 ()
  (system "mm8 3&"))

(defun mm8-4 ()
  (system "mm8 4&"))

(defun mm8-5 ()
  (system "mm8 5&"))

(defun mm6-save ()
  (system "mm8-bless.sh save&"))

(defun mm6-load ()
  (system "mm8-bless.sh load&"))

(bind-both-global&window-keymaps "Super-XF86Favorites" '(system "sawfish-gimp-stroke&"))

(defun do-bind-keys-nil-unbind (keymap from to window-mapped-to class)
  (bind-keys-nil-unbind
   keymap
   from
   (cond
    ((null window-mapped-to)
     nil)
    ((symbolp window-mapped-to)
     (symbol-value (get-window-map to class)))
    (t
     `(classed-key-synthesize ,from ,to)))))

(defun do-global-remap(class)
  (mapc (lambda (key-map-1)
          (let* ((from (car key-map-1))
                 (to (cdr key-map-1))
                 (window-mapped-to (get-window-map to class)))
            (when (string-match "^M-" from 0 nil)
              (bind-keys esc-map (substring from 2) `(classed-key-synthesize ,from ,to)))
            (bind-keys c-x-map from `(synthesize-event-gnome? ,from ,(input-focus)))
            (do-bind-keys-nil-unbind global-keymap from to window-mapped-to class)))
        global-remap-alist)
  (mapc (lambda (key-map-1)
          (let* ((from (substring (car key-map-1) 4))
                 (to (cdr key-map-1))
                 (window-mapped-to (get-window-map to class)))
            (do-bind-keys-nil-unbind esc-g-map from to window-mapped-to class)))
        esc-g-remap-alist)
  (bind-both-global&window-keymaps "ESC" do-esc-map)
  (bind-keys esc-map "ESC" `(synthesize-event-gnome? "ESC" ,(input-focus)))
  (bind-keys s-h-keymap "C-x" c-x-map)
  (bind-keys esc-map "g" '(do-esc-g-map)))

(defun undo-global-remap(class)
  (mapc (lambda (key-map-1)
          (let ((from (car key-map-1))
                (to (cdr key-map-1))
                window-mapped-to)
            (if (assoc class (cadr to))
                (progn
                  (setq window-mapped-to (get-window-map to class))
                  (do-bind-keys-nil-unbind global-keymap from to window-mapped-to class))
              (unbind-both-global&window-keymaps from))))
        global-remap-alist)
  (unbind-both-global&window-keymaps "C-x")
  (unbind-both-global&window-keymaps "ESC"))

(setq no-tap-drag-window-class-re "acroread")
(defun do-focus-global-remap (w focus-mode)
  (let ((class (window-class w)))
    (if (string-match emacs-style-window-class-re class 0 t)
        (undo-global-remap (intern class)) ; it will map emacs style windows if specified
      (do-global-remap (intern class)))
    (if (string-match gnome-windows-re (window-class w) 0 t)
        (setq bhj-is-gnome? t)
      (setq bhj-is-gnome? nil))
    (if (string-match no-tap-drag-window-class-re (window-class w) 0 t)
        (system "synclient TapAndDragGesture=0&")
      (system "synclient TapAndDragGesture=1&"))))
(add-hook 'focus-in-hook do-focus-global-remap)

;; (setq focus-in-hook (cons (nth 2 focus-in-hook)
;;                         (cons (nth 4 focus-in-hook))))

;; to clear it: (setq visibility-notify-hook nil)

(bind-keys s-h-keymap "Super-h"  '(synthesize-event "Super-h" (input-focus)))
(bind-keys s-h-keymap "Super-s" 'iswitch-window)
(bind-keys s-h-keymap "Super-f" '(maximize-window-fullscreen-toggle (input-focus)))

(bind-keys window-keymap "Button1-Click" 'raise-and-pass-through-click)

(mapc
 (lambda (arg)
   (let ((wclass nil) (wmark nil))
     (bind-both-global&window-keymaps (concat "C-M-" (format nil "%d" arg))
                                      (lambda ()
                                        (setq wmark (input-focus))
                                        (setq wclass (bhj-window-class (input-focus)))))
     (bind-both-global&window-keymaps (concat "Super-" (format nil "%d" arg))
                                      (lambda ()
                                        (if (and  (windowp wmark) (window-mapped-p wmark))
                                            (bhj-activate-window wmark)
                                          (if wclass
                                              (find-window-or-exec wclass)))))))
 '(0 1 2 3 4 5 6 7 8 9))

(setq super-key-window-remap
      '(("v" . ((Dia . "C-v")
                (Xfce4-terminal . "C-S-v")
                (QtCreator . ("M-e" "p"))
                (t . "S-Insert")))
        ("n" . ((Firefox . "Down") (Iceweasel . "Down")))
        ("y" . ((Dia . "S-C-z")
                (Qtcreator . "S-C-z")))
        ("c" . ((Emacs . "M-w")
                (Konsole . "C-S-c")
                (QtCreator . ("M-e" "c"))
                (Xfce4-terminal . "C-S-c")
                (Gnome-terminal . "C-S-c")
                (t . "C-c")))
        ("w" . ((Firefox . ("C-x" "C-w")) (Iceweasel . ("C-x" "C-w"))))
        ("l" . ((Firefox . ("C-x" "C-l")) (Iceweasel . ("C-x" "C-l"))))
        ("r" . ((Firefox . ("C-x" "C-r")) (Iceweasel . ("C-x" "C-r"))))
        ("s" . ((Firefox . ("C-x" "C-s")) (Iceweasel . ("C-x" "C-s"))
                (Gimp . ("C-M-s"))
                (Gimp-2.8 . ("C-M-s"))
                (Gjiten . ("M-x" "TAB" "TAB" "TAB" "TAB" "TAB" "TAB" "RET"))
                (Qtcreator . "C-S-s")))
        ("d" . ((Firefox . ("C-x" "C-d")) (Iceweasel . ("C-x" "C-d"))))))


(setq gnome-windows-re "gnome-.*|nautilus|evince|eog|gedit|Gucharmap")

(defun rewrite-event-for-xdotool (event)
  (let* ((keys-break-down (string-split "-" event))
         (modifiers (reverse (cdr (reverse keys-break-down))))
         (main-key (last keys-break-down))
         (result ""))
    (while modifiers
      (case (intern (car modifiers))
        ((C Control)
         (setq result (concat result "ctrl+")))
        ((S Shift)
         (setq result (concat result "shift+")))
        ((M Meta)
         (setq result (concat result "alt+")))
        ((Super)
         (setq result (concat result "super+"))))
      (setq modifiers (cdr modifiers)))
    (cond
     ((string= main-key "RET")
      (setq main-key "Return"))
     ((string= main-key "ESC")
      (setq main-key "Escape")))
    (setq result (concat result main-key))))

(defun synthesize-event-gnome? (event window)
  ;;(message (format nil "key is %s, window is %s" event (bhj-window-class window)))
  (if (or (and (eq (input-focus) window)
               bhj-is-gnome?)
          (and (not (eq (input-focus) window))
               (string-match gnome-windows-re (window-class window) 0 t)))
      (progn
        (system
         (format nil "xdotool_window=%d xdotool-when-keyboard-clear key %s&"
                 (window-id window)
                 (rewrite-event-for-xdotool event))))
    (synthesize-event event window)))

(defun eat-a-key-release (key &optional regexp)
  (let ((eval-key-release-events t) event)
    (while eval-key-release-events
      (setq event (read-event (format nil "Release the %s to eat it" key)))
      (when (string-match (or regexp (format nil "Release-%s$" key)) (event-name event))
        (setq eval-key-release-events nil)))))

(defun my-debug (fmt &rest args)
  (message (apply format nil fmt args)))

(defun super-key-binding (key)
                                        ;(message (format nil "calling %s for %s" key (bhj-window-class (input-focus)) ))
  (let* ((fw (input-focus))
         (class (window-class fw))
         (map-to (or (cdr (or (assoc (intern class) (assoc key super-key-window-remap))
                              (assoc t (assoc key super-key-window-remap))))
                     (concat "C-" key))))
    (if (listp map-to)
        (mapc (lambda (map-1)
                (synthesize-event-gnome? map-1 (input-focus)))
              map-to)
      (synthesize-event-gnome? map-to (input-focus)))
    (when (and (string-equal key "n")
               (string-match "Firefox|Iceweasel" class)
               (not eval-key-release-events))
      (eat-a-key-release key))))

(defun bind-super-key (key)
  (bind-both-global&window-keymaps
   (concat "Super-" key)
   `(super-key-binding ,key))
  (bind-keys window-keymap
             (concat "Super-" key)
             `(super-key-binding ,key)))

(mapc
 #'bind-super-key
 '("a" "b" "c" "d" "e" "f" "g" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"))

(bind-both-global&window-keymaps "Super-Insert"  '(system "send-key&"))
(bind-both-global&window-keymaps "Super-S-RET"  '(system "send-key&"))
(bind-both-global&window-keymaps "Super-RET" '(synthesize-event "Menu" (input-focus)))
(bind-both-global&window-keymaps "Super-BS" '(synthesize-event "Prior" (input-focus)))
(bind-both-global&window-keymaps "Super-Control-o"  '(system "emacsclient -n ~/system-config/doc/notes.org&"))


(bind-keys s-h-keymap "Super-d"
           (lambda ()
             (if (not (showing-desktop-p))
                 (show-desktop)
               (hide-desktop))))

(bind-keys s-h-keymap "r" 'bhj-run-application)
(bind-keys s-h-keymap "Super-r" 'bhj-run-application)

(require 'sawfish.wm.commands.x-cycle)

(setq im-class "QQ.exe|kopete|Pidgin" ;; im = instant messanger
      br-class "iceweasel|Navigator|firefox|epiphany-browser|chromium|Download|Google-chrome" ;; br = browser
      dc-class "libreoffice|DocumentWindow|VCLSalFrame|openoffice|AcroRd32.exe|acroread|evince|Gnumeric|mupdf" ;; dc = doc
      mg-class "meld|gimp|gitk|tkdiff|rdesktop" ;; mg = meld/gimp
      fm-class "nautilus|file-roller" ;; fm = file manager
      bhj-cycle-groups (list im-class
                     br-class
                     dc-class))

(define-cycle-command-pair
  'cycle-class-bhj 'cycle-class-bhj-backwards
  (lambda (w)
    (let ((class (bhj-global-cycle-class w)))
      (delete-if-not window-in-cycle-p
                     (filter-windows
                      (lambda (x) (equal (bhj-global-cycle-class x) class))
                      (window-order)))))
  #:spec "%W")

(bind-keys s-h-keymap "Super-c" 'cycle-class-bhj)
(bind-both-global&window-keymaps "Super-$" 'cycle-class-bhj)
(bind-keys s-h-keymap "c"  '(system "do-capture&"))

(define-cycle-command-pair
  'cycle-im-window 'cycle-im-windows-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match im-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-br-window 'cycle-br-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match br-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-dc-window 'cycle-dc-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match dc-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-mg-window 'cycle-mg-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match mg-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-fm-window 'cycle-fm-window-backwards
  (lambda () (filter-windows
              (lambda (x) (and (string-match fm-class (bhj-window-class x))
                               (not (string-match "x-nautilus-desktop" (window-name x)))))
              (stacking-order))))

(defun scroll-lock-off (&optional w)
  (when w
    (window-put w 'scroll-lock nil))
  (unbind-both-global&window-keymaps "SPC")
  (unbind-both-global&window-keymaps "BS")
  (system "switch-caps-led off&"))

(defun scroll-lock-on (&optional w)
  (when w
    (window-put w 'scroll-lock t))
  (bind-both-global&window-keymaps "SPC" '(synthesize-event "Next" (input-focus)))
  (bind-both-global&window-keymaps "BS" '(synthesize-event "Prior" (input-focus)))
  (system "switch-caps-led on&"))

(defun scroll-lock-toggle ()
  (let ((w (input-focus)))
    (if (window-get w 'scroll-lock)
        (scroll-lock-off w)
      (scroll-lock-on w))))

(bind-both-global&window-keymaps "XF86LaunchA" #'scroll-lock-toggle) ; The F3 key on MBA
(bind-both-global&window-keymaps "Super-S-SPC" #'scroll-lock-toggle)
(bind-both-global&window-keymaps "C-ESC" '(synthesize-event "ESC" (input-focus)))
(bind-keys s-h-keymap "g"  '(system "find-or-exec Gimp&"))
(bind-keys s-h-keymap "w"  '(system "find-or-exec wine&"))
(bind-keys s-h-keymap "m" 'move-window-interactively)
(bind-keys s-h-keymap "l" '(system "sawfish-move-to-laptop&"))
(bind-keys s-h-keymap "L" '(system "sawfish-move-to-home-screen&"))
(bind-keys s-h-keymap "Super-p" '(system "input-main-passwd&"))
(bind-keys s-h-keymap "Super-SPC" '(synthesize-event-gnome? "Menu" (input-focus)))
(bind-keys s-h-keymap "Super-+" '(system "terminal-font-change +&"))
(bind-keys s-h-keymap "Super--" '(system "terminal-font-change -&"))

(defun ime-toggle (w focus-mode)
  (if (window-get w 'scroll-lock)
      (scroll-lock-on)
    (scroll-lock-off))
  (if (window-get w 'code-reading)
      (emacs-code-reading-on w)
    (emacs-code-reading-off w))
  (if (string= (window-class w) "rdesktop")
      (bind-both-global&window-keymaps "M-C-RET" '(system "toggle-rdesktop-keys&"))
    (system "toggle-rdesktop-keys off&"))
  (if (string= (window-class w) "Emacs")
      (unbind-both-global&window-keymaps "Super-\\")
    (bind-both-global&window-keymaps "Super-\\"  '(system "xdotool-when-keyboard-clear key super+F12&"))))

(add-hook 'focus-in-hook ime-toggle)

(system "~/system-config/bin/sawfish-auto-start&")
(setq esc-x-keymap (make-keymap))
(bind-keys esc-map "x" esc-x-keymap)

(mapc (lambda (start-and-end)
        (let ((start (car start-and-end))
              (end (cdr start-and-end)))
          (do ((c start))
              ((> c end) nil)
            (setq cs (format nil "%c" c))
            (bind-keys esc-x-keymap cs `(synthesize-event-gnome? ,(format nil "M-%s" cs) (input-focus)))
            (setq c (1+ c)
                  cs (format nil "%c" c)))))
      '((?a . ?z) (?A . ?Z)))

(bind-keys esc-x-keymap "RET" '(synthesize-event-gnome? "M-RET" (input-focus)))

(defun synthesize-multiple-events (&rest events)
  (mapc (lambda (e)
          (synthesize-event e (input-focus)))
        events))

(defun emacs-code-reading-toggle ()
  (let ((w (input-focus)))
    (if (window-get w 'code-reading)
        (emacs-code-reading-off w)
      (emacs-code-reading-on w))))

(defun emacs-code-reading-on (&optional w)
  (when w
    (window-put w 'code-reading t))
  (system "switch-caps-led on&")
  (load-file "~/system-config/.sawfish/lisp/easy-emacs-code-reading.jl"))

(defun unload-keys-in-file (file)
  (let* ((file (open-file file 'read))
         (event "")
         (line ""))
    (while (setq line (read-line file))
      (when (string-match "bind-keys\\s+global-keymap\\s+\"(.*?)\"" line)
        (setq event (expand-last-match "\\1"))
        (unbind-both-global&window-keymaps event)))
    (close-file file)))

(defun emacs-code-reading-off (&optional w)
  (when w
    (window-put w 'code-reading nil))
  (unload-keys-in-file "~/system-config/.sawfish/lisp/easy-emacs-code-reading.jl")
  (bind-both-global&window-keymaps "F23" '(system "xdotool click 4&"))
  (bind-both-global&window-keymaps "F24" '(system "xdotool click 5&"))
  (bind-both-global&window-keymaps "XF86Back" '(system "xdotool click 1&"))
  (system "switch-caps-led off&"))

(defun keypad-number-on ()
  (unload-keys-in-file "~/system-config/.sawfish/lisp/keypad.jl"))

(defun keypad-number-off ()
  (load-file "~/system-config/.sawfish/lisp/keypad.jl"))

(bind-both-global&window-keymaps "KP_Enter" '(system "toggle-number-lock&"))

(bind-both-global&window-keymaps "Scroll_Lock" #'emacs-code-reading-toggle)
(bind-keys s-h-keymap "?"
           '(read-event (format nil "%s" (lookup-event-binding (read-event)))))

(bind-keys s-h-keymap "F12" '(system "toggle-dvp-us.sh&"))
(bind-both-global&window-keymaps "XF86TouchpadToggle" '(system "edit-with-emacs&"))
(bind-both-global&window-keymaps "Super-(" '(system "sawfish-start-macro&"))
(bind-keys s-h-keymap "e" '(system "sawfish-play-macro&"))
(bind-both-global&window-keymaps "XF86Mail" '(synthesize-multiple-events "C-x" "C-s" "C-x" "#"))
(bind-both-global&window-keymaps "XF86HomePage" '(system "qtcreator-edit-with-emacs&"))
(bind-keys s-h-keymap "k" '(system "sawfish-help-key&"))
(bind-keys s-h-keymap "Super-k" '(system "sawfish-help-key-ask-map&"))
(bind-both-global&window-keymaps "Super-ESC" '(system "sawfish-clean-screen&"))
(bind-both-global&window-keymaps "Print" print-keymap)
(bind-keys print-keymap "Print" '(system "screenshot --full&"))
(bind-keys print-keymap "f" '(system "screenshot --full&"))
(bind-keys print-keymap "d" '(system "screenshot -d&"))
(bind-keys print-keymap "s" '(system "screenshot --selected&"))
(bind-keys print-keymap "c" '(system "screenshot --current&"))
(bind-keys print-keymap "k" '(system "sawfish-get-screen-shot-whole&"))
(bind-keys print-keymap "e" '(system "e /tmp/screen-exchange&"))
(bind-keys print-keymap "p" '(system "adb-get-screenshot-for-emacs-org&"))
(bind-both-global&window-keymaps "XF86Favorites" '(system "do-work&"))
(bind-keys s-h-keymap "a" '(system "find-or-exec 'qpdfview|okular'&"))
(bind-keys s-h-keymap "A" '(system "adb-ignite-device&"))
(bind-both-global&window-keymaps "Super-Control-F1" '(system "sawfish-force-maximize&"))
(bind-keys s-h-keymap "Super-XF86Favorites" '(let ((w (input-focus))) (hide-window w) (show-window w)))
(bind-keys s-h-keymap "Super-v" '(system "sendtext-sawfish&"))
(bind-keys s-h-keymap "C-p" '(system "sawfish-show-pointer&"))
(bind-keys s-h-keymap "M-C-p" '(system "sawfish-show-pointer&"))
(bind-keys s-h-keymap "C-XF86Favorites" '(system "mm8-bless.sh all&"))
(bind-keys s-h-keymap "XF86Favorites" '(system "mm8-bless.sh bless-heroism&"))

(defun get-window-xy-size (class)
  (let ((x 100000)
        (y 100000)
        (X 0)
        (Y 0))
    (mapcar (lambda (w) (let* ((wx (+ (car (window-position w))))
                          (wy (+ (cdr (window-position w))))
                          (wX (+ wx (car (window-frame-dimensions w))))
                          (wY (+ wy (cdr (window-frame-dimensions w)))))
                     (when (> x wx)
                       (setq x wx))
                     (when (> y wy)
                       (setq y wy))
                     (when (< X wX)
                       (setq X wX))
                     (when (< Y wY)
                       (setq Y wY))))
            (filter (lambda (w) (string-equal class (window-class w))) (managed-windows)))
    (format nil "-x %d -y %d --width %d --height %d" x y (- X x) (- Y y))))

(bind-keys window-keymap "Super-q"
           (lambda ()
             (let ((window (input-focus)))
               (unless (equal (window-class window) "Xfce4-panel")
                 (delete-window-safely window)))))
(bind-both-global&window-keymaps "Super-h" s-h-keymap)
