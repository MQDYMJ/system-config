#+title: 各种编程语言之间的对比学习
#+Html: <p style="color: red;"> <b>Not finished yet.</b> </p>
#+Html: <p style="color: red;"> <b>Not finished yet.</b> </p>
# bhj-tags: blog

* TODO 写完这篇博客
  :LOGBOOK:
  - State "TODO"       from ""           [2016-12-23 金 12:10]
  :END:
  :PROPERTIES:
  :ID:       921c433e-f798-4376-9d72-b4e14f2c844f
  :END:

* 数学

各种编程语言的数学应该基本都是一样的，整数、浮点数、加减乘除余，不需要太专门的学习。唯一可能有些语言有一些专门的函数库，比如sin、cos等三角函数。

这里面还包括各种数值类型，比如整型、short、byte、char、signed、unsigned、long long、float、double等等等等，以及它们各自的记法。各种进制，二、八、十、十六进制等。

数值之间的转换，比如从float强制转换为int。在有些脚本语言里，甚至可以从字符串直接转换为int。比如在Perl里，~int("5") == 5~；甚至 ~"5" + 6 == 11~。这种现象在编程语言里有个术语，叫类型检查，比如Java这种语言，类型检查非常的强，上面 ~"5" + 6~ 这种写法是绝对禁止的；而Perl则属于没有类型检查的，或者说，它的类型检查比较弱。

类型检查给了程序员很多帮助，比如可以提前发现程序里的一些逻辑错误，同时也给程序员带来额外的负担，主要体现在表达起来变得更啰嗦了——每个变量必须声明其类型等等诸如此类的。

像Perl允许写 ~"5" + 6~，甚至也允许写 ~"x" + 6~，其结果为6，因为 ="x"= 的数值被认为等于0。有些脚本语言则会禁止写类似于 ~"x" + 6~ 这种语句，比如 bash 等。

* 字符串

在所有的语言里都一定会有字符串。所以熟练掌握对字符串的处理函数、命令、工具，对编程的帮助是非常巨大的。因为所有编程语言最后写出来的源代码，其本质都是一个可能特别特别长的字符串。

1. 编码

字符串都需要编码。这一点对于我等非英语母语的中国人来讲，问题更突出一些。

1. 单字节编码。一个字符只占一个字节，可想而知，只能表达128（或256，区别不大）个字母。一般的ASCII编码就是单字节编码。

2. 多字节编码。有很多种编码方式，比如gbk，比如utf-8。

   这种编码有很多是不定长的，其中像gbk编码的规则相对简单，前面128个字与ASCII码相同，后面的则全部是两个字节表示一个（一般是中文汉字，也有日文假名、汉字等）。

   而utf-8编码就更复杂了。一个字编出来的码可以是1个字节，也可能是2个字节，3个字节。等等等等。

3. 统一编码

   后来国际标准组织制定出了Unicode统一编码标准。这里所有的字都用双字节或者4字节来表示了。如果想表示一个字符串的话，不能用C语言里的char[]字节数组了，而必须改成用short[]甚至int[]数组。

Java比较背，在Unicode还没有成熟的时候，决定了用两个字节表示一个Unicode字，结果后来发现两个字节（16bit）是不够用的，必须用4个字节，所以后来又作了一些扩充，这个就非常复杂了。

** 各种字符串相关的函数

- 求字符串长度。比如strlen。注意只有在ASCII编码的情况下，strlen返回来的值，真正代表了里面有多少个字码。

  如果是多字节编码，想知道里面有多少个字码，建议先将其转换成wcs（wide char string，宽字符串），然后再用wcslen函数。

  比如这个字码：“你”，用utf-8编码表示的话，应该有3个字节。但用wcs表示的话，它占用2个或4个字节，但wcslen返回为1（因为只有一个字码“你”）。

- 字符串拼接，strcat等等。

  有些语言必须用专门的函数来表示字符串拼接，比如C语言里的strcat。但有些语言里，字符串拥有自己专门的运算符，比如在Python里，字符串通过加法符号“+”来进行拼接。

  Perl语言比较“特殊”，其设计者认为，“+”运算必须是拥用交换性的，~a + b = b + a~，而字符串的拼接不满足此规则。所以Perl里用 =.= 来表示字符串拼接。Lua语言里则使用两个点：="a" .. "b" = "ab"=。这个非常有意思，不小心的话会搞混掉。但稍微熟练一点就不会了，尤其在你短期内大量使用某一语言完成自己的工作的情况下。

  * 字符串的乘法

    Perl是比较变态的，它对字符串提供了“乘法”操作符，使用的运算符是 =x= （字母x），使用的方法如下： ='hello world' x 2=，得到的结果是 ='hello worldhello world'=。个人感觉这种内置的运算符并不是非常有用，使用到的场景并不是非常多，如果是一个设计得非常好的语言，不应该提供太多这种花哨但不实用的功能，因为这种功能太多了，是会分散使用者的注意力的。所谓乱花渐欲迷人眼... 这个功能最大的使用场景可能是在字符串的格式化的时候，比如在以前的终端界面下，要出报表，主要是英文为主，中间要使用大量的空格来保持对齐等等。

    在其他语言里，Emacs Lisp有个make-string函数，但它只用把一个字符c乘以一个整数N，最后相当于把这个字符c重复了N遍。

- 字符串的格式化

  最早学习的是C语言的话，大家最早学会的函数应该是printf，它支持把字符串格式化后，然后输出到stdout标准输出设备上。

  这里最有用的功能可能还是一些对齐相关的，比如 =printf("%08d", n)=，如果n不足8位数字的话，前面补0，以保证最后的长度是8。又比如 =%08s=，用于格式化字符串的话，前面会补空格以保证最后长度为8（这个用于对齐是非常棒的）。

  注意，我个人在学习各种语言的过程中，会非常纠结于其他语言里是不是也有类似于C语言里的 =printf= 函数，如果没有的话，就会觉得有点失落，其实这是没有道理的。其他语言说不定有更好的，也说不定 =printf= 本身其实并没有那么好，只不过是我个人有点恋旧罢了。嗯，以后还要克服呢。比如上面的对齐，也就是在全英文、终端环境下还有点儿用吧，你想在网页、Word文档里对齐，那还得用别的手段。尤其是要写更严肃的学术文章，最好的排版工具，还得是Latex呢。而且，很多情况下，一定要提醒自己，格式、排版并没有那么重要，你说的内容才是最重要的。

* 数组

讲完字符串后，马上就讲数组是比较合适的。字符串其实就是一种数组。比较特别的数组，尤其考虑到多字节编码的情况下，从这样的字符串数组里取一个元素出来，可能不是很有意义（除了与编码本身相关的问题可能有点意义，比如“你”这个字用utf-8编码后，第二个字节是什么？）。

注意数组的类型有很多，取决于我们从哪个角度来观察这种数据。

1. 取长度操作/长度属性。

   一个数组的长度是多少？这可以用一个函数来计算，也可能一个数组本身带有一个属性，可以直接告诉你答案。

   - Perl

     在Perl下，有个函数叫 =length=，它可以告诉你一个字符串的长度。注意多字节编码和统一编码（Unicode）下，字符串的长度是不一样的，下图中“你”字在utf-8编码时长度为3，统一编码后长度为1。

     [[/home/bhj/shots/2016-12-23-12.25.38.png]]

     注意 =length= 只是给字符串用的。如果要知道一个数组的长度，Perl下使用的方法是 =scalar @array=。

   - Java

     Java下知道一个字符串的长度，用的函数是String类自己的成员函数 =length()=。

     Java下想知道一个数组Array的长度，用的是Array类的成员变量，=length=。

     上面的这种情况，是非常让人崩溃的。我自己经常记不住什么时候用函数，什么时候不用加函数。

   - Python

     Python下不管是什么数组类型，取长度用的都是同一个函数，len。String、Tuple、List都是用这个函数取长度。这是一个全局函数（虽然这种现代的语言对于什么是全局函数是很狡滑的，比如Python的全局函数，其实都是定义在 =__builtins__= 模块底下的函数）。

   - Ruby

     Ruby下一切都是对象，所有数组类型都有一个自己的 =length()= 成员函数。

   - Lua

     Lua下面没有传统意义上的数组，只有一种叫做Table的数据类型。取长度的话在前面加一个 =#= 就可以了。比如 ~#{1, 3, 5, 7, 9} == 5~。

   - Lisp

     Lisp有很多种方言。在我最熟悉的Emacs Lisp里， 所有vector类型的数据，可以用Elisp自带的 =length= 函数来求其长度。

   - Bash

     在Bash下，求数组长度的写法是 =${#array[@]}=

* 关联数组

  关联数组有很多名字，比如叫Map（映射），Hash（哈希），甚至还有叫HashMap的... 一定程度上说明这种数据类型的实现基本上都以用Hash（哈希）算法实现居多。

** 关联数组的构造、输入

*** 无内置关联数组

C、C++等语言，并没有语言本身内置的关联数组，而是通过标准库来提供的。所以这种语言里想初始化一堆关联数据的话，是需要稍微更啰嗦一点的。

还好C++语言本身有个运算符重载的机制，所以使用起来的话，假设m是一个map变量，可以直接用 =m['hello']= 的写法。

- Java

  在Java里用HashMap或其他类似的数据结构都要通过成员函数来进行：

  #+BEGIN_SRC java
    HashMap<String, Integer> x = new HashMap<String, Integer>();
    x.put("hello", 1);
    x.put("world", 2);
    System.out.printf("%d\n", x.get("hello"));
  #+END_SRC

  习惯了就好...

*** 有内置关联数据

- Bash

  #+BEGIN_SRC sh
    declare -A assocArray
    assocArray=(
        [hello]=1
        [world]=2
    )
    echo ${assocArray[hello]}
  #+END_SRC

- Lua

  Lua 里面的关联数据和普通的数组内部都用同一种数据结构来表示，就是Table，只不过前者用任意的数据作为下标，后者用整数作为下标。

  #+BEGIN_SRC lua
    x = {
       ['hello'] = 1,
       ['world'] = 2,
    }

    print(x['hello'])
  #+END_SRC

- Perl

  Perl下的数据结构很有意思，普通数据前面加一个 =@=（这个符号里面包着个 =a= 字，象征着array），关联数据前面加一个 =%=（这个符号里面有两个互相“关联”的小圈圈）。普通数组用 =[]= 引用，关联数组用 ={}= 引用（不然的话就不能区分是普通数组还是关联数组了，Perl里 =$@%= 是变量名不可分割的一部分，一个程序里既可以存在 =$x=，也可以存在 =@x= 等等）：

  #+BEGIN_SRC sh
    %x = (hello => 1, world => 2);
    @x = (1, 2);
    print $x{hello};
    print $x[1];
  #+END_SRC

  另外注意这里 =hello= 和 =world= 因为是一个 /identifier/，所以不需要加引号。
