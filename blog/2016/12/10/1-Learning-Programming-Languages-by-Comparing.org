#+title: 各种编程语言之间的对比学习
#+Html: <p style="color: red;"> <b>Not finished yet.</b> </p>
#+Html: <p style="color: red;"> <b>Not finished yet.</b> </p>
# bhj-tags: blog
* 数学

各种编程语言的数学应该基本都是一样的，整数、浮点数、加减乘除余，不需要太专门的学习。唯一可能有些语言有一些专门的函数库，比如sin、cos等三角函数。

这里面还包括各种数值类型，比如整型、short、byte、char、signed、unsigned、long long、float、double等等等等，以及它们各自的记法。各种进制，二、八、十、十六进制等。

数值之间的转换，比如从float强制转换为int。在有些脚本语言里，甚至可以从字符串直接转换为int。比如在Perl里，~int("5") == 5~；甚至 ~"5" + 6 == 11~。这种现象在编程语言里有个术语，叫类型检查，比如Java这种语言，类型检查非常的强，上面 ~"5" + 6~ 这种写法是绝对禁止的；而Perl则属于没有类型检查的，或者说，它的类型检查比较弱。

类型检查给了程序员很多帮助，比如可以提前发现程序里的一些逻辑错误，同时也给程序员带来额外的负担，主要体现在表达起来变得更啰嗦了——每个变量必须声明其类型等等诸如此类的。

像Perl允许写 ~"5" + 6~，甚至也允许写 ~"x" + 6~，其结果为6，因为 ="x"= 的数值被认为等于0。有些脚本语言则会禁止写类似于 ~"x" + 6~ 这种语句，比如 bash 等。

* 字符串

在所有的语言里都一定会有字符串。所以熟练掌握对字符串的处理函数、命令、工具，对编程的帮助是非常巨大的。因为所有编程语言最后写出来的源代码，其本质都是一个可能特别特别长的字符串。

1. 编码

字符串都需要编码。这一点对于我等非英语母语的中国人来讲，问题更突出一些。

1. 单字节编码。一个字符只占一个字节，可想而知，只能表达128（或256，区别不大）个字母。一般的ASCII编码就是单字节编码。

2. 多字节编码。有很多种编码方式，比如gbk，比如utf-8。

   这种编码有很多是不定长的，其中像gbk编码的规则相对简单，前面128个字与ASCII码相同，后面的则全部是两个字节表示一个（一般是中文汉字，也有日文假名、汉字等）。

   而utf-8编码就更复杂了。一个字编出来的码可以是1个字节，也可能是2个字节，3个字节。等等等等。

3. 统一编码

   后来国际标准组织制定出了Unicode统一编码标准。这里所有的字都用双字节或者4字节来表示了。如果想表示一个字符串的话，不能用C语言里的char[]字节数组了，而必须改成用short[]甚至int[]数组。

Java比较背，在Unicode还没有成熟的时候，决定了用两个字节表示一个Unicode字，结果后来发现两个字节（16bit）是不够用的，必须用4个字节，所以后来又作了一些扩充，这个就非常复杂了。

** 各种字符串相关的函数

- 求字符串长度。比如strlen。注意只有在ASCII编码的情况下，strlen返回来的值，真正代表了里面有多少个字码。

  如果是多字节编码，想知道里面有多少个字码，建议先将其转换成wcs（wide char string，宽字符串），然后再用wcslen函数。

  比如这个字码：“你”，用utf-8编码表示的话，应该有3个字节。但用wcs表示的话，它占用2个或4个字节，但wcslen返回为1（因为只有一个字码“你”）。

- 字符串拼接，strcat等等。

  有些语言必须用专门的函数来表示字符串拼接，比如C语言里的strcat。但有些语言里，字符串拥有自己专门的运算符，比如在Python里，字符串通过加法符号“+”来进行拼接。

  Perl语言比较“特殊”，其设计者认为，“+”运算必须是拥用交换性的，~a + b = b + a~，而字符串的拼接不满足此规则。所以Perl里用 =.= 来表示字符串拼接。Lua语言里则使用两个点：="a" .. "b" = "ab"=。这个非常有意思，不小心的话会搞混掉。但稍微熟练一点就不会了，尤其在你短期内大量使用某一语言完成自己的工作的情况下。

  * 字符串的乘法
